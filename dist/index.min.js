/**
   * @license
   * author: peng-huang-cc
   * abi-decoder.js v1.0.0
   * Released under the MIT license.
   */
import t from"buffer";import e from"assert";import r from"crypto";import i from"stream";import n from"events";import o from"util";function s(t){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},s(t)}function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function a(t,e,r){return e&&u(t.prototype,e),r&&u(t,r),t}function f(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&d(t,e)}function l(t){return l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},l(t)}function d(t,e){return d=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},d(t,e)}function c(t,e){if(e&&("object"==typeof e||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function p(t){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}();return function(){var r,i=l(t);if(e){var n=l(this).constructor;r=Reflect.construct(i,arguments,n)}else r=i.apply(this,arguments);return c(this,r)}}function m(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}function v(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return m(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?m(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var i=0,n=function(){};return{s:n,n:function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}},e:function(t){throw t},f:n}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,s=!0,h=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return s=t.done,t},e:function(t){h=!0,o=t},f:function(){try{s||null==r.return||r.return()}finally{if(h)throw o}}}}var g="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function y(t){throw new Error('Could not dynamically require "'+t+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var w={exports:{}};!function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"===s(t)?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o=y("buffer").Buffer}catch(t){}function h(t,e,r){for(var i=0,n=Math.min(t.length,r),o=e;o<n;o++){var s=t.charCodeAt(o)-48;i<<=4,i|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return i}function u(t,e,r,i){for(var n=0,o=Math.min(t.length,r),s=e;s<o;s++){var h=t.charCodeAt(s)-48;n*=i,n+=h>=49?h-49+10:h>=17?h-17+10:h}return n}n.isBN=function(t){return t instanceof n||null!==t&&"object"===s(t)&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"===s(t))return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,h=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);return this.strip()},n.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n,o=0;for(r=t.length-6,i=0;r>=e;r-=6)n=h(t,r,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,i++);r+6!==e&&(n=h(t,e,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303),this.strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,h=Math.min(o,o-s)+r,a=0,f=r;f<h;f+=i)a=u(t,f,f+i,e),this.imuln(n),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==s){var l=1;for(a=u(t,f,t.length,e),f=0;f<s;f++)l*=e;this.imuln(l),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},n.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var a=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,h=67108863&s,u=s/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var f=u>>>26,l=67108863&u,d=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var p=a-c|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&s}r.words[a]=0|l,u=0|f}return 0!==u?r.words[a]=0|u:r.length--,r.strip()}n.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,s=0;s<this.length;s++){var h=this.words[s],u=(16777215&(h<<n|o)).toString(16);i=0!=(o=h>>>24-n&16777215)||s!==this.length-1?a[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:a[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16)},n.prototype.toBuffer=function(t,e){return r(void 0!==o),this.toArrayLike(o,t,e)},n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},n.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var s,h,u="le"===e,a=new t(o),f=this.clone();if(u){for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[h]=s;for(;h<o;h++)a[h]=0}else{for(h=0;h<o-n;h++)a[h]=0;for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[o-h-1]=s}return a},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this.strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,r){var i,n,o,s=t.words,h=e.words,u=r.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],p=8191&c,m=c>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],S=8191&_,x=_>>>13,A=0|s[5],k=8191&A,E=A>>>13,R=0|s[6],B=8191&R,I=R>>>13,T=0|s[7],P=8191&T,N=T>>>13,O=0|s[8],L=8191&O,q=O>>>13,z=0|s[9],j=8191&z,C=z>>>13,H=0|h[0],Z=8191&H,D=H>>>13,K=0|h[1],U=8191&K,F=K>>>13,W=0|h[2],V=8191&W,J=W>>>13,X=0|h[3],$=8191&X,G=X>>>13,Y=0|h[4],Q=8191&Y,tt=Y>>>13,et=0|h[5],rt=8191&et,it=et>>>13,nt=0|h[6],ot=8191&nt,st=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ft=0|h[8],lt=8191&ft,dt=ft>>>13,ct=0|h[9],pt=8191&ct,mt=ct>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,D))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,D))+Math.imul(m,Z)|0,o=Math.imul(m,D);var gt=(a+(i=i+Math.imul(l,U)|0)|0)+((8191&(n=(n=n+Math.imul(l,F)|0)+Math.imul(d,U)|0))<<13)|0;a=((o=o+Math.imul(d,F)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,D))+Math.imul(y,Z)|0,o=Math.imul(y,D),i=i+Math.imul(p,U)|0,n=(n=n+Math.imul(p,F)|0)+Math.imul(m,U)|0,o=o+Math.imul(m,F)|0;var yt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,V)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,D))+Math.imul(b,Z)|0,o=Math.imul(b,D),i=i+Math.imul(g,U)|0,n=(n=n+Math.imul(g,F)|0)+Math.imul(y,U)|0,o=o+Math.imul(y,F)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,J)|0;var wt=(a+(i=i+Math.imul(l,$)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,$)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,D))+Math.imul(x,Z)|0,o=Math.imul(x,D),i=i+Math.imul(M,U)|0,n=(n=n+Math.imul(M,F)|0)+Math.imul(b,U)|0,o=o+Math.imul(b,F)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(p,$)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(k,Z),n=(n=Math.imul(k,D))+Math.imul(E,Z)|0,o=Math.imul(E,D),i=i+Math.imul(S,U)|0,n=(n=n+Math.imul(S,F)|0)+Math.imul(x,U)|0,o=o+Math.imul(x,F)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(g,$)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(a+(i=i+Math.imul(l,rt)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,rt)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,Z),n=(n=Math.imul(B,D))+Math.imul(I,Z)|0,o=Math.imul(I,D),i=i+Math.imul(k,U)|0,n=(n=n+Math.imul(k,F)|0)+Math.imul(E,U)|0,o=o+Math.imul(E,F)|0,i=i+Math.imul(S,V)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,J)|0,i=i+Math.imul(M,$)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(P,Z),n=(n=Math.imul(P,D))+Math.imul(N,Z)|0,o=Math.imul(N,D),i=i+Math.imul(B,U)|0,n=(n=n+Math.imul(B,F)|0)+Math.imul(I,U)|0,o=o+Math.imul(I,F)|0,i=i+Math.imul(k,V)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,J)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var St=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ut)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,D))+Math.imul(q,Z)|0,o=Math.imul(q,D),i=i+Math.imul(P,U)|0,n=(n=n+Math.imul(P,F)|0)+Math.imul(N,U)|0,o=o+Math.imul(N,F)|0,i=i+Math.imul(B,V)|0,n=(n=n+Math.imul(B,J)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,J)|0,i=i+Math.imul(k,$)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,D))+Math.imul(C,Z)|0,o=Math.imul(C,D),i=i+Math.imul(L,U)|0,n=(n=n+Math.imul(L,F)|0)+Math.imul(q,U)|0,o=o+Math.imul(q,F)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,J)|0,i=i+Math.imul(B,$)|0,n=(n=n+Math.imul(B,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,i=i+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(j,U),n=(n=Math.imul(j,F))+Math.imul(C,U)|0,o=Math.imul(C,F),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,J)|0,i=i+Math.imul(P,$)|0,n=(n=n+Math.imul(P,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(B,Q)|0,n=(n=n+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,it)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var kt=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,V),n=(n=Math.imul(j,J))+Math.imul(C,V)|0,o=Math.imul(C,J),i=i+Math.imul(L,$)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(q,$)|0,o=o+Math.imul(q,G)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,n=(n=n+Math.imul(B,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,i=i+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;a=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,$),n=(n=Math.imul(j,G))+Math.imul(C,$)|0,o=Math.imul(C,G),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,tt)|0,i=i+Math.imul(P,rt)|0,n=(n=n+Math.imul(P,it)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(B,ot)|0,n=(n=n+Math.imul(B,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(a+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(C,Q)|0,o=Math.imul(C,tt),i=i+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(q,rt)|0,o=o+Math.imul(q,it)|0,i=i+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(B,ut)|0,n=(n=n+Math.imul(B,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(k,lt)|0,n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,lt)|0,o=o+Math.imul(E,dt)|0;var Bt=(a+(i=i+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(x,pt)|0))<<13)|0;a=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,rt),n=(n=Math.imul(j,it))+Math.imul(C,rt)|0,o=Math.imul(C,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,i=i+Math.imul(P,ut)|0,n=(n=n+Math.imul(P,at)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(B,lt)|0,n=(n=n+Math.imul(B,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(a+(i=i+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(C,ot)|0,o=Math.imul(C,st),i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,at)|0,i=i+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Tt=(a+(i=i+Math.imul(B,pt)|0)|0)+((8191&(n=(n=n+Math.imul(B,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(C,ut)|0,o=Math.imul(C,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(q,lt)|0,o=o+Math.imul(q,dt)|0;var Pt=(a+(i=i+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(N,pt)|0))<<13)|0;a=((o=o+Math.imul(N,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(C,lt)|0,o=Math.imul(C,dt);var Nt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(q,pt)|0))<<13)|0;a=((o=o+Math.imul(q,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Ot=(a+(i=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,mt))+Math.imul(C,pt)|0))<<13)|0;return a=((o=Math.imul(C,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=St,u[8]=xt,u[9]=At,u[10]=kt,u[11]=Et,u[12]=Rt,u[13]=Bt,u[14]=It,u[15]=Tt,u[16]=Pt,u[17]=Nt,u[18]=Ot,0!==a&&(u[19]=a,r.length++),r};function p(t,e,r){return(new m).mulp(t,e,r)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),n.prototype.mulTo=function(t,e){var r,i=this.length+t.length;return r=10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var h=67108863&i,u=Math.min(o,e.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var f=o-a,l=(0|t.words[f])*(0|e.words[a]),d=67108863&l;h=67108863&(d=d+h|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=h,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r.strip()}(this,t,e):p(this,t,e),r},m.prototype.makeRBT=function(t){for(var e=new Array(t),r=n.prototype._countBits(t)-1,i=0;i<t;i++)e[i]=this.revBin(i,r,t);return e},m.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var i=0,n=0;n<e;n++)i|=(1&t)<<e-n-1,t>>=1;return i},m.prototype.permute=function(t,e,r,i,n,o){for(var s=0;s<o;s++)i[s]=e[t[s]],n[s]=r[t[s]]},m.prototype.transform=function(t,e,r,i,n,o){this.permute(o,t,e,r,i,n);for(var s=1;s<n;s<<=1)for(var h=s<<1,u=Math.cos(2*Math.PI/h),a=Math.sin(2*Math.PI/h),f=0;f<n;f+=h)for(var l=u,d=a,c=0;c<s;c++){var p=r[f+c],m=i[f+c],v=r[f+c+s],g=i[f+c+s],y=l*v-d*g;g=l*g+d*v,v=y,r[f+c]=p+v,i[f+c]=m+g,r[f+c+s]=p-v,i[f+c+s]=m-g,c!==h&&(y=u*l-a*d,d=u*d+a*l,l=y)}},m.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},m.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=t[i];t[i]=t[r-i-1],t[r-i-1]=n,n=e[i],e[i]=-e[r-i-1],e[r-i-1]=-n}},m.prototype.normalize13b=function(t,e){for(var r=0,i=0;i<e/2;i++){var n=8192*Math.round(t[2*i+1]/e)+Math.round(t[2*i]/e)+r;t[i]=67108863&n,r=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,s=0;s<e;s++)o+=0|t[s],i[2*s]=8191&o,o>>>=13,i[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<n;++s)i[s]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},m.prototype.mulp=function(t,e,r){var i=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),h=new Array(i),u=new Array(i),a=new Array(i),f=new Array(i),l=new Array(i),d=r.words;d.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(e.words,e.length,a,i),this.transform(s,o,h,u,i,n),this.transform(a,o,f,l,i,n);for(var c=0;c<i;c++){var p=h[c]*f[c]-u[c]*l[c];u[c]=h[c]*l[c]+u[c]*f[c],h[c]=p}return this.conjugate(h,u,i),this.transform(h,u,d,o,i,n),this.conjugate(d,o,i),this.normalize13b(d,i),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),p(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=(t.words[i]&1<<n)>>>n}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var o=r.sqr();i<e.length;i++,o=o.sqr())0!==e[i]&&(r=r.mul(o));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var s=0;for(e=0;e<this.length;e++){var h=this.words[e]&o,u=(0|this.words[e])-h<<i;this.words[e]=u|s,s=h>>>26-i}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),h=67108863^67108863>>>o<<o,u=i;if(n-=s,n=Math.max(0,n),u){for(var a=0;a<s;a++)u.words[a]=this.words[a];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&h}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},n.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,i){var n,o,s=t.length+i;this._expand(s);var h=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)h=(o=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&o;if(0===h)return this.strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(o=-(0|this.words[n])+h)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),o=t,s=0|o.words[o.length-1];0!=(r=26-this._countBits(s))&&(o=o.ushln(r),i.iushln(r),s=0|o.words[o.length-1]);var h,u=i.length-o.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var f=i.clone()._ishlnsubmul(o,1,u);0===f.negative&&(i=f,h&&(h.words[u]=1));for(var l=u-1;l>=0;l--){var d=67108864*(0|i.words[o.length+l])+(0|i.words[o.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(o,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(o,1,l),i.isZero()||(i.negative^=1);h&&(h.words[l]=d)}return h&&h.strip(),i.strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(o=h.div.neg()),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(o=h.div.neg()),{div:o,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.isub(t)),{div:h.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modn(t.words[0]))}:this._wordDiv(t,e);var o,s,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},n.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new n(1),s=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(f),s.isub(l)),o.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(f),u.isub(l)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h),s.isub(u)):(i.isub(e),h.isub(o),u.isub(s))}return{a:h,b:u,gcd:i.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new n(1),h=new n(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,f=1;0==(e.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(e.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),s.isub(h)):(i.isub(e),h.isub(s))}return(o=0===e.cmpn(1)?s:h).cmpn(0)<0&&o.iadd(t),o},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,s=i;0!==o&&s<this.length;s++){var h=0|this.words[s];o=(h+=o)>>>26,h&=67108863,this.words[s]=h}return 0!==o&&(this.words[s]=o,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new S(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function M(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function b(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function x(t){S.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):r.strip(),r},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},i(w,g),w.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(M,g),i(b,g),i(_,g),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new M;else if("p192"===t)e=new b;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return v[t]=e,e},S.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},S.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},S.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},S.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},S.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},S.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},S.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},S.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},S.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},S.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},S.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},S.prototype.isqr=function(t){return this.imul(t,t.clone())},S.prototype.sqr=function(t){return this.mul(t,t)},S.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new n(1)).iushrn(2);return this.pow(t,i)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new n(2*f*f).toRed(this);0!==this.pow(f,a).cmp(u);)f.redIAdd(u);for(var l=this.pow(f,o),d=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),p=s;0!==c.cmp(h);){for(var m=c,v=0;0!==m.cmp(h);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new n(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},S.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},S.prototype.pow=function(t,e){if(e.isZero())return new n(1);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var o=r[0],s=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],f=u-1;f>=0;f--){var l=a>>f&1;o!==r[0]&&(o=this.sqr(o)),0!==l||0!==s?(s<<=1,s|=l,(4==++h||0===i&&0===f)&&(o=this.mul(o,r[s]),h=0,s=0)):h=0}u=26}return o},S.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},S.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new x(t)},i(x,S),x.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},x.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},x.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(i).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(w,g);var M={exports:{}};!function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"===s(t)?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o=y("buffer").Buffer}catch(t){}function h(t,e,r){for(var i=0,n=Math.min(t.length,r),o=e;o<n;o++){var s=t.charCodeAt(o)-48;i<<=4,i|=s>=49&&s<=54?s-49+10:s>=17&&s<=22?s-17+10:15&s}return i}function u(t,e,r,i){for(var n=0,o=Math.min(t.length,r),s=e;s<o;s++){var h=t.charCodeAt(s)-48;n*=i,n+=h>=49?h-49+10:h>=17?h-17+10:h}return n}n.isBN=function(t){return t instanceof n||null!==t&&"object"===s(t)&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"===s(t))return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&n++,16===e?this._parseHex(t,n):this._parseBase(t,e,n),"-"===t[0]&&(this.negative=1),this.strip(),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,h=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);return this.strip()},n.prototype._parseHex=function(t,e){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var r=0;r<this.length;r++)this.words[r]=0;var i,n,o=0;for(r=t.length-6,i=0;r>=e;r-=6)n=h(t,r,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303,(o+=24)>=26&&(o-=26,i++);r+6!==e&&(n=h(t,e,r+6),this.words[i]|=n<<o&67108863,this.words[i+1]|=n>>>26-o&4194303),this.strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,h=Math.min(o,o-s)+r,a=0,f=r;f<h;f+=i)a=u(t,f,f+i,e),this.imuln(n),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a);if(0!==s){var l=1;for(a=u(t,f,t.length,e),f=0;f<s;f++)l*=e;this.imuln(l),this.words[0]+a<67108864?this.words[0]+=a:this._iaddn(a)}},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},n.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var a=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],f=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],l=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function d(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,h=67108863&s,u=s/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var f=u>>>26,l=67108863&u,d=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var p=a-c|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&s}r.words[a]=0|l,u=0|f}return 0!==u?r.words[a]=0|u:r.length--,r.strip()}n.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,s=0;s<this.length;s++){var h=this.words[s],u=(16777215&(h<<n|o)).toString(16);i=0!=(o=h>>>24-n&16777215)||s!==this.length-1?a[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var d=f[t],c=l[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:a[d-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16)},n.prototype.toBuffer=function(t,e){return r(void 0!==o),this.toArrayLike(o,t,e)},n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},n.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var s,h,u="le"===e,a=new t(o),f=this.clone();if(u){for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[h]=s;for(;h<o;h++)a[h]=0}else{for(h=0;h<o-n;h++)a[h]=0;for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[o-h-1]=s}return a},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this.strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var c=function(t,e,r){var i,n,o,s=t.words,h=e.words,u=r.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],p=8191&c,m=c>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],S=8191&_,x=_>>>13,A=0|s[5],k=8191&A,E=A>>>13,R=0|s[6],B=8191&R,I=R>>>13,T=0|s[7],P=8191&T,N=T>>>13,O=0|s[8],L=8191&O,q=O>>>13,z=0|s[9],j=8191&z,C=z>>>13,H=0|h[0],Z=8191&H,D=H>>>13,K=0|h[1],U=8191&K,F=K>>>13,W=0|h[2],V=8191&W,J=W>>>13,X=0|h[3],$=8191&X,G=X>>>13,Y=0|h[4],Q=8191&Y,tt=Y>>>13,et=0|h[5],rt=8191&et,it=et>>>13,nt=0|h[6],ot=8191&nt,st=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ft=0|h[8],lt=8191&ft,dt=ft>>>13,ct=0|h[9],pt=8191&ct,mt=ct>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,D))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,D))+Math.imul(m,Z)|0,o=Math.imul(m,D);var gt=(a+(i=i+Math.imul(l,U)|0)|0)+((8191&(n=(n=n+Math.imul(l,F)|0)+Math.imul(d,U)|0))<<13)|0;a=((o=o+Math.imul(d,F)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,D))+Math.imul(y,Z)|0,o=Math.imul(y,D),i=i+Math.imul(p,U)|0,n=(n=n+Math.imul(p,F)|0)+Math.imul(m,U)|0,o=o+Math.imul(m,F)|0;var yt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,V)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,D))+Math.imul(b,Z)|0,o=Math.imul(b,D),i=i+Math.imul(g,U)|0,n=(n=n+Math.imul(g,F)|0)+Math.imul(y,U)|0,o=o+Math.imul(y,F)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,J)|0;var wt=(a+(i=i+Math.imul(l,$)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,$)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,D))+Math.imul(x,Z)|0,o=Math.imul(x,D),i=i+Math.imul(M,U)|0,n=(n=n+Math.imul(M,F)|0)+Math.imul(b,U)|0,o=o+Math.imul(b,F)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(p,$)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(k,Z),n=(n=Math.imul(k,D))+Math.imul(E,Z)|0,o=Math.imul(E,D),i=i+Math.imul(S,U)|0,n=(n=n+Math.imul(S,F)|0)+Math.imul(x,U)|0,o=o+Math.imul(x,F)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(g,$)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(a+(i=i+Math.imul(l,rt)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,rt)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,Z),n=(n=Math.imul(B,D))+Math.imul(I,Z)|0,o=Math.imul(I,D),i=i+Math.imul(k,U)|0,n=(n=n+Math.imul(k,F)|0)+Math.imul(E,U)|0,o=o+Math.imul(E,F)|0,i=i+Math.imul(S,V)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,J)|0,i=i+Math.imul(M,$)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(P,Z),n=(n=Math.imul(P,D))+Math.imul(N,Z)|0,o=Math.imul(N,D),i=i+Math.imul(B,U)|0,n=(n=n+Math.imul(B,F)|0)+Math.imul(I,U)|0,o=o+Math.imul(I,F)|0,i=i+Math.imul(k,V)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,J)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var St=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ut)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,D))+Math.imul(q,Z)|0,o=Math.imul(q,D),i=i+Math.imul(P,U)|0,n=(n=n+Math.imul(P,F)|0)+Math.imul(N,U)|0,o=o+Math.imul(N,F)|0,i=i+Math.imul(B,V)|0,n=(n=n+Math.imul(B,J)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,J)|0,i=i+Math.imul(k,$)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,D))+Math.imul(C,Z)|0,o=Math.imul(C,D),i=i+Math.imul(L,U)|0,n=(n=n+Math.imul(L,F)|0)+Math.imul(q,U)|0,o=o+Math.imul(q,F)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,J)|0,i=i+Math.imul(B,$)|0,n=(n=n+Math.imul(B,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,i=i+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(j,U),n=(n=Math.imul(j,F))+Math.imul(C,U)|0,o=Math.imul(C,F),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,J)|0,i=i+Math.imul(P,$)|0,n=(n=n+Math.imul(P,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(B,Q)|0,n=(n=n+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,it)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var kt=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,V),n=(n=Math.imul(j,J))+Math.imul(C,V)|0,o=Math.imul(C,J),i=i+Math.imul(L,$)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(q,$)|0,o=o+Math.imul(q,G)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,n=(n=n+Math.imul(B,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,i=i+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;a=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,$),n=(n=Math.imul(j,G))+Math.imul(C,$)|0,o=Math.imul(C,G),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,tt)|0,i=i+Math.imul(P,rt)|0,n=(n=n+Math.imul(P,it)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(B,ot)|0,n=(n=n+Math.imul(B,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(a+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(C,Q)|0,o=Math.imul(C,tt),i=i+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(q,rt)|0,o=o+Math.imul(q,it)|0,i=i+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(B,ut)|0,n=(n=n+Math.imul(B,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(k,lt)|0,n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,lt)|0,o=o+Math.imul(E,dt)|0;var Bt=(a+(i=i+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(x,pt)|0))<<13)|0;a=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,rt),n=(n=Math.imul(j,it))+Math.imul(C,rt)|0,o=Math.imul(C,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,i=i+Math.imul(P,ut)|0,n=(n=n+Math.imul(P,at)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(B,lt)|0,n=(n=n+Math.imul(B,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(a+(i=i+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(C,ot)|0,o=Math.imul(C,st),i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,at)|0,i=i+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Tt=(a+(i=i+Math.imul(B,pt)|0)|0)+((8191&(n=(n=n+Math.imul(B,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(C,ut)|0,o=Math.imul(C,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(q,lt)|0,o=o+Math.imul(q,dt)|0;var Pt=(a+(i=i+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(N,pt)|0))<<13)|0;a=((o=o+Math.imul(N,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(C,lt)|0,o=Math.imul(C,dt);var Nt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(q,pt)|0))<<13)|0;a=((o=o+Math.imul(q,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Ot=(a+(i=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,mt))+Math.imul(C,pt)|0))<<13)|0;return a=((o=Math.imul(C,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=St,u[8]=xt,u[9]=At,u[10]=kt,u[11]=Et,u[12]=Rt,u[13]=Bt,u[14]=It,u[15]=Tt,u[16]=Pt,u[17]=Nt,u[18]=Ot,0!==a&&(u[19]=a,r.length++),r};function p(t,e,r){return(new m).mulp(t,e,r)}function m(t,e){this.x=t,this.y=e}Math.imul||(c=d),n.prototype.mulTo=function(t,e){var r,i=this.length+t.length;return r=10===this.length&&10===t.length?c(this,t,e):i<63?d(this,t,e):i<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var h=67108863&i,u=Math.min(o,e.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var f=o-a,l=(0|t.words[f])*(0|e.words[a]),d=67108863&l;h=67108863&(d=d+h|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=h,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r.strip()}(this,t,e):p(this,t,e),r},m.prototype.makeRBT=function(t){for(var e=new Array(t),r=n.prototype._countBits(t)-1,i=0;i<t;i++)e[i]=this.revBin(i,r,t);return e},m.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var i=0,n=0;n<e;n++)i|=(1&t)<<e-n-1,t>>=1;return i},m.prototype.permute=function(t,e,r,i,n,o){for(var s=0;s<o;s++)i[s]=e[t[s]],n[s]=r[t[s]]},m.prototype.transform=function(t,e,r,i,n,o){this.permute(o,t,e,r,i,n);for(var s=1;s<n;s<<=1)for(var h=s<<1,u=Math.cos(2*Math.PI/h),a=Math.sin(2*Math.PI/h),f=0;f<n;f+=h)for(var l=u,d=a,c=0;c<s;c++){var p=r[f+c],m=i[f+c],v=r[f+c+s],g=i[f+c+s],y=l*v-d*g;g=l*g+d*v,v=y,r[f+c]=p+v,i[f+c]=m+g,r[f+c+s]=p-v,i[f+c+s]=m-g,c!==h&&(y=u*l-a*d,d=u*d+a*l,l=y)}},m.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},m.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=t[i];t[i]=t[r-i-1],t[r-i-1]=n,n=e[i],e[i]=-e[r-i-1],e[r-i-1]=-n}},m.prototype.normalize13b=function(t,e){for(var r=0,i=0;i<e/2;i++){var n=8192*Math.round(t[2*i+1]/e)+Math.round(t[2*i]/e)+r;t[i]=67108863&n,r=n<67108864?0:n/67108864|0}return t},m.prototype.convert13b=function(t,e,i,n){for(var o=0,s=0;s<e;s++)o+=0|t[s],i[2*s]=8191&o,o>>>=13,i[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<n;++s)i[s]=0;r(0===o),r(0==(-8192&o))},m.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},m.prototype.mulp=function(t,e,r){var i=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),h=new Array(i),u=new Array(i),a=new Array(i),f=new Array(i),l=new Array(i),d=r.words;d.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(e.words,e.length,a,i),this.transform(s,o,h,u,i,n),this.transform(a,o,f,l,i,n);for(var c=0;c<i;c++){var p=h[c]*f[c]-u[c]*l[c];u[c]=h[c]*l[c]+u[c]*f[c],h[c]=p}return this.conjugate(h,u,i),this.transform(h,u,d,o,i,n),this.conjugate(d,o,i),this.normalize13b(d,i),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),p(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=(t.words[i]&1<<n)>>>n}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var o=r.sqr();i<e.length;i++,o=o.sqr())0!==e[i]&&(r=r.mul(o));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var s=0;for(e=0;e<this.length;e++){var h=this.words[e]&o,u=(0|this.words[e])-h<<i;this.words[e]=u|s,s=h>>>26-i}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),h=67108863^67108863>>>o<<o,u=i;if(n-=s,n=Math.max(0,n),u){for(var a=0;a<s;a++)u.words[a]=this.words[a];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&h}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},n.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,i){var n,o,s=t.length+i;this._expand(s);var h=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)h=(o=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&o;if(0===h)return this.strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(o=-(0|this.words[n])+h)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),o=t,s=0|o.words[o.length-1];0!=(r=26-this._countBits(s))&&(o=o.ushln(r),i.iushln(r),s=0|o.words[o.length-1]);var h,u=i.length-o.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var f=i.clone()._ishlnsubmul(o,1,u);0===f.negative&&(i=f,h&&(h.words[u]=1));for(var l=u-1;l>=0;l--){var d=67108864*(0|i.words[o.length+l])+(0|i.words[o.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(o,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(o,1,l),i.isZero()||(i.negative^=1);h&&(h.words[l]=d)}return h&&h.strip(),i.strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(o=h.div.neg()),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(o=h.div.neg()),{div:o,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.isub(t)),{div:h.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modn(t.words[0]))}:this._wordDiv(t,e);var o,s,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},n.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new n(1),s=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(f),s.isub(l)),o.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(f),u.isub(l)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h),s.isub(u)):(i.isub(e),h.isub(o),u.isub(s))}return{a:h,b:u,gcd:i.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new n(1),h=new n(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,f=1;0==(e.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(e.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),s.isub(h)):(i.isub(e),h.isub(s))}return(o=0===e.cmpn(1)?s:h).cmpn(0)<0&&o.iadd(t),o},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,s=i;0!==o&&s<this.length;s++){var h=0|this.words[s];o=(h+=o)>>>26,h&=67108863,this.words[s]=h}return 0!==o&&(this.words[s]=o,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new S(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var v={k256:null,p224:null,p192:null,p25519:null};function g(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){g.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function M(){g.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function b(){g.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){g.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function x(t){S.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}g.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},g.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):r.strip(),r},g.prototype.split=function(t,e){t.iushrn(this.n,0,e)},g.prototype.imulK=function(t){return t.imul(this.k)},i(w,g),w.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(M,g),i(b,g),i(_,g),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(v[t])return v[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new M;else if("p192"===t)e=new b;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return v[t]=e,e},S.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},S.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},S.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},S.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},S.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},S.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},S.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},S.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},S.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},S.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},S.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},S.prototype.isqr=function(t){return this.imul(t,t.clone())},S.prototype.sqr=function(t){return this.mul(t,t)},S.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new n(1)).iushrn(2);return this.pow(t,i)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new n(2*f*f).toRed(this);0!==this.pow(f,a).cmp(u);)f.redIAdd(u);for(var l=this.pow(f,o),d=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),p=s;0!==c.cmp(h);){for(var m=c,v=0;0!==m.cmp(h);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new n(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},S.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},S.prototype.pow=function(t,e){if(e.isZero())return new n(1);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var o=r[0],s=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],f=u-1;f>=0;f--){var l=a>>f&1;o!==r[0]&&(o=this.sqr(o)),0!==l||0!==s?(s<<=1,s|=l,(4==++h||0===i&&0===f)&&(o=this.mul(o,r[s]),h=0,s=0)):h=0}u=26}return o},S.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},S.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new x(t)},i(x,S),x.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},x.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},x.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(i).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(M,g);var b=function(t){if("string"!=typeof t)throw new Error("[is-hex-prefixed] value must be type 'string', is currently type "+s(t)+", while checking isHexPrefixed.");return"0x"===t.slice(0,2)},_=M.exports,S=function(t){return"string"!=typeof t?t:b(t)?t.slice(2):t},x=function(t){if("string"==typeof t||"number"==typeof t){var e=new _(1),r=String(t).toLowerCase().trim(),i="0x"===r.substr(0,2)||"-0x"===r.substr(0,3),n=S(r);if("-"===n.substr(0,1)&&(n=S(n.slice(1)),e=new _(-1,10)),!(n=""===n?"0":n).match(/^-?[0-9]+$/)&&n.match(/^[0-9A-Fa-f]+$/)||n.match(/^[a-fA-F]+$/)||!0===i&&n.match(/^[0-9A-Fa-f]+$/))return new _(n,16).mul(e);if((n.match(/^-?[0-9]+$/)||""===n)&&!1===i)return new _(n,10).mul(e)}else if("object"===s(t)&&t.toString&&!t.pop&&!t.push&&t.toString(10).match(/^-?[0-9]+$/)&&(t.mul||t.dividedToIntegerBy))return new _(t.toString(10),10);throw new Error("[number-to-bn] while converting number "+JSON.stringify(t)+" to BN.js instance, error: invalid number value. Value must be an integer, hex string, BN or BigNumber instance. Note, decimals are not supported.")},A=w.exports,k=x,E=new A(0),R=new A(-1),B={noether:"0",wei:"1",kwei:"1000",Kwei:"1000",babbage:"1000",femtoether:"1000",mwei:"1000000",Mwei:"1000000",lovelace:"1000000",picoether:"1000000",gwei:"1000000000",Gwei:"1000000000",shannon:"1000000000",nanoether:"1000000000",nano:"1000000000",szabo:"1000000000000",microether:"1000000000000",micro:"1000000000000",finney:"1000000000000000",milliether:"1000000000000000",milli:"1000000000000000",ether:"1000000000000000000",kether:"1000000000000000000000",grand:"1000000000000000000000",mether:"1000000000000000000000000",gether:"1000000000000000000000000000",tether:"1000000000000000000000000000000"};function I(t){var e=t?t.toLowerCase():"ether",r=B[e];if("string"!=typeof r)throw new Error("[ethjs-unit] the unit provided "+t+" doesn't exists, please use the one of the following units "+JSON.stringify(B,null,2));return new A(r,10)}function T(t){if("string"==typeof t){if(!t.match(/^-?[0-9.]+$/))throw new Error("while converting number to string, invalid number value '"+t+"', should be a number matching (^-?[0-9.]+).");return t}if("number"==typeof t)return String(t);if("object"===s(t)&&t.toString&&(t.toTwos||t.dividedToIntegerBy))return t.toPrecision?String(t.toPrecision()):t.toString(10);throw new Error("while converting number to string, invalid number value '"+t+"' type "+s(t)+".")}var P={unitMap:B,numberToString:T,getValueOfUnit:I,fromWei:function(t,e,r){var i=k(t),n=i.lt(E),o=I(e),s=B[e].length-1||1,h=r||{};n&&(i=i.mul(R));for(var u=i.mod(o).toString(10);u.length<s;)u="0"+u;h.pad||(u=u.match(/^([0-9]*[1-9]|0)(0*)/)[1]);var a=i.div(o).toString(10);h.commify&&(a=a.replace(/\B(?=(\d{3})+(?!\d))/g,","));var f=a+("0"==u?"":"."+u);return n&&(f="-"+f),f},toWei:function(t,e){var r=T(t),i=I(e),n=B[e].length-1||1,o="-"===r.substring(0,1);if(o&&(r=r.substring(1)),"."===r)throw new Error("[ethjs-unit] while converting number "+t+" to wei, invalid value");var s=r.split(".");if(s.length>2)throw new Error("[ethjs-unit] while converting number "+t+" to wei,  too many decimal points");var h=s[0],u=s[1];if(h||(h="0"),u||(u="0"),u.length>n)throw new Error("[ethjs-unit] while converting number "+t+" to wei, too many decimal places");for(;u.length<n;)u+="0";h=new A(h),u=new A(u);var a=h.mul(i).add(u);return o&&(a=a.mul(R)),new A(a.toString(10),10)}},N={exports:{}};!function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"===s(t)?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:require("buffer").Buffer}catch(t){}function h(t,e){var r=t.charCodeAt(e);return r>=65&&r<=70?r-55:r>=97&&r<=102?r-87:r-48&15}function u(t,e,r){var i=h(t,r);return r-1>=e&&(i|=h(t,r-1)<<4),i}function a(t,e,r,i){for(var n=0,o=Math.min(t.length,r),s=e;s<o;s++){var h=t.charCodeAt(s)-48;n*=i,n+=h>=49?h-49+10:h>=17?h-17+10:h}return n}n.isBN=function(t){return t instanceof n||null!==t&&"object"===s(t)&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"===s(t))return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===e?this._parseHex(t,n,i):(this._parseBase(t,e,n),"le"===i&&this._initArray(this.toArray(),e,i)))},n.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,h=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);return this.strip()},n.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===r)for(i=t.length-1;i>=e;i-=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-e)%2==0?e+1:e;i<t.length;i+=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this.strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,h=Math.min(o,o-s)+r,u=0,f=r;f<h;f+=i)u=a(t,f,f+i,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=a(t,f,t.length,e),f=0;f<s;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this.strip()},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype.strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},n.prototype.inspect=function(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"};var f=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],l=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],d=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function c(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,h=67108863&s,u=s/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var f=u>>>26,l=67108863&u,d=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var p=a-c|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&s}r.words[a]=0|l,u=0|f}return 0!==u?r.words[a]=0|u:r.length--,r.strip()}n.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,s=0;s<this.length;s++){var h=this.words[s],u=(16777215&(h<<n|o)).toString(16);i=0!=(o=h>>>24-n&16777215)||s!==this.length-1?f[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var a=l[t],c=d[t];i="";var p=this.clone();for(p.negative=0;!p.isZero();){var m=p.modn(c).toString(t);i=(p=p.idivn(c)).isZero()?m+i:f[a-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16)},n.prototype.toBuffer=function(t,e){return r(void 0!==o),this.toArrayLike(o,t,e)},n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},n.prototype.toArrayLike=function(t,e,i){var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0"),this.strip();var s,h,u="le"===e,a=new t(o),f=this.clone();if(u){for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[h]=s;for(;h<o;h++)a[h]=0}else{for(h=0;h<o-n;h++)a[h]=0;for(h=0;!f.isZero();h++)s=f.andln(255),f.iushrn(8),a[o-h-1]=s}return a},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this.strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this.strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this.strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this.strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this.strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this.strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var p=function(t,e,r){var i,n,o,s=t.words,h=e.words,u=r.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],p=8191&c,m=c>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],S=8191&_,x=_>>>13,A=0|s[5],k=8191&A,E=A>>>13,R=0|s[6],B=8191&R,I=R>>>13,T=0|s[7],P=8191&T,N=T>>>13,O=0|s[8],L=8191&O,q=O>>>13,z=0|s[9],j=8191&z,C=z>>>13,H=0|h[0],Z=8191&H,D=H>>>13,K=0|h[1],U=8191&K,F=K>>>13,W=0|h[2],V=8191&W,J=W>>>13,X=0|h[3],$=8191&X,G=X>>>13,Y=0|h[4],Q=8191&Y,tt=Y>>>13,et=0|h[5],rt=8191&et,it=et>>>13,nt=0|h[6],ot=8191&nt,st=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ft=0|h[8],lt=8191&ft,dt=ft>>>13,ct=0|h[9],pt=8191&ct,mt=ct>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,D))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,D))+Math.imul(m,Z)|0,o=Math.imul(m,D);var gt=(a+(i=i+Math.imul(l,U)|0)|0)+((8191&(n=(n=n+Math.imul(l,F)|0)+Math.imul(d,U)|0))<<13)|0;a=((o=o+Math.imul(d,F)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,D))+Math.imul(y,Z)|0,o=Math.imul(y,D),i=i+Math.imul(p,U)|0,n=(n=n+Math.imul(p,F)|0)+Math.imul(m,U)|0,o=o+Math.imul(m,F)|0;var yt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,V)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,D))+Math.imul(b,Z)|0,o=Math.imul(b,D),i=i+Math.imul(g,U)|0,n=(n=n+Math.imul(g,F)|0)+Math.imul(y,U)|0,o=o+Math.imul(y,F)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,J)|0;var wt=(a+(i=i+Math.imul(l,$)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,$)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,D))+Math.imul(x,Z)|0,o=Math.imul(x,D),i=i+Math.imul(M,U)|0,n=(n=n+Math.imul(M,F)|0)+Math.imul(b,U)|0,o=o+Math.imul(b,F)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(p,$)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(k,Z),n=(n=Math.imul(k,D))+Math.imul(E,Z)|0,o=Math.imul(E,D),i=i+Math.imul(S,U)|0,n=(n=n+Math.imul(S,F)|0)+Math.imul(x,U)|0,o=o+Math.imul(x,F)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(g,$)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(a+(i=i+Math.imul(l,rt)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,rt)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,Z),n=(n=Math.imul(B,D))+Math.imul(I,Z)|0,o=Math.imul(I,D),i=i+Math.imul(k,U)|0,n=(n=n+Math.imul(k,F)|0)+Math.imul(E,U)|0,o=o+Math.imul(E,F)|0,i=i+Math.imul(S,V)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,J)|0,i=i+Math.imul(M,$)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(P,Z),n=(n=Math.imul(P,D))+Math.imul(N,Z)|0,o=Math.imul(N,D),i=i+Math.imul(B,U)|0,n=(n=n+Math.imul(B,F)|0)+Math.imul(I,U)|0,o=o+Math.imul(I,F)|0,i=i+Math.imul(k,V)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,J)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var St=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ut)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,D))+Math.imul(q,Z)|0,o=Math.imul(q,D),i=i+Math.imul(P,U)|0,n=(n=n+Math.imul(P,F)|0)+Math.imul(N,U)|0,o=o+Math.imul(N,F)|0,i=i+Math.imul(B,V)|0,n=(n=n+Math.imul(B,J)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,J)|0,i=i+Math.imul(k,$)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,D))+Math.imul(C,Z)|0,o=Math.imul(C,D),i=i+Math.imul(L,U)|0,n=(n=n+Math.imul(L,F)|0)+Math.imul(q,U)|0,o=o+Math.imul(q,F)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,J)|0,i=i+Math.imul(B,$)|0,n=(n=n+Math.imul(B,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,i=i+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(j,U),n=(n=Math.imul(j,F))+Math.imul(C,U)|0,o=Math.imul(C,F),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,J)|0,i=i+Math.imul(P,$)|0,n=(n=n+Math.imul(P,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(B,Q)|0,n=(n=n+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,it)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var kt=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,V),n=(n=Math.imul(j,J))+Math.imul(C,V)|0,o=Math.imul(C,J),i=i+Math.imul(L,$)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(q,$)|0,o=o+Math.imul(q,G)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,n=(n=n+Math.imul(B,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,i=i+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;a=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,$),n=(n=Math.imul(j,G))+Math.imul(C,$)|0,o=Math.imul(C,G),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,tt)|0,i=i+Math.imul(P,rt)|0,n=(n=n+Math.imul(P,it)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(B,ot)|0,n=(n=n+Math.imul(B,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(a+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(C,Q)|0,o=Math.imul(C,tt),i=i+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(q,rt)|0,o=o+Math.imul(q,it)|0,i=i+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(B,ut)|0,n=(n=n+Math.imul(B,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(k,lt)|0,n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,lt)|0,o=o+Math.imul(E,dt)|0;var Bt=(a+(i=i+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(x,pt)|0))<<13)|0;a=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,rt),n=(n=Math.imul(j,it))+Math.imul(C,rt)|0,o=Math.imul(C,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,i=i+Math.imul(P,ut)|0,n=(n=n+Math.imul(P,at)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(B,lt)|0,n=(n=n+Math.imul(B,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(a+(i=i+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(C,ot)|0,o=Math.imul(C,st),i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,at)|0,i=i+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Tt=(a+(i=i+Math.imul(B,pt)|0)|0)+((8191&(n=(n=n+Math.imul(B,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(C,ut)|0,o=Math.imul(C,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(q,lt)|0,o=o+Math.imul(q,dt)|0;var Pt=(a+(i=i+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(N,pt)|0))<<13)|0;a=((o=o+Math.imul(N,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(C,lt)|0,o=Math.imul(C,dt);var Nt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(q,pt)|0))<<13)|0;a=((o=o+Math.imul(q,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Ot=(a+(i=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,mt))+Math.imul(C,pt)|0))<<13)|0;return a=((o=Math.imul(C,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=St,u[8]=xt,u[9]=At,u[10]=kt,u[11]=Et,u[12]=Rt,u[13]=Bt,u[14]=It,u[15]=Tt,u[16]=Pt,u[17]=Nt,u[18]=Ot,0!==a&&(u[19]=a,r.length++),r};function m(t,e,r){return(new v).mulp(t,e,r)}function v(t,e){this.x=t,this.y=e}Math.imul||(p=c),n.prototype.mulTo=function(t,e){var r,i=this.length+t.length;return r=10===this.length&&10===t.length?p(this,t,e):i<63?c(this,t,e):i<1024?function(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var h=67108863&i,u=Math.min(o,e.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var f=o-a,l=(0|t.words[f])*(0|e.words[a]),d=67108863&l;h=67108863&(d=d+h|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=h,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r.strip()}(this,t,e):m(this,t,e),r},v.prototype.makeRBT=function(t){for(var e=new Array(t),r=n.prototype._countBits(t)-1,i=0;i<t;i++)e[i]=this.revBin(i,r,t);return e},v.prototype.revBin=function(t,e,r){if(0===t||t===r-1)return t;for(var i=0,n=0;n<e;n++)i|=(1&t)<<e-n-1,t>>=1;return i},v.prototype.permute=function(t,e,r,i,n,o){for(var s=0;s<o;s++)i[s]=e[t[s]],n[s]=r[t[s]]},v.prototype.transform=function(t,e,r,i,n,o){this.permute(o,t,e,r,i,n);for(var s=1;s<n;s<<=1)for(var h=s<<1,u=Math.cos(2*Math.PI/h),a=Math.sin(2*Math.PI/h),f=0;f<n;f+=h)for(var l=u,d=a,c=0;c<s;c++){var p=r[f+c],m=i[f+c],v=r[f+c+s],g=i[f+c+s],y=l*v-d*g;g=l*g+d*v,v=y,r[f+c]=p+v,i[f+c]=m+g,r[f+c+s]=p-v,i[f+c+s]=m-g,c!==h&&(y=u*l-a*d,d=u*d+a*l,l=y)}},v.prototype.guessLen13b=function(t,e){var r=1|Math.max(e,t),i=1&r,n=0;for(r=r/2|0;r;r>>>=1)n++;return 1<<n+1+i},v.prototype.conjugate=function(t,e,r){if(!(r<=1))for(var i=0;i<r/2;i++){var n=t[i];t[i]=t[r-i-1],t[r-i-1]=n,n=e[i],e[i]=-e[r-i-1],e[r-i-1]=-n}},v.prototype.normalize13b=function(t,e){for(var r=0,i=0;i<e/2;i++){var n=8192*Math.round(t[2*i+1]/e)+Math.round(t[2*i]/e)+r;t[i]=67108863&n,r=n<67108864?0:n/67108864|0}return t},v.prototype.convert13b=function(t,e,i,n){for(var o=0,s=0;s<e;s++)o+=0|t[s],i[2*s]=8191&o,o>>>=13,i[2*s+1]=8191&o,o>>>=13;for(s=2*e;s<n;++s)i[s]=0;r(0===o),r(0==(-8192&o))},v.prototype.stub=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=0;return e},v.prototype.mulp=function(t,e,r){var i=2*this.guessLen13b(t.length,e.length),n=this.makeRBT(i),o=this.stub(i),s=new Array(i),h=new Array(i),u=new Array(i),a=new Array(i),f=new Array(i),l=new Array(i),d=r.words;d.length=i,this.convert13b(t.words,t.length,s,i),this.convert13b(e.words,e.length,a,i),this.transform(s,o,h,u,i,n),this.transform(a,o,f,l,i,n);for(var c=0;c<i;c++){var p=h[c]*f[c]-u[c]*l[c];u[c]=h[c]*l[c]+u[c]*f[c],h[c]=p}return this.conjugate(h,u,i),this.transform(h,u,d,o,i,n),this.conjugate(d,o,i),this.normalize13b(d,i),r.negative=t.negative^e.negative,r.length=t.length+e.length,r.strip()},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),m(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){r("number"==typeof t),r(t<67108864);for(var e=0,i=0;i<this.length;i++){var n=(0|this.words[i])*t,o=(67108863&n)+(67108863&e);e>>=26,e+=n/67108864|0,e+=o>>>26,this.words[i]=67108863&o}return 0!==e&&(this.words[i]=e,this.length++),this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=(t.words[i]&1<<n)>>>n}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var o=r.sqr();i<e.length;i++,o=o.sqr())0!==e[i]&&(r=r.mul(o));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var s=0;for(e=0;e<this.length;e++){var h=this.words[e]&o,u=(0|this.words[e])-h<<i;this.words[e]=u|s,s=h>>>26-i}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this.strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),h=67108863^67108863>>>o<<o,u=i;if(n-=s,n=Math.max(0,n),u){for(var a=0;a<s;a++)u.words[a]=this.words[a];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&h}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this.strip()},n.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this.strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this.strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,i){var n,o,s=t.length+i;this._expand(s);var h=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)h=(o=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&o;if(0===h)return this.strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(o=-(0|this.words[n])+h)>>26,this.words[n]=67108863&o;return this.negative=1,this.strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),o=t,s=0|o.words[o.length-1];0!=(r=26-this._countBits(s))&&(o=o.ushln(r),i.iushln(r),s=0|o.words[o.length-1]);var h,u=i.length-o.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var f=i.clone()._ishlnsubmul(o,1,u);0===f.negative&&(i=f,h&&(h.words[u]=1));for(var l=u-1;l>=0;l--){var d=67108864*(0|i.words[o.length+l])+(0|i.words[o.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(o,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(o,1,l),i.isZero()||(i.negative^=1);h&&(h.words[l]=d)}return h&&h.strip(),i.strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(o=h.div.neg()),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(o=h.div.neg()),{div:o,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.isub(t)),{div:h.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modn(t.words[0]))}:this._wordDiv(t,e);var o,s,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modn=function(t){r(t<=67108863);for(var e=(1<<26)%t,i=0,n=this.length-1;n>=0;n--)i=(e*i+(0|this.words[n]))%t;return i},n.prototype.idivn=function(t){r(t<=67108863);for(var e=0,i=this.length-1;i>=0;i--){var n=(0|this.words[i])+67108864*e;this.words[i]=n/t|0,e=n%t}return this.strip()},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new n(1),s=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(f),s.isub(l)),o.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(f),u.isub(l)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h),s.isub(u)):(i.isub(e),h.isub(o),u.isub(s))}return{a:h,b:u,gcd:i.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new n(1),h=new n(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,f=1;0==(e.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(e.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),s.isub(h)):(i.isub(e),h.isub(s))}return(o=0===e.cmpn(1)?s:h).cmpn(0)<0&&o.iadd(t),o},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,s=i;0!==o&&s<this.length;s++){var h=0|this.words[s];o=(h+=o)>>>26,h&=67108863,this.words[s]=h}return 0!==o&&(this.words[s]=o,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this.strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new S(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var g={k256:null,p224:null,p192:null,p25519:null};function y(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function w(){y.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function M(){y.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function b(){y.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function _(){y.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function S(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function x(t){S.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}y.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},y.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},y.prototype.split=function(t,e){t.iushrn(this.n,0,e)},y.prototype.imulK=function(t){return t.imul(this.k)},i(w,y),w.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},w.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(M,y),i(b,y),i(_,y),_.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(g[t])return g[t];var e;if("k256"===t)e=new w;else if("p224"===t)e=new M;else if("p192"===t)e=new b;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new _}return g[t]=e,e},S.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},S.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},S.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):t.umod(this.m)._forceRed(this)},S.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},S.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},S.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},S.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},S.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},S.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},S.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},S.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},S.prototype.isqr=function(t){return this.imul(t,t.clone())},S.prototype.sqr=function(t){return this.mul(t,t)},S.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new n(1)).iushrn(2);return this.pow(t,i)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new n(2*f*f).toRed(this);0!==this.pow(f,a).cmp(u);)f.redIAdd(u);for(var l=this.pow(f,o),d=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),p=s;0!==c.cmp(h);){for(var m=c,v=0;0!==m.cmp(h);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new n(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},S.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},S.prototype.pow=function(t,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var o=r[0],s=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],f=u-1;f>=0;f--){var l=a>>f&1;o!==r[0]&&(o=this.sqr(o)),0!==l||0!==s?(s<<=1,s|=l,(4==++h||0===i&&0===f)&&(o=this.mul(o,r[s]),h=0,s=0)):h=0}u=26}return o},S.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},S.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new x(t)},i(x,S),x.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},x.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},x.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},x.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(i).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},x.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(N,g);var O={};
/*! https://mths.be/utf8js v3.0.0 by @mathias */!function(t){var e,r,i,n=String.fromCharCode;function o(t){for(var e,r,i=[],n=0,o=t.length;n<o;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<o?56320==(64512&(r=t.charCodeAt(n++)))?i.push(((1023&e)<<10)+(1023&r)+65536):(i.push(e),n--):i.push(e);return i}function s(t){if(t>=55296&&t<=57343)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value")}function h(t,e){return n(t>>e&63|128)}function u(t){if(0==(4294967168&t))return n(t);var e="";return 0==(4294965248&t)?e=n(t>>6&31|192):0==(4294901760&t)?(s(t),e=n(t>>12&15|224),e+=h(t,6)):0==(4292870144&t)&&(e=n(t>>18&7|240),e+=h(t,12),e+=h(t,6)),e+=n(63&t|128)}function a(){if(i>=r)throw Error("Invalid byte index");var t=255&e[i];if(i++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function f(){var t,n;if(i>r)throw Error("Invalid byte index");if(i==r)return!1;if(t=255&e[i],i++,0==(128&t))return t;if(192==(224&t)){if((n=(31&t)<<6|a())>=128)return n;throw Error("Invalid continuation byte")}if(224==(240&t)){if((n=(15&t)<<12|a()<<6|a())>=2048)return s(n),n;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=(7&t)<<18|a()<<12|a()<<6|a())>=65536&&n<=1114111)return n;throw Error("Invalid UTF-8 detected")}t.version="3.0.0",t.encode=function(t){for(var e=o(t),r=e.length,i=-1,n="";++i<r;)n+=u(e[i]);return n},t.decode=function(t){e=o(t),r=e.length,i=0;for(var s,h=[];!1!==(s=f());)h.push(s);return function(t){for(var e,r=t.length,i=-1,o="";++i<r;)(e=t[i])>65535&&(o+=n((e-=65536)>>>10&1023|55296),e=56320|1023&e),o+=n(e);return o}(h)}}(O);var L={},q={},z={exports:{}};!function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"===s(t)?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:require("buffer").Buffer}catch(t){}function h(t,e){var i=t.charCodeAt(e);return i>=48&&i<=57?i-48:i>=65&&i<=70?i-55:i>=97&&i<=102?i-87:void r(!1,"Invalid character in "+t)}function u(t,e,r){var i=h(t,r);return r-1>=e&&(i|=h(t,r-1)<<4),i}function a(t,e,i,n){for(var o=0,s=0,h=Math.min(t.length,i),u=e;u<h;u++){var a=t.charCodeAt(u)-48;o*=n,s=a>=49?a-49+10:a>=17?a-17+10:a,r(a>=0&&s<n,"Invalid character"),o+=s}return o}function f(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(n.isBN=function(t){return t instanceof n||null!==t&&"object"===s(t)&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"===s(t))return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===e?this._parseHex(t,n,i):(this._parseBase(t,e,n),"le"===i&&this._initArray(this.toArray(),e,i)))},n.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,h=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);return this._strip()},n.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===r)for(i=t.length-1;i>=e;i-=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-e)%2==0?e+1:e;i<t.length;i+=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this._strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,h=Math.min(o,o-s)+r,u=0,f=r;f<h;f+=i)u=a(t,f,f+i,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=a(t,f,t.length,e),f=0;f<s;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype._move=function(t){f(t,this)},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{n.prototype[Symbol.for("nodejs.util.inspect.custom")]=l}catch(t){n.prototype.inspect=l}else n.prototype.inspect=l;function l(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function m(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,h=67108863&s,u=s/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var f=u>>>26,l=67108863&u,d=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var p=a-c|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&s}r.words[a]=0|l,u=0|f}return 0!==u?r.words[a]=0|u:r.length--,r._strip()}n.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,s=0;s<this.length;s++){var h=this.words[s],u=(16777215&(h<<n|o)).toString(16);i=0!=(o=h>>>24-n&16777215)||s!==this.length-1?d[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var a=c[t],f=p[t];i="";var l=this.clone();for(l.negative=0;!l.isZero();){var m=l.modrn(f).toString(t);i=(l=l.idivn(f)).isZero()?m+i:d[a-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16,2)},o&&(n.prototype.toBuffer=function(t,e){return this.toArrayLike(o,t,e)}),n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},n.prototype.toArrayLike=function(t,e,i){this._strip();var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,n),s},n.prototype._toArrayLikeLE=function(t,e){for(var r=0,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r<t.length)for(t[r++]=i;r<t.length;)t[r++]=0},n.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r>=0)for(t[r--]=i;r>=0;)t[r--]=0},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this._strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this._strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this._strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var v=function(t,e,r){var i,n,o,s=t.words,h=e.words,u=r.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],p=8191&c,m=c>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],S=8191&_,x=_>>>13,A=0|s[5],k=8191&A,E=A>>>13,R=0|s[6],B=8191&R,I=R>>>13,T=0|s[7],P=8191&T,N=T>>>13,O=0|s[8],L=8191&O,q=O>>>13,z=0|s[9],j=8191&z,C=z>>>13,H=0|h[0],Z=8191&H,D=H>>>13,K=0|h[1],U=8191&K,F=K>>>13,W=0|h[2],V=8191&W,J=W>>>13,X=0|h[3],$=8191&X,G=X>>>13,Y=0|h[4],Q=8191&Y,tt=Y>>>13,et=0|h[5],rt=8191&et,it=et>>>13,nt=0|h[6],ot=8191&nt,st=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ft=0|h[8],lt=8191&ft,dt=ft>>>13,ct=0|h[9],pt=8191&ct,mt=ct>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,D))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,D))+Math.imul(m,Z)|0,o=Math.imul(m,D);var gt=(a+(i=i+Math.imul(l,U)|0)|0)+((8191&(n=(n=n+Math.imul(l,F)|0)+Math.imul(d,U)|0))<<13)|0;a=((o=o+Math.imul(d,F)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,D))+Math.imul(y,Z)|0,o=Math.imul(y,D),i=i+Math.imul(p,U)|0,n=(n=n+Math.imul(p,F)|0)+Math.imul(m,U)|0,o=o+Math.imul(m,F)|0;var yt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,V)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,D))+Math.imul(b,Z)|0,o=Math.imul(b,D),i=i+Math.imul(g,U)|0,n=(n=n+Math.imul(g,F)|0)+Math.imul(y,U)|0,o=o+Math.imul(y,F)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,J)|0;var wt=(a+(i=i+Math.imul(l,$)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,$)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,D))+Math.imul(x,Z)|0,o=Math.imul(x,D),i=i+Math.imul(M,U)|0,n=(n=n+Math.imul(M,F)|0)+Math.imul(b,U)|0,o=o+Math.imul(b,F)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(p,$)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(k,Z),n=(n=Math.imul(k,D))+Math.imul(E,Z)|0,o=Math.imul(E,D),i=i+Math.imul(S,U)|0,n=(n=n+Math.imul(S,F)|0)+Math.imul(x,U)|0,o=o+Math.imul(x,F)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(g,$)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(a+(i=i+Math.imul(l,rt)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,rt)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,Z),n=(n=Math.imul(B,D))+Math.imul(I,Z)|0,o=Math.imul(I,D),i=i+Math.imul(k,U)|0,n=(n=n+Math.imul(k,F)|0)+Math.imul(E,U)|0,o=o+Math.imul(E,F)|0,i=i+Math.imul(S,V)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,J)|0,i=i+Math.imul(M,$)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(P,Z),n=(n=Math.imul(P,D))+Math.imul(N,Z)|0,o=Math.imul(N,D),i=i+Math.imul(B,U)|0,n=(n=n+Math.imul(B,F)|0)+Math.imul(I,U)|0,o=o+Math.imul(I,F)|0,i=i+Math.imul(k,V)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,J)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var St=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ut)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,D))+Math.imul(q,Z)|0,o=Math.imul(q,D),i=i+Math.imul(P,U)|0,n=(n=n+Math.imul(P,F)|0)+Math.imul(N,U)|0,o=o+Math.imul(N,F)|0,i=i+Math.imul(B,V)|0,n=(n=n+Math.imul(B,J)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,J)|0,i=i+Math.imul(k,$)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,D))+Math.imul(C,Z)|0,o=Math.imul(C,D),i=i+Math.imul(L,U)|0,n=(n=n+Math.imul(L,F)|0)+Math.imul(q,U)|0,o=o+Math.imul(q,F)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,J)|0,i=i+Math.imul(B,$)|0,n=(n=n+Math.imul(B,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,i=i+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(j,U),n=(n=Math.imul(j,F))+Math.imul(C,U)|0,o=Math.imul(C,F),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,J)|0,i=i+Math.imul(P,$)|0,n=(n=n+Math.imul(P,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(B,Q)|0,n=(n=n+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,it)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var kt=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,V),n=(n=Math.imul(j,J))+Math.imul(C,V)|0,o=Math.imul(C,J),i=i+Math.imul(L,$)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(q,$)|0,o=o+Math.imul(q,G)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,n=(n=n+Math.imul(B,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,i=i+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;a=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,$),n=(n=Math.imul(j,G))+Math.imul(C,$)|0,o=Math.imul(C,G),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,tt)|0,i=i+Math.imul(P,rt)|0,n=(n=n+Math.imul(P,it)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(B,ot)|0,n=(n=n+Math.imul(B,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(a+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(C,Q)|0,o=Math.imul(C,tt),i=i+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(q,rt)|0,o=o+Math.imul(q,it)|0,i=i+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(B,ut)|0,n=(n=n+Math.imul(B,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(k,lt)|0,n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,lt)|0,o=o+Math.imul(E,dt)|0;var Bt=(a+(i=i+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(x,pt)|0))<<13)|0;a=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,rt),n=(n=Math.imul(j,it))+Math.imul(C,rt)|0,o=Math.imul(C,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,i=i+Math.imul(P,ut)|0,n=(n=n+Math.imul(P,at)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(B,lt)|0,n=(n=n+Math.imul(B,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(a+(i=i+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(C,ot)|0,o=Math.imul(C,st),i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,at)|0,i=i+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Tt=(a+(i=i+Math.imul(B,pt)|0)|0)+((8191&(n=(n=n+Math.imul(B,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(C,ut)|0,o=Math.imul(C,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(q,lt)|0,o=o+Math.imul(q,dt)|0;var Pt=(a+(i=i+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(N,pt)|0))<<13)|0;a=((o=o+Math.imul(N,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(C,lt)|0,o=Math.imul(C,dt);var Nt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(q,pt)|0))<<13)|0;a=((o=o+Math.imul(q,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Ot=(a+(i=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,mt))+Math.imul(C,pt)|0))<<13)|0;return a=((o=Math.imul(C,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=St,u[8]=xt,u[9]=At,u[10]=kt,u[11]=Et,u[12]=Rt,u[13]=Bt,u[14]=It,u[15]=Tt,u[16]=Pt,u[17]=Nt,u[18]=Ot,0!==a&&(u[19]=a,r.length++),r};function g(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var h=67108863&i,u=Math.min(o,e.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var f=o-a,l=(0|t.words[f])*(0|e.words[a]),d=67108863&l;h=67108863&(d=d+h|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=h,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r._strip()}function y(t,e,r){return g(t,e,r)}Math.imul||(v=m),n.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?v(this,t,e):r<63?m(this,t,e):r<1024?g(this,t,e):y(this,t,e)},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),y(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){var e=t<0;e&&(t=-t),r("number"==typeof t),r(t<67108864);for(var i=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,s=(67108863&o)+(67108863&i);i>>=26,i+=o/67108864|0,i+=s>>>26,this.words[n]=67108863&s}return 0!==i&&(this.words[n]=i,this.length++),e?this.ineg():this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=t.words[i]>>>n&1}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var o=r.sqr();i<e.length;i++,o=o.sqr())0!==e[i]&&(r=r.mul(o));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var s=0;for(e=0;e<this.length;e++){var h=this.words[e]&o,u=(0|this.words[e])-h<<i;this.words[e]=u|s,s=h>>>26-i}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this._strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),h=67108863^67108863>>>o<<o,u=i;if(n-=s,n=Math.max(0,n),u){for(var a=0;a<s;a++)u.words[a]=this.words[a];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&h}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},n.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this._strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,i){var n,o,s=t.length+i;this._expand(s);var h=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)h=(o=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&o;if(0===h)return this._strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(o=-(0|this.words[n])+h)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),o=t,s=0|o.words[o.length-1];0!=(r=26-this._countBits(s))&&(o=o.ushln(r),i.iushln(r),s=0|o.words[o.length-1]);var h,u=i.length-o.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var f=i.clone()._ishlnsubmul(o,1,u);0===f.negative&&(i=f,h&&(h.words[u]=1));for(var l=u-1;l>=0;l--){var d=67108864*(0|i.words[o.length+l])+(0|i.words[o.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(o,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(o,1,l),i.isZero()||(i.negative^=1);h&&(h.words[l]=d)}return h&&h._strip(),i._strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(o=h.div.neg()),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(o=h.div.neg()),{div:o,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.isub(t)),{div:h.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modrn(t.words[0]))}:this._wordDiv(t,e);var o,s,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modrn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(i*n+(0|this.words[o]))%t;return e?-n:n},n.prototype.modn=function(t){return this.modrn(t)},n.prototype.idivn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*i;this.words[n]=o/t|0,i=o%t}return this._strip(),e?this.ineg():this},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new n(1),s=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(f),s.isub(l)),o.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(f),u.isub(l)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h),s.isub(u)):(i.isub(e),h.isub(o),u.isub(s))}return{a:h,b:u,gcd:i.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new n(1),h=new n(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,f=1;0==(e.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(e.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),s.isub(h)):(i.isub(e),h.isub(s))}return(o=0===e.cmpn(1)?s:h).cmpn(0)<0&&o.iadd(t),o},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,s=i;0!==o&&s<this.length;s++){var h=0|this.words[s];o=(h+=o)>>>26,h&=67108863,this.words[s]=h}return 0!==o&&(this.words[s]=o,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this._strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new A(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var w={k256:null,p224:null,p192:null,p25519:null};function M(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){M.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){M.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){M.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function x(){M.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function A(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){A.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}M.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},M.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},M.prototype.split=function(t,e){t.iushrn(this.n,0,e)},M.prototype.imulK=function(t){return t.imul(this.k)},i(b,M),b.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(_,M),i(S,M),i(x,M),x.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(w[t])return w[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new _;else if("p192"===t)e=new S;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new x}return w[t]=e,e},A.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},A.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},A.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},A.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},A.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},A.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},A.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},A.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},A.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},A.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},A.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},A.prototype.isqr=function(t){return this.imul(t,t.clone())},A.prototype.sqr=function(t){return this.mul(t,t)},A.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new n(1)).iushrn(2);return this.pow(t,i)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new n(2*f*f).toRed(this);0!==this.pow(f,a).cmp(u);)f.redIAdd(u);for(var l=this.pow(f,o),d=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),p=s;0!==c.cmp(h);){for(var m=c,v=0;0!==m.cmp(h);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new n(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},A.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},A.prototype.pow=function(t,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var o=r[0],s=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],f=u-1;f>=0;f--){var l=a>>f&1;o!==r[0]&&(o=this.sqr(o)),0!==l||0!==s?(s<<=1,s|=l,(4==++h||0===i&&0===f)&&(o=this.mul(o,r[s]),h=0,s=0)):h=0}u=26}return o},A.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},A.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new k(t)},i(k,A),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(i).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(z,g),function(e){var r=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.KECCAK256_RLP=e.KECCAK256_RLP_S=e.KECCAK256_RLP_ARRAY=e.KECCAK256_RLP_ARRAY_S=e.KECCAK256_NULL=e.KECCAK256_NULL_S=e.TWO_POW256=e.MAX_INTEGER=void 0;var i=t.Buffer,n=r(z.exports);e.MAX_INTEGER=new n.default("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",16),e.TWO_POW256=new n.default("10000000000000000000000000000000000000000000000000000000000000000",16),e.KECCAK256_NULL_S="c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",e.KECCAK256_NULL=i.from(e.KECCAK256_NULL_S,"hex"),e.KECCAK256_RLP_ARRAY_S="1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347",e.KECCAK256_RLP_ARRAY=i.from(e.KECCAK256_RLP_ARRAY_S,"hex"),e.KECCAK256_RLP_S="56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421",e.KECCAK256_RLP=i.from(e.KECCAK256_RLP_S,"hex")}(q);var j={},C={},H={exports:{}};!function(t,e){function r(t,e){if(!t)throw new Error(e||"Assertion failed")}function i(t,e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}function n(t,e,r){if(n.isBN(t))return t;this.negative=0,this.words=null,this.length=0,this.red=null,null!==t&&("le"!==e&&"be"!==e||(r=e,e=10),this._init(t||0,e||10,r||"be"))}var o;"object"===s(t)?t.exports=n:e.BN=n,n.BN=n,n.wordSize=26;try{o="undefined"!=typeof window&&void 0!==window.Buffer?window.Buffer:require("buffer").Buffer}catch(t){}function h(t,e){var i=t.charCodeAt(e);return i>=48&&i<=57?i-48:i>=65&&i<=70?i-55:i>=97&&i<=102?i-87:void r(!1,"Invalid character in "+t)}function u(t,e,r){var i=h(t,r);return r-1>=e&&(i|=h(t,r-1)<<4),i}function a(t,e,i,n){for(var o=0,s=0,h=Math.min(t.length,i),u=e;u<h;u++){var a=t.charCodeAt(u)-48;o*=n,s=a>=49?a-49+10:a>=17?a-17+10:a,r(a>=0&&s<n,"Invalid character"),o+=s}return o}function f(t,e){t.words=e.words,t.length=e.length,t.negative=e.negative,t.red=e.red}if(n.isBN=function(t){return t instanceof n||null!==t&&"object"===s(t)&&t.constructor.wordSize===n.wordSize&&Array.isArray(t.words)},n.max=function(t,e){return t.cmp(e)>0?t:e},n.min=function(t,e){return t.cmp(e)<0?t:e},n.prototype._init=function(t,e,i){if("number"==typeof t)return this._initNumber(t,e,i);if("object"===s(t))return this._initArray(t,e,i);"hex"===e&&(e=16),r(e===(0|e)&&e>=2&&e<=36);var n=0;"-"===(t=t.toString().replace(/\s+/g,""))[0]&&(n++,this.negative=1),n<t.length&&(16===e?this._parseHex(t,n,i):(this._parseBase(t,e,n),"le"===i&&this._initArray(this.toArray(),e,i)))},n.prototype._initNumber=function(t,e,i){t<0&&(this.negative=1,t=-t),t<67108864?(this.words=[67108863&t],this.length=1):t<4503599627370496?(this.words=[67108863&t,t/67108864&67108863],this.length=2):(r(t<9007199254740992),this.words=[67108863&t,t/67108864&67108863,1],this.length=3),"le"===i&&this._initArray(this.toArray(),e,i)},n.prototype._initArray=function(t,e,i){if(r("number"==typeof t.length),t.length<=0)return this.words=[0],this.length=1,this;this.length=Math.ceil(t.length/3),this.words=new Array(this.length);for(var n=0;n<this.length;n++)this.words[n]=0;var o,s,h=0;if("be"===i)for(n=t.length-1,o=0;n>=0;n-=3)s=t[n]|t[n-1]<<8|t[n-2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);else if("le"===i)for(n=0,o=0;n<t.length;n+=3)s=t[n]|t[n+1]<<8|t[n+2]<<16,this.words[o]|=s<<h&67108863,this.words[o+1]=s>>>26-h&67108863,(h+=24)>=26&&(h-=26,o++);return this._strip()},n.prototype._parseHex=function(t,e,r){this.length=Math.ceil((t.length-e)/6),this.words=new Array(this.length);for(var i=0;i<this.length;i++)this.words[i]=0;var n,o=0,s=0;if("be"===r)for(i=t.length-1;i>=e;i-=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;else for(i=(t.length-e)%2==0?e+1:e;i<t.length;i+=2)n=u(t,e,i)<<o,this.words[s]|=67108863&n,o>=18?(o-=18,s+=1,this.words[s]|=n>>>26):o+=8;this._strip()},n.prototype._parseBase=function(t,e,r){this.words=[0],this.length=1;for(var i=0,n=1;n<=67108863;n*=e)i++;i--,n=n/e|0;for(var o=t.length-r,s=o%i,h=Math.min(o,o-s)+r,u=0,f=r;f<h;f+=i)u=a(t,f,f+i,e),this.imuln(n),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u);if(0!==s){var l=1;for(u=a(t,f,t.length,e),f=0;f<s;f++)l*=e;this.imuln(l),this.words[0]+u<67108864?this.words[0]+=u:this._iaddn(u)}this._strip()},n.prototype.copy=function(t){t.words=new Array(this.length);for(var e=0;e<this.length;e++)t.words[e]=this.words[e];t.length=this.length,t.negative=this.negative,t.red=this.red},n.prototype._move=function(t){f(t,this)},n.prototype.clone=function(){var t=new n(null);return this.copy(t),t},n.prototype._expand=function(t){for(;this.length<t;)this.words[this.length++]=0;return this},n.prototype._strip=function(){for(;this.length>1&&0===this.words[this.length-1];)this.length--;return this._normSign()},n.prototype._normSign=function(){return 1===this.length&&0===this.words[0]&&(this.negative=0),this},"undefined"!=typeof Symbol&&"function"==typeof Symbol.for)try{n.prototype[Symbol.for("nodejs.util.inspect.custom")]=l}catch(t){n.prototype.inspect=l}else n.prototype.inspect=l;function l(){return(this.red?"<BN-R: ":"<BN: ")+this.toString(16)+">"}var d=["","0","00","000","0000","00000","000000","0000000","00000000","000000000","0000000000","00000000000","000000000000","0000000000000","00000000000000","000000000000000","0000000000000000","00000000000000000","000000000000000000","0000000000000000000","00000000000000000000","000000000000000000000","0000000000000000000000","00000000000000000000000","000000000000000000000000","0000000000000000000000000"],c=[0,0,25,16,12,11,10,9,8,8,7,7,7,7,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5],p=[0,0,33554432,43046721,16777216,48828125,60466176,40353607,16777216,43046721,1e7,19487171,35831808,62748517,7529536,11390625,16777216,24137569,34012224,47045881,64e6,4084101,5153632,6436343,7962624,9765625,11881376,14348907,17210368,20511149,243e5,28629151,33554432,39135393,45435424,52521875,60466176];function m(t,e,r){r.negative=e.negative^t.negative;var i=t.length+e.length|0;r.length=i,i=i-1|0;var n=0|t.words[0],o=0|e.words[0],s=n*o,h=67108863&s,u=s/67108864|0;r.words[0]=h;for(var a=1;a<i;a++){for(var f=u>>>26,l=67108863&u,d=Math.min(a,e.length-1),c=Math.max(0,a-t.length+1);c<=d;c++){var p=a-c|0;f+=(s=(n=0|t.words[p])*(o=0|e.words[c])+l)/67108864|0,l=67108863&s}r.words[a]=0|l,u=0|f}return 0!==u?r.words[a]=0|u:r.length--,r._strip()}n.prototype.toString=function(t,e){var i;if(e=0|e||1,16===(t=t||10)||"hex"===t){i="";for(var n=0,o=0,s=0;s<this.length;s++){var h=this.words[s],u=(16777215&(h<<n|o)).toString(16);i=0!=(o=h>>>24-n&16777215)||s!==this.length-1?d[6-u.length]+u+i:u+i,(n+=2)>=26&&(n-=26,s--)}for(0!==o&&(i=o.toString(16)+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}if(t===(0|t)&&t>=2&&t<=36){var a=c[t],f=p[t];i="";var l=this.clone();for(l.negative=0;!l.isZero();){var m=l.modrn(f).toString(t);i=(l=l.idivn(f)).isZero()?m+i:d[a-m.length]+m+i}for(this.isZero()&&(i="0"+i);i.length%e!=0;)i="0"+i;return 0!==this.negative&&(i="-"+i),i}r(!1,"Base should be between 2 and 36")},n.prototype.toNumber=function(){var t=this.words[0];return 2===this.length?t+=67108864*this.words[1]:3===this.length&&1===this.words[2]?t+=4503599627370496+67108864*this.words[1]:this.length>2&&r(!1,"Number can only safely store up to 53 bits"),0!==this.negative?-t:t},n.prototype.toJSON=function(){return this.toString(16,2)},o&&(n.prototype.toBuffer=function(t,e){return this.toArrayLike(o,t,e)}),n.prototype.toArray=function(t,e){return this.toArrayLike(Array,t,e)},n.prototype.toArrayLike=function(t,e,i){this._strip();var n=this.byteLength(),o=i||Math.max(1,n);r(n<=o,"byte array longer than desired length"),r(o>0,"Requested array length <= 0");var s=function(t,e){return t.allocUnsafe?t.allocUnsafe(e):new t(e)}(t,o);return this["_toArrayLike"+("le"===e?"LE":"BE")](s,n),s},n.prototype._toArrayLikeLE=function(t,e){for(var r=0,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r++]=255&s,r<t.length&&(t[r++]=s>>8&255),r<t.length&&(t[r++]=s>>16&255),6===o?(r<t.length&&(t[r++]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r<t.length)for(t[r++]=i;r<t.length;)t[r++]=0},n.prototype._toArrayLikeBE=function(t,e){for(var r=t.length-1,i=0,n=0,o=0;n<this.length;n++){var s=this.words[n]<<o|i;t[r--]=255&s,r>=0&&(t[r--]=s>>8&255),r>=0&&(t[r--]=s>>16&255),6===o?(r>=0&&(t[r--]=s>>24&255),i=0,o=0):(i=s>>>24,o+=2)}if(r>=0)for(t[r--]=i;r>=0;)t[r--]=0},Math.clz32?n.prototype._countBits=function(t){return 32-Math.clz32(t)}:n.prototype._countBits=function(t){var e=t,r=0;return e>=4096&&(r+=13,e>>>=13),e>=64&&(r+=7,e>>>=7),e>=8&&(r+=4,e>>>=4),e>=2&&(r+=2,e>>>=2),r+e},n.prototype._zeroBits=function(t){if(0===t)return 26;var e=t,r=0;return 0==(8191&e)&&(r+=13,e>>>=13),0==(127&e)&&(r+=7,e>>>=7),0==(15&e)&&(r+=4,e>>>=4),0==(3&e)&&(r+=2,e>>>=2),0==(1&e)&&r++,r},n.prototype.bitLength=function(){var t=this.words[this.length-1],e=this._countBits(t);return 26*(this.length-1)+e},n.prototype.zeroBits=function(){if(this.isZero())return 0;for(var t=0,e=0;e<this.length;e++){var r=this._zeroBits(this.words[e]);if(t+=r,26!==r)break}return t},n.prototype.byteLength=function(){return Math.ceil(this.bitLength()/8)},n.prototype.toTwos=function(t){return 0!==this.negative?this.abs().inotn(t).iaddn(1):this.clone()},n.prototype.fromTwos=function(t){return this.testn(t-1)?this.notn(t).iaddn(1).ineg():this.clone()},n.prototype.isNeg=function(){return 0!==this.negative},n.prototype.neg=function(){return this.clone().ineg()},n.prototype.ineg=function(){return this.isZero()||(this.negative^=1),this},n.prototype.iuor=function(t){for(;this.length<t.length;)this.words[this.length++]=0;for(var e=0;e<t.length;e++)this.words[e]=this.words[e]|t.words[e];return this._strip()},n.prototype.ior=function(t){return r(0==(this.negative|t.negative)),this.iuor(t)},n.prototype.or=function(t){return this.length>t.length?this.clone().ior(t):t.clone().ior(this)},n.prototype.uor=function(t){return this.length>t.length?this.clone().iuor(t):t.clone().iuor(this)},n.prototype.iuand=function(t){var e;e=this.length>t.length?t:this;for(var r=0;r<e.length;r++)this.words[r]=this.words[r]&t.words[r];return this.length=e.length,this._strip()},n.prototype.iand=function(t){return r(0==(this.negative|t.negative)),this.iuand(t)},n.prototype.and=function(t){return this.length>t.length?this.clone().iand(t):t.clone().iand(this)},n.prototype.uand=function(t){return this.length>t.length?this.clone().iuand(t):t.clone().iuand(this)},n.prototype.iuxor=function(t){var e,r;this.length>t.length?(e=this,r=t):(e=t,r=this);for(var i=0;i<r.length;i++)this.words[i]=e.words[i]^r.words[i];if(this!==e)for(;i<e.length;i++)this.words[i]=e.words[i];return this.length=e.length,this._strip()},n.prototype.ixor=function(t){return r(0==(this.negative|t.negative)),this.iuxor(t)},n.prototype.xor=function(t){return this.length>t.length?this.clone().ixor(t):t.clone().ixor(this)},n.prototype.uxor=function(t){return this.length>t.length?this.clone().iuxor(t):t.clone().iuxor(this)},n.prototype.inotn=function(t){r("number"==typeof t&&t>=0);var e=0|Math.ceil(t/26),i=t%26;this._expand(e),i>0&&e--;for(var n=0;n<e;n++)this.words[n]=67108863&~this.words[n];return i>0&&(this.words[n]=~this.words[n]&67108863>>26-i),this._strip()},n.prototype.notn=function(t){return this.clone().inotn(t)},n.prototype.setn=function(t,e){r("number"==typeof t&&t>=0);var i=t/26|0,n=t%26;return this._expand(i+1),this.words[i]=e?this.words[i]|1<<n:this.words[i]&~(1<<n),this._strip()},n.prototype.iadd=function(t){var e,r,i;if(0!==this.negative&&0===t.negative)return this.negative=0,e=this.isub(t),this.negative^=1,this._normSign();if(0===this.negative&&0!==t.negative)return t.negative=0,e=this.isub(t),t.negative=1,e._normSign();this.length>t.length?(r=this,i=t):(r=t,i=this);for(var n=0,o=0;o<i.length;o++)e=(0|r.words[o])+(0|i.words[o])+n,this.words[o]=67108863&e,n=e>>>26;for(;0!==n&&o<r.length;o++)e=(0|r.words[o])+n,this.words[o]=67108863&e,n=e>>>26;if(this.length=r.length,0!==n)this.words[this.length]=n,this.length++;else if(r!==this)for(;o<r.length;o++)this.words[o]=r.words[o];return this},n.prototype.add=function(t){var e;return 0!==t.negative&&0===this.negative?(t.negative=0,e=this.sub(t),t.negative^=1,e):0===t.negative&&0!==this.negative?(this.negative=0,e=t.sub(this),this.negative=1,e):this.length>t.length?this.clone().iadd(t):t.clone().iadd(this)},n.prototype.isub=function(t){if(0!==t.negative){t.negative=0;var e=this.iadd(t);return t.negative=1,e._normSign()}if(0!==this.negative)return this.negative=0,this.iadd(t),this.negative=1,this._normSign();var r,i,n=this.cmp(t);if(0===n)return this.negative=0,this.length=1,this.words[0]=0,this;n>0?(r=this,i=t):(r=t,i=this);for(var o=0,s=0;s<i.length;s++)o=(e=(0|r.words[s])-(0|i.words[s])+o)>>26,this.words[s]=67108863&e;for(;0!==o&&s<r.length;s++)o=(e=(0|r.words[s])+o)>>26,this.words[s]=67108863&e;if(0===o&&s<r.length&&r!==this)for(;s<r.length;s++)this.words[s]=r.words[s];return this.length=Math.max(this.length,s),r!==this&&(this.negative=1),this._strip()},n.prototype.sub=function(t){return this.clone().isub(t)};var v=function(t,e,r){var i,n,o,s=t.words,h=e.words,u=r.words,a=0,f=0|s[0],l=8191&f,d=f>>>13,c=0|s[1],p=8191&c,m=c>>>13,v=0|s[2],g=8191&v,y=v>>>13,w=0|s[3],M=8191&w,b=w>>>13,_=0|s[4],S=8191&_,x=_>>>13,A=0|s[5],k=8191&A,E=A>>>13,R=0|s[6],B=8191&R,I=R>>>13,T=0|s[7],P=8191&T,N=T>>>13,O=0|s[8],L=8191&O,q=O>>>13,z=0|s[9],j=8191&z,C=z>>>13,H=0|h[0],Z=8191&H,D=H>>>13,K=0|h[1],U=8191&K,F=K>>>13,W=0|h[2],V=8191&W,J=W>>>13,X=0|h[3],$=8191&X,G=X>>>13,Y=0|h[4],Q=8191&Y,tt=Y>>>13,et=0|h[5],rt=8191&et,it=et>>>13,nt=0|h[6],ot=8191&nt,st=nt>>>13,ht=0|h[7],ut=8191&ht,at=ht>>>13,ft=0|h[8],lt=8191&ft,dt=ft>>>13,ct=0|h[9],pt=8191&ct,mt=ct>>>13;r.negative=t.negative^e.negative,r.length=19;var vt=(a+(i=Math.imul(l,Z))|0)+((8191&(n=(n=Math.imul(l,D))+Math.imul(d,Z)|0))<<13)|0;a=((o=Math.imul(d,D))+(n>>>13)|0)+(vt>>>26)|0,vt&=67108863,i=Math.imul(p,Z),n=(n=Math.imul(p,D))+Math.imul(m,Z)|0,o=Math.imul(m,D);var gt=(a+(i=i+Math.imul(l,U)|0)|0)+((8191&(n=(n=n+Math.imul(l,F)|0)+Math.imul(d,U)|0))<<13)|0;a=((o=o+Math.imul(d,F)|0)+(n>>>13)|0)+(gt>>>26)|0,gt&=67108863,i=Math.imul(g,Z),n=(n=Math.imul(g,D))+Math.imul(y,Z)|0,o=Math.imul(y,D),i=i+Math.imul(p,U)|0,n=(n=n+Math.imul(p,F)|0)+Math.imul(m,U)|0,o=o+Math.imul(m,F)|0;var yt=(a+(i=i+Math.imul(l,V)|0)|0)+((8191&(n=(n=n+Math.imul(l,J)|0)+Math.imul(d,V)|0))<<13)|0;a=((o=o+Math.imul(d,J)|0)+(n>>>13)|0)+(yt>>>26)|0,yt&=67108863,i=Math.imul(M,Z),n=(n=Math.imul(M,D))+Math.imul(b,Z)|0,o=Math.imul(b,D),i=i+Math.imul(g,U)|0,n=(n=n+Math.imul(g,F)|0)+Math.imul(y,U)|0,o=o+Math.imul(y,F)|0,i=i+Math.imul(p,V)|0,n=(n=n+Math.imul(p,J)|0)+Math.imul(m,V)|0,o=o+Math.imul(m,J)|0;var wt=(a+(i=i+Math.imul(l,$)|0)|0)+((8191&(n=(n=n+Math.imul(l,G)|0)+Math.imul(d,$)|0))<<13)|0;a=((o=o+Math.imul(d,G)|0)+(n>>>13)|0)+(wt>>>26)|0,wt&=67108863,i=Math.imul(S,Z),n=(n=Math.imul(S,D))+Math.imul(x,Z)|0,o=Math.imul(x,D),i=i+Math.imul(M,U)|0,n=(n=n+Math.imul(M,F)|0)+Math.imul(b,U)|0,o=o+Math.imul(b,F)|0,i=i+Math.imul(g,V)|0,n=(n=n+Math.imul(g,J)|0)+Math.imul(y,V)|0,o=o+Math.imul(y,J)|0,i=i+Math.imul(p,$)|0,n=(n=n+Math.imul(p,G)|0)+Math.imul(m,$)|0,o=o+Math.imul(m,G)|0;var Mt=(a+(i=i+Math.imul(l,Q)|0)|0)+((8191&(n=(n=n+Math.imul(l,tt)|0)+Math.imul(d,Q)|0))<<13)|0;a=((o=o+Math.imul(d,tt)|0)+(n>>>13)|0)+(Mt>>>26)|0,Mt&=67108863,i=Math.imul(k,Z),n=(n=Math.imul(k,D))+Math.imul(E,Z)|0,o=Math.imul(E,D),i=i+Math.imul(S,U)|0,n=(n=n+Math.imul(S,F)|0)+Math.imul(x,U)|0,o=o+Math.imul(x,F)|0,i=i+Math.imul(M,V)|0,n=(n=n+Math.imul(M,J)|0)+Math.imul(b,V)|0,o=o+Math.imul(b,J)|0,i=i+Math.imul(g,$)|0,n=(n=n+Math.imul(g,G)|0)+Math.imul(y,$)|0,o=o+Math.imul(y,G)|0,i=i+Math.imul(p,Q)|0,n=(n=n+Math.imul(p,tt)|0)+Math.imul(m,Q)|0,o=o+Math.imul(m,tt)|0;var bt=(a+(i=i+Math.imul(l,rt)|0)|0)+((8191&(n=(n=n+Math.imul(l,it)|0)+Math.imul(d,rt)|0))<<13)|0;a=((o=o+Math.imul(d,it)|0)+(n>>>13)|0)+(bt>>>26)|0,bt&=67108863,i=Math.imul(B,Z),n=(n=Math.imul(B,D))+Math.imul(I,Z)|0,o=Math.imul(I,D),i=i+Math.imul(k,U)|0,n=(n=n+Math.imul(k,F)|0)+Math.imul(E,U)|0,o=o+Math.imul(E,F)|0,i=i+Math.imul(S,V)|0,n=(n=n+Math.imul(S,J)|0)+Math.imul(x,V)|0,o=o+Math.imul(x,J)|0,i=i+Math.imul(M,$)|0,n=(n=n+Math.imul(M,G)|0)+Math.imul(b,$)|0,o=o+Math.imul(b,G)|0,i=i+Math.imul(g,Q)|0,n=(n=n+Math.imul(g,tt)|0)+Math.imul(y,Q)|0,o=o+Math.imul(y,tt)|0,i=i+Math.imul(p,rt)|0,n=(n=n+Math.imul(p,it)|0)+Math.imul(m,rt)|0,o=o+Math.imul(m,it)|0;var _t=(a+(i=i+Math.imul(l,ot)|0)|0)+((8191&(n=(n=n+Math.imul(l,st)|0)+Math.imul(d,ot)|0))<<13)|0;a=((o=o+Math.imul(d,st)|0)+(n>>>13)|0)+(_t>>>26)|0,_t&=67108863,i=Math.imul(P,Z),n=(n=Math.imul(P,D))+Math.imul(N,Z)|0,o=Math.imul(N,D),i=i+Math.imul(B,U)|0,n=(n=n+Math.imul(B,F)|0)+Math.imul(I,U)|0,o=o+Math.imul(I,F)|0,i=i+Math.imul(k,V)|0,n=(n=n+Math.imul(k,J)|0)+Math.imul(E,V)|0,o=o+Math.imul(E,J)|0,i=i+Math.imul(S,$)|0,n=(n=n+Math.imul(S,G)|0)+Math.imul(x,$)|0,o=o+Math.imul(x,G)|0,i=i+Math.imul(M,Q)|0,n=(n=n+Math.imul(M,tt)|0)+Math.imul(b,Q)|0,o=o+Math.imul(b,tt)|0,i=i+Math.imul(g,rt)|0,n=(n=n+Math.imul(g,it)|0)+Math.imul(y,rt)|0,o=o+Math.imul(y,it)|0,i=i+Math.imul(p,ot)|0,n=(n=n+Math.imul(p,st)|0)+Math.imul(m,ot)|0,o=o+Math.imul(m,st)|0;var St=(a+(i=i+Math.imul(l,ut)|0)|0)+((8191&(n=(n=n+Math.imul(l,at)|0)+Math.imul(d,ut)|0))<<13)|0;a=((o=o+Math.imul(d,at)|0)+(n>>>13)|0)+(St>>>26)|0,St&=67108863,i=Math.imul(L,Z),n=(n=Math.imul(L,D))+Math.imul(q,Z)|0,o=Math.imul(q,D),i=i+Math.imul(P,U)|0,n=(n=n+Math.imul(P,F)|0)+Math.imul(N,U)|0,o=o+Math.imul(N,F)|0,i=i+Math.imul(B,V)|0,n=(n=n+Math.imul(B,J)|0)+Math.imul(I,V)|0,o=o+Math.imul(I,J)|0,i=i+Math.imul(k,$)|0,n=(n=n+Math.imul(k,G)|0)+Math.imul(E,$)|0,o=o+Math.imul(E,G)|0,i=i+Math.imul(S,Q)|0,n=(n=n+Math.imul(S,tt)|0)+Math.imul(x,Q)|0,o=o+Math.imul(x,tt)|0,i=i+Math.imul(M,rt)|0,n=(n=n+Math.imul(M,it)|0)+Math.imul(b,rt)|0,o=o+Math.imul(b,it)|0,i=i+Math.imul(g,ot)|0,n=(n=n+Math.imul(g,st)|0)+Math.imul(y,ot)|0,o=o+Math.imul(y,st)|0,i=i+Math.imul(p,ut)|0,n=(n=n+Math.imul(p,at)|0)+Math.imul(m,ut)|0,o=o+Math.imul(m,at)|0;var xt=(a+(i=i+Math.imul(l,lt)|0)|0)+((8191&(n=(n=n+Math.imul(l,dt)|0)+Math.imul(d,lt)|0))<<13)|0;a=((o=o+Math.imul(d,dt)|0)+(n>>>13)|0)+(xt>>>26)|0,xt&=67108863,i=Math.imul(j,Z),n=(n=Math.imul(j,D))+Math.imul(C,Z)|0,o=Math.imul(C,D),i=i+Math.imul(L,U)|0,n=(n=n+Math.imul(L,F)|0)+Math.imul(q,U)|0,o=o+Math.imul(q,F)|0,i=i+Math.imul(P,V)|0,n=(n=n+Math.imul(P,J)|0)+Math.imul(N,V)|0,o=o+Math.imul(N,J)|0,i=i+Math.imul(B,$)|0,n=(n=n+Math.imul(B,G)|0)+Math.imul(I,$)|0,o=o+Math.imul(I,G)|0,i=i+Math.imul(k,Q)|0,n=(n=n+Math.imul(k,tt)|0)+Math.imul(E,Q)|0,o=o+Math.imul(E,tt)|0,i=i+Math.imul(S,rt)|0,n=(n=n+Math.imul(S,it)|0)+Math.imul(x,rt)|0,o=o+Math.imul(x,it)|0,i=i+Math.imul(M,ot)|0,n=(n=n+Math.imul(M,st)|0)+Math.imul(b,ot)|0,o=o+Math.imul(b,st)|0,i=i+Math.imul(g,ut)|0,n=(n=n+Math.imul(g,at)|0)+Math.imul(y,ut)|0,o=o+Math.imul(y,at)|0,i=i+Math.imul(p,lt)|0,n=(n=n+Math.imul(p,dt)|0)+Math.imul(m,lt)|0,o=o+Math.imul(m,dt)|0;var At=(a+(i=i+Math.imul(l,pt)|0)|0)+((8191&(n=(n=n+Math.imul(l,mt)|0)+Math.imul(d,pt)|0))<<13)|0;a=((o=o+Math.imul(d,mt)|0)+(n>>>13)|0)+(At>>>26)|0,At&=67108863,i=Math.imul(j,U),n=(n=Math.imul(j,F))+Math.imul(C,U)|0,o=Math.imul(C,F),i=i+Math.imul(L,V)|0,n=(n=n+Math.imul(L,J)|0)+Math.imul(q,V)|0,o=o+Math.imul(q,J)|0,i=i+Math.imul(P,$)|0,n=(n=n+Math.imul(P,G)|0)+Math.imul(N,$)|0,o=o+Math.imul(N,G)|0,i=i+Math.imul(B,Q)|0,n=(n=n+Math.imul(B,tt)|0)+Math.imul(I,Q)|0,o=o+Math.imul(I,tt)|0,i=i+Math.imul(k,rt)|0,n=(n=n+Math.imul(k,it)|0)+Math.imul(E,rt)|0,o=o+Math.imul(E,it)|0,i=i+Math.imul(S,ot)|0,n=(n=n+Math.imul(S,st)|0)+Math.imul(x,ot)|0,o=o+Math.imul(x,st)|0,i=i+Math.imul(M,ut)|0,n=(n=n+Math.imul(M,at)|0)+Math.imul(b,ut)|0,o=o+Math.imul(b,at)|0,i=i+Math.imul(g,lt)|0,n=(n=n+Math.imul(g,dt)|0)+Math.imul(y,lt)|0,o=o+Math.imul(y,dt)|0;var kt=(a+(i=i+Math.imul(p,pt)|0)|0)+((8191&(n=(n=n+Math.imul(p,mt)|0)+Math.imul(m,pt)|0))<<13)|0;a=((o=o+Math.imul(m,mt)|0)+(n>>>13)|0)+(kt>>>26)|0,kt&=67108863,i=Math.imul(j,V),n=(n=Math.imul(j,J))+Math.imul(C,V)|0,o=Math.imul(C,J),i=i+Math.imul(L,$)|0,n=(n=n+Math.imul(L,G)|0)+Math.imul(q,$)|0,o=o+Math.imul(q,G)|0,i=i+Math.imul(P,Q)|0,n=(n=n+Math.imul(P,tt)|0)+Math.imul(N,Q)|0,o=o+Math.imul(N,tt)|0,i=i+Math.imul(B,rt)|0,n=(n=n+Math.imul(B,it)|0)+Math.imul(I,rt)|0,o=o+Math.imul(I,it)|0,i=i+Math.imul(k,ot)|0,n=(n=n+Math.imul(k,st)|0)+Math.imul(E,ot)|0,o=o+Math.imul(E,st)|0,i=i+Math.imul(S,ut)|0,n=(n=n+Math.imul(S,at)|0)+Math.imul(x,ut)|0,o=o+Math.imul(x,at)|0,i=i+Math.imul(M,lt)|0,n=(n=n+Math.imul(M,dt)|0)+Math.imul(b,lt)|0,o=o+Math.imul(b,dt)|0;var Et=(a+(i=i+Math.imul(g,pt)|0)|0)+((8191&(n=(n=n+Math.imul(g,mt)|0)+Math.imul(y,pt)|0))<<13)|0;a=((o=o+Math.imul(y,mt)|0)+(n>>>13)|0)+(Et>>>26)|0,Et&=67108863,i=Math.imul(j,$),n=(n=Math.imul(j,G))+Math.imul(C,$)|0,o=Math.imul(C,G),i=i+Math.imul(L,Q)|0,n=(n=n+Math.imul(L,tt)|0)+Math.imul(q,Q)|0,o=o+Math.imul(q,tt)|0,i=i+Math.imul(P,rt)|0,n=(n=n+Math.imul(P,it)|0)+Math.imul(N,rt)|0,o=o+Math.imul(N,it)|0,i=i+Math.imul(B,ot)|0,n=(n=n+Math.imul(B,st)|0)+Math.imul(I,ot)|0,o=o+Math.imul(I,st)|0,i=i+Math.imul(k,ut)|0,n=(n=n+Math.imul(k,at)|0)+Math.imul(E,ut)|0,o=o+Math.imul(E,at)|0,i=i+Math.imul(S,lt)|0,n=(n=n+Math.imul(S,dt)|0)+Math.imul(x,lt)|0,o=o+Math.imul(x,dt)|0;var Rt=(a+(i=i+Math.imul(M,pt)|0)|0)+((8191&(n=(n=n+Math.imul(M,mt)|0)+Math.imul(b,pt)|0))<<13)|0;a=((o=o+Math.imul(b,mt)|0)+(n>>>13)|0)+(Rt>>>26)|0,Rt&=67108863,i=Math.imul(j,Q),n=(n=Math.imul(j,tt))+Math.imul(C,Q)|0,o=Math.imul(C,tt),i=i+Math.imul(L,rt)|0,n=(n=n+Math.imul(L,it)|0)+Math.imul(q,rt)|0,o=o+Math.imul(q,it)|0,i=i+Math.imul(P,ot)|0,n=(n=n+Math.imul(P,st)|0)+Math.imul(N,ot)|0,o=o+Math.imul(N,st)|0,i=i+Math.imul(B,ut)|0,n=(n=n+Math.imul(B,at)|0)+Math.imul(I,ut)|0,o=o+Math.imul(I,at)|0,i=i+Math.imul(k,lt)|0,n=(n=n+Math.imul(k,dt)|0)+Math.imul(E,lt)|0,o=o+Math.imul(E,dt)|0;var Bt=(a+(i=i+Math.imul(S,pt)|0)|0)+((8191&(n=(n=n+Math.imul(S,mt)|0)+Math.imul(x,pt)|0))<<13)|0;a=((o=o+Math.imul(x,mt)|0)+(n>>>13)|0)+(Bt>>>26)|0,Bt&=67108863,i=Math.imul(j,rt),n=(n=Math.imul(j,it))+Math.imul(C,rt)|0,o=Math.imul(C,it),i=i+Math.imul(L,ot)|0,n=(n=n+Math.imul(L,st)|0)+Math.imul(q,ot)|0,o=o+Math.imul(q,st)|0,i=i+Math.imul(P,ut)|0,n=(n=n+Math.imul(P,at)|0)+Math.imul(N,ut)|0,o=o+Math.imul(N,at)|0,i=i+Math.imul(B,lt)|0,n=(n=n+Math.imul(B,dt)|0)+Math.imul(I,lt)|0,o=o+Math.imul(I,dt)|0;var It=(a+(i=i+Math.imul(k,pt)|0)|0)+((8191&(n=(n=n+Math.imul(k,mt)|0)+Math.imul(E,pt)|0))<<13)|0;a=((o=o+Math.imul(E,mt)|0)+(n>>>13)|0)+(It>>>26)|0,It&=67108863,i=Math.imul(j,ot),n=(n=Math.imul(j,st))+Math.imul(C,ot)|0,o=Math.imul(C,st),i=i+Math.imul(L,ut)|0,n=(n=n+Math.imul(L,at)|0)+Math.imul(q,ut)|0,o=o+Math.imul(q,at)|0,i=i+Math.imul(P,lt)|0,n=(n=n+Math.imul(P,dt)|0)+Math.imul(N,lt)|0,o=o+Math.imul(N,dt)|0;var Tt=(a+(i=i+Math.imul(B,pt)|0)|0)+((8191&(n=(n=n+Math.imul(B,mt)|0)+Math.imul(I,pt)|0))<<13)|0;a=((o=o+Math.imul(I,mt)|0)+(n>>>13)|0)+(Tt>>>26)|0,Tt&=67108863,i=Math.imul(j,ut),n=(n=Math.imul(j,at))+Math.imul(C,ut)|0,o=Math.imul(C,at),i=i+Math.imul(L,lt)|0,n=(n=n+Math.imul(L,dt)|0)+Math.imul(q,lt)|0,o=o+Math.imul(q,dt)|0;var Pt=(a+(i=i+Math.imul(P,pt)|0)|0)+((8191&(n=(n=n+Math.imul(P,mt)|0)+Math.imul(N,pt)|0))<<13)|0;a=((o=o+Math.imul(N,mt)|0)+(n>>>13)|0)+(Pt>>>26)|0,Pt&=67108863,i=Math.imul(j,lt),n=(n=Math.imul(j,dt))+Math.imul(C,lt)|0,o=Math.imul(C,dt);var Nt=(a+(i=i+Math.imul(L,pt)|0)|0)+((8191&(n=(n=n+Math.imul(L,mt)|0)+Math.imul(q,pt)|0))<<13)|0;a=((o=o+Math.imul(q,mt)|0)+(n>>>13)|0)+(Nt>>>26)|0,Nt&=67108863;var Ot=(a+(i=Math.imul(j,pt))|0)+((8191&(n=(n=Math.imul(j,mt))+Math.imul(C,pt)|0))<<13)|0;return a=((o=Math.imul(C,mt))+(n>>>13)|0)+(Ot>>>26)|0,Ot&=67108863,u[0]=vt,u[1]=gt,u[2]=yt,u[3]=wt,u[4]=Mt,u[5]=bt,u[6]=_t,u[7]=St,u[8]=xt,u[9]=At,u[10]=kt,u[11]=Et,u[12]=Rt,u[13]=Bt,u[14]=It,u[15]=Tt,u[16]=Pt,u[17]=Nt,u[18]=Ot,0!==a&&(u[19]=a,r.length++),r};function g(t,e,r){r.negative=e.negative^t.negative,r.length=t.length+e.length;for(var i=0,n=0,o=0;o<r.length-1;o++){var s=n;n=0;for(var h=67108863&i,u=Math.min(o,e.length-1),a=Math.max(0,o-t.length+1);a<=u;a++){var f=o-a,l=(0|t.words[f])*(0|e.words[a]),d=67108863&l;h=67108863&(d=d+h|0),n+=(s=(s=s+(l/67108864|0)|0)+(d>>>26)|0)>>>26,s&=67108863}r.words[o]=h,i=s,s=n}return 0!==i?r.words[o]=i:r.length--,r._strip()}function y(t,e,r){return g(t,e,r)}Math.imul||(v=m),n.prototype.mulTo=function(t,e){var r=this.length+t.length;return 10===this.length&&10===t.length?v(this,t,e):r<63?m(this,t,e):r<1024?g(this,t,e):y(this,t,e)},n.prototype.mul=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),this.mulTo(t,e)},n.prototype.mulf=function(t){var e=new n(null);return e.words=new Array(this.length+t.length),y(this,t,e)},n.prototype.imul=function(t){return this.clone().mulTo(t,this)},n.prototype.imuln=function(t){var e=t<0;e&&(t=-t),r("number"==typeof t),r(t<67108864);for(var i=0,n=0;n<this.length;n++){var o=(0|this.words[n])*t,s=(67108863&o)+(67108863&i);i>>=26,i+=o/67108864|0,i+=s>>>26,this.words[n]=67108863&s}return 0!==i&&(this.words[n]=i,this.length++),e?this.ineg():this},n.prototype.muln=function(t){return this.clone().imuln(t)},n.prototype.sqr=function(){return this.mul(this)},n.prototype.isqr=function(){return this.imul(this.clone())},n.prototype.pow=function(t){var e=function(t){for(var e=new Array(t.bitLength()),r=0;r<e.length;r++){var i=r/26|0,n=r%26;e[r]=t.words[i]>>>n&1}return e}(t);if(0===e.length)return new n(1);for(var r=this,i=0;i<e.length&&0===e[i];i++,r=r.sqr());if(++i<e.length)for(var o=r.sqr();i<e.length;i++,o=o.sqr())0!==e[i]&&(r=r.mul(o));return r},n.prototype.iushln=function(t){r("number"==typeof t&&t>=0);var e,i=t%26,n=(t-i)/26,o=67108863>>>26-i<<26-i;if(0!==i){var s=0;for(e=0;e<this.length;e++){var h=this.words[e]&o,u=(0|this.words[e])-h<<i;this.words[e]=u|s,s=h>>>26-i}s&&(this.words[e]=s,this.length++)}if(0!==n){for(e=this.length-1;e>=0;e--)this.words[e+n]=this.words[e];for(e=0;e<n;e++)this.words[e]=0;this.length+=n}return this._strip()},n.prototype.ishln=function(t){return r(0===this.negative),this.iushln(t)},n.prototype.iushrn=function(t,e,i){var n;r("number"==typeof t&&t>=0),n=e?(e-e%26)/26:0;var o=t%26,s=Math.min((t-o)/26,this.length),h=67108863^67108863>>>o<<o,u=i;if(n-=s,n=Math.max(0,n),u){for(var a=0;a<s;a++)u.words[a]=this.words[a];u.length=s}if(0===s);else if(this.length>s)for(this.length-=s,a=0;a<this.length;a++)this.words[a]=this.words[a+s];else this.words[0]=0,this.length=1;var f=0;for(a=this.length-1;a>=0&&(0!==f||a>=n);a--){var l=0|this.words[a];this.words[a]=f<<26-o|l>>>o,f=l&h}return u&&0!==f&&(u.words[u.length++]=f),0===this.length&&(this.words[0]=0,this.length=1),this._strip()},n.prototype.ishrn=function(t,e,i){return r(0===this.negative),this.iushrn(t,e,i)},n.prototype.shln=function(t){return this.clone().ishln(t)},n.prototype.ushln=function(t){return this.clone().iushln(t)},n.prototype.shrn=function(t){return this.clone().ishrn(t)},n.prototype.ushrn=function(t){return this.clone().iushrn(t)},n.prototype.testn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26,n=1<<e;return!(this.length<=i||!(this.words[i]&n))},n.prototype.imaskn=function(t){r("number"==typeof t&&t>=0);var e=t%26,i=(t-e)/26;if(r(0===this.negative,"imaskn works only with positive numbers"),this.length<=i)return this;if(0!==e&&i++,this.length=Math.min(i,this.length),0!==e){var n=67108863^67108863>>>e<<e;this.words[this.length-1]&=n}return this._strip()},n.prototype.maskn=function(t){return this.clone().imaskn(t)},n.prototype.iaddn=function(t){return r("number"==typeof t),r(t<67108864),t<0?this.isubn(-t):0!==this.negative?1===this.length&&(0|this.words[0])<=t?(this.words[0]=t-(0|this.words[0]),this.negative=0,this):(this.negative=0,this.isubn(t),this.negative=1,this):this._iaddn(t)},n.prototype._iaddn=function(t){this.words[0]+=t;for(var e=0;e<this.length&&this.words[e]>=67108864;e++)this.words[e]-=67108864,e===this.length-1?this.words[e+1]=1:this.words[e+1]++;return this.length=Math.max(this.length,e+1),this},n.prototype.isubn=function(t){if(r("number"==typeof t),r(t<67108864),t<0)return this.iaddn(-t);if(0!==this.negative)return this.negative=0,this.iaddn(t),this.negative=1,this;if(this.words[0]-=t,1===this.length&&this.words[0]<0)this.words[0]=-this.words[0],this.negative=1;else for(var e=0;e<this.length&&this.words[e]<0;e++)this.words[e]+=67108864,this.words[e+1]-=1;return this._strip()},n.prototype.addn=function(t){return this.clone().iaddn(t)},n.prototype.subn=function(t){return this.clone().isubn(t)},n.prototype.iabs=function(){return this.negative=0,this},n.prototype.abs=function(){return this.clone().iabs()},n.prototype._ishlnsubmul=function(t,e,i){var n,o,s=t.length+i;this._expand(s);var h=0;for(n=0;n<t.length;n++){o=(0|this.words[n+i])+h;var u=(0|t.words[n])*e;h=((o-=67108863&u)>>26)-(u/67108864|0),this.words[n+i]=67108863&o}for(;n<this.length-i;n++)h=(o=(0|this.words[n+i])+h)>>26,this.words[n+i]=67108863&o;if(0===h)return this._strip();for(r(-1===h),h=0,n=0;n<this.length;n++)h=(o=-(0|this.words[n])+h)>>26,this.words[n]=67108863&o;return this.negative=1,this._strip()},n.prototype._wordDiv=function(t,e){var r=(this.length,t.length),i=this.clone(),o=t,s=0|o.words[o.length-1];0!=(r=26-this._countBits(s))&&(o=o.ushln(r),i.iushln(r),s=0|o.words[o.length-1]);var h,u=i.length-o.length;if("mod"!==e){(h=new n(null)).length=u+1,h.words=new Array(h.length);for(var a=0;a<h.length;a++)h.words[a]=0}var f=i.clone()._ishlnsubmul(o,1,u);0===f.negative&&(i=f,h&&(h.words[u]=1));for(var l=u-1;l>=0;l--){var d=67108864*(0|i.words[o.length+l])+(0|i.words[o.length+l-1]);for(d=Math.min(d/s|0,67108863),i._ishlnsubmul(o,d,l);0!==i.negative;)d--,i.negative=0,i._ishlnsubmul(o,1,l),i.isZero()||(i.negative^=1);h&&(h.words[l]=d)}return h&&h._strip(),i._strip(),"div"!==e&&0!==r&&i.iushrn(r),{div:h||null,mod:i}},n.prototype.divmod=function(t,e,i){return r(!t.isZero()),this.isZero()?{div:new n(0),mod:new n(0)}:0!==this.negative&&0===t.negative?(h=this.neg().divmod(t,e),"mod"!==e&&(o=h.div.neg()),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.iadd(t)),{div:o,mod:s}):0===this.negative&&0!==t.negative?(h=this.divmod(t.neg(),e),"mod"!==e&&(o=h.div.neg()),{div:o,mod:h.mod}):0!=(this.negative&t.negative)?(h=this.neg().divmod(t.neg(),e),"div"!==e&&(s=h.mod.neg(),i&&0!==s.negative&&s.isub(t)),{div:h.div,mod:s}):t.length>this.length||this.cmp(t)<0?{div:new n(0),mod:this}:1===t.length?"div"===e?{div:this.divn(t.words[0]),mod:null}:"mod"===e?{div:null,mod:new n(this.modrn(t.words[0]))}:{div:this.divn(t.words[0]),mod:new n(this.modrn(t.words[0]))}:this._wordDiv(t,e);var o,s,h},n.prototype.div=function(t){return this.divmod(t,"div",!1).div},n.prototype.mod=function(t){return this.divmod(t,"mod",!1).mod},n.prototype.umod=function(t){return this.divmod(t,"mod",!0).mod},n.prototype.divRound=function(t){var e=this.divmod(t);if(e.mod.isZero())return e.div;var r=0!==e.div.negative?e.mod.isub(t):e.mod,i=t.ushrn(1),n=t.andln(1),o=r.cmp(i);return o<0||1===n&&0===o?e.div:0!==e.div.negative?e.div.isubn(1):e.div.iaddn(1)},n.prototype.modrn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=(1<<26)%t,n=0,o=this.length-1;o>=0;o--)n=(i*n+(0|this.words[o]))%t;return e?-n:n},n.prototype.modn=function(t){return this.modrn(t)},n.prototype.idivn=function(t){var e=t<0;e&&(t=-t),r(t<=67108863);for(var i=0,n=this.length-1;n>=0;n--){var o=(0|this.words[n])+67108864*i;this.words[n]=o/t|0,i=o%t}return this._strip(),e?this.ineg():this},n.prototype.divn=function(t){return this.clone().idivn(t)},n.prototype.egcd=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o=new n(1),s=new n(0),h=new n(0),u=new n(1),a=0;e.isEven()&&i.isEven();)e.iushrn(1),i.iushrn(1),++a;for(var f=i.clone(),l=e.clone();!e.isZero();){for(var d=0,c=1;0==(e.words[0]&c)&&d<26;++d,c<<=1);if(d>0)for(e.iushrn(d);d-- >0;)(o.isOdd()||s.isOdd())&&(o.iadd(f),s.isub(l)),o.iushrn(1),s.iushrn(1);for(var p=0,m=1;0==(i.words[0]&m)&&p<26;++p,m<<=1);if(p>0)for(i.iushrn(p);p-- >0;)(h.isOdd()||u.isOdd())&&(h.iadd(f),u.isub(l)),h.iushrn(1),u.iushrn(1);e.cmp(i)>=0?(e.isub(i),o.isub(h),s.isub(u)):(i.isub(e),h.isub(o),u.isub(s))}return{a:h,b:u,gcd:i.iushln(a)}},n.prototype._invmp=function(t){r(0===t.negative),r(!t.isZero());var e=this,i=t.clone();e=0!==e.negative?e.umod(t):e.clone();for(var o,s=new n(1),h=new n(0),u=i.clone();e.cmpn(1)>0&&i.cmpn(1)>0;){for(var a=0,f=1;0==(e.words[0]&f)&&a<26;++a,f<<=1);if(a>0)for(e.iushrn(a);a-- >0;)s.isOdd()&&s.iadd(u),s.iushrn(1);for(var l=0,d=1;0==(i.words[0]&d)&&l<26;++l,d<<=1);if(l>0)for(i.iushrn(l);l-- >0;)h.isOdd()&&h.iadd(u),h.iushrn(1);e.cmp(i)>=0?(e.isub(i),s.isub(h)):(i.isub(e),h.isub(s))}return(o=0===e.cmpn(1)?s:h).cmpn(0)<0&&o.iadd(t),o},n.prototype.gcd=function(t){if(this.isZero())return t.abs();if(t.isZero())return this.abs();var e=this.clone(),r=t.clone();e.negative=0,r.negative=0;for(var i=0;e.isEven()&&r.isEven();i++)e.iushrn(1),r.iushrn(1);for(;;){for(;e.isEven();)e.iushrn(1);for(;r.isEven();)r.iushrn(1);var n=e.cmp(r);if(n<0){var o=e;e=r,r=o}else if(0===n||0===r.cmpn(1))break;e.isub(r)}return r.iushln(i)},n.prototype.invm=function(t){return this.egcd(t).a.umod(t)},n.prototype.isEven=function(){return 0==(1&this.words[0])},n.prototype.isOdd=function(){return 1==(1&this.words[0])},n.prototype.andln=function(t){return this.words[0]&t},n.prototype.bincn=function(t){r("number"==typeof t);var e=t%26,i=(t-e)/26,n=1<<e;if(this.length<=i)return this._expand(i+1),this.words[i]|=n,this;for(var o=n,s=i;0!==o&&s<this.length;s++){var h=0|this.words[s];o=(h+=o)>>>26,h&=67108863,this.words[s]=h}return 0!==o&&(this.words[s]=o,this.length++),this},n.prototype.isZero=function(){return 1===this.length&&0===this.words[0]},n.prototype.cmpn=function(t){var e,i=t<0;if(0!==this.negative&&!i)return-1;if(0===this.negative&&i)return 1;if(this._strip(),this.length>1)e=1;else{i&&(t=-t),r(t<=67108863,"Number is too big");var n=0|this.words[0];e=n===t?0:n<t?-1:1}return 0!==this.negative?0|-e:e},n.prototype.cmp=function(t){if(0!==this.negative&&0===t.negative)return-1;if(0===this.negative&&0!==t.negative)return 1;var e=this.ucmp(t);return 0!==this.negative?0|-e:e},n.prototype.ucmp=function(t){if(this.length>t.length)return 1;if(this.length<t.length)return-1;for(var e=0,r=this.length-1;r>=0;r--){var i=0|this.words[r],n=0|t.words[r];if(i!==n){i<n?e=-1:i>n&&(e=1);break}}return e},n.prototype.gtn=function(t){return 1===this.cmpn(t)},n.prototype.gt=function(t){return 1===this.cmp(t)},n.prototype.gten=function(t){return this.cmpn(t)>=0},n.prototype.gte=function(t){return this.cmp(t)>=0},n.prototype.ltn=function(t){return-1===this.cmpn(t)},n.prototype.lt=function(t){return-1===this.cmp(t)},n.prototype.lten=function(t){return this.cmpn(t)<=0},n.prototype.lte=function(t){return this.cmp(t)<=0},n.prototype.eqn=function(t){return 0===this.cmpn(t)},n.prototype.eq=function(t){return 0===this.cmp(t)},n.red=function(t){return new A(t)},n.prototype.toRed=function(t){return r(!this.red,"Already a number in reduction context"),r(0===this.negative,"red works only with positives"),t.convertTo(this)._forceRed(t)},n.prototype.fromRed=function(){return r(this.red,"fromRed works only with numbers in reduction context"),this.red.convertFrom(this)},n.prototype._forceRed=function(t){return this.red=t,this},n.prototype.forceRed=function(t){return r(!this.red,"Already a number in reduction context"),this._forceRed(t)},n.prototype.redAdd=function(t){return r(this.red,"redAdd works only with red numbers"),this.red.add(this,t)},n.prototype.redIAdd=function(t){return r(this.red,"redIAdd works only with red numbers"),this.red.iadd(this,t)},n.prototype.redSub=function(t){return r(this.red,"redSub works only with red numbers"),this.red.sub(this,t)},n.prototype.redISub=function(t){return r(this.red,"redISub works only with red numbers"),this.red.isub(this,t)},n.prototype.redShl=function(t){return r(this.red,"redShl works only with red numbers"),this.red.shl(this,t)},n.prototype.redMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.mul(this,t)},n.prototype.redIMul=function(t){return r(this.red,"redMul works only with red numbers"),this.red._verify2(this,t),this.red.imul(this,t)},n.prototype.redSqr=function(){return r(this.red,"redSqr works only with red numbers"),this.red._verify1(this),this.red.sqr(this)},n.prototype.redISqr=function(){return r(this.red,"redISqr works only with red numbers"),this.red._verify1(this),this.red.isqr(this)},n.prototype.redSqrt=function(){return r(this.red,"redSqrt works only with red numbers"),this.red._verify1(this),this.red.sqrt(this)},n.prototype.redInvm=function(){return r(this.red,"redInvm works only with red numbers"),this.red._verify1(this),this.red.invm(this)},n.prototype.redNeg=function(){return r(this.red,"redNeg works only with red numbers"),this.red._verify1(this),this.red.neg(this)},n.prototype.redPow=function(t){return r(this.red&&!t.red,"redPow(normalNum)"),this.red._verify1(this),this.red.pow(this,t)};var w={k256:null,p224:null,p192:null,p25519:null};function M(t,e){this.name=t,this.p=new n(e,16),this.n=this.p.bitLength(),this.k=new n(1).iushln(this.n).isub(this.p),this.tmp=this._tmp()}function b(){M.call(this,"k256","ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f")}function _(){M.call(this,"p224","ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001")}function S(){M.call(this,"p192","ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff")}function x(){M.call(this,"25519","7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed")}function A(t){if("string"==typeof t){var e=n._prime(t);this.m=e.p,this.prime=e}else r(t.gtn(1),"modulus must be greater than 1"),this.m=t,this.prime=null}function k(t){A.call(this,t),this.shift=this.m.bitLength(),this.shift%26!=0&&(this.shift+=26-this.shift%26),this.r=new n(1).iushln(this.shift),this.r2=this.imod(this.r.sqr()),this.rinv=this.r._invmp(this.m),this.minv=this.rinv.mul(this.r).isubn(1).div(this.m),this.minv=this.minv.umod(this.r),this.minv=this.r.sub(this.minv)}M.prototype._tmp=function(){var t=new n(null);return t.words=new Array(Math.ceil(this.n/13)),t},M.prototype.ireduce=function(t){var e,r=t;do{this.split(r,this.tmp),e=(r=(r=this.imulK(r)).iadd(this.tmp)).bitLength()}while(e>this.n);var i=e<this.n?-1:r.ucmp(this.p);return 0===i?(r.words[0]=0,r.length=1):i>0?r.isub(this.p):void 0!==r.strip?r.strip():r._strip(),r},M.prototype.split=function(t,e){t.iushrn(this.n,0,e)},M.prototype.imulK=function(t){return t.imul(this.k)},i(b,M),b.prototype.split=function(t,e){for(var r=4194303,i=Math.min(t.length,9),n=0;n<i;n++)e.words[n]=t.words[n];if(e.length=i,t.length<=9)return t.words[0]=0,void(t.length=1);var o=t.words[9];for(e.words[e.length++]=o&r,n=10;n<t.length;n++){var s=0|t.words[n];t.words[n-10]=(s&r)<<4|o>>>22,o=s}o>>>=22,t.words[n-10]=o,0===o&&t.length>10?t.length-=10:t.length-=9},b.prototype.imulK=function(t){t.words[t.length]=0,t.words[t.length+1]=0,t.length+=2;for(var e=0,r=0;r<t.length;r++){var i=0|t.words[r];e+=977*i,t.words[r]=67108863&e,e=64*i+(e/67108864|0)}return 0===t.words[t.length-1]&&(t.length--,0===t.words[t.length-1]&&t.length--),t},i(_,M),i(S,M),i(x,M),x.prototype.imulK=function(t){for(var e=0,r=0;r<t.length;r++){var i=19*(0|t.words[r])+e,n=67108863&i;i>>>=26,t.words[r]=n,e=i}return 0!==e&&(t.words[t.length++]=e),t},n._prime=function(t){if(w[t])return w[t];var e;if("k256"===t)e=new b;else if("p224"===t)e=new _;else if("p192"===t)e=new S;else{if("p25519"!==t)throw new Error("Unknown prime "+t);e=new x}return w[t]=e,e},A.prototype._verify1=function(t){r(0===t.negative,"red works only with positives"),r(t.red,"red works only with red numbers")},A.prototype._verify2=function(t,e){r(0==(t.negative|e.negative),"red works only with positives"),r(t.red&&t.red===e.red,"red works only with red numbers")},A.prototype.imod=function(t){return this.prime?this.prime.ireduce(t)._forceRed(this):(f(t,t.umod(this.m)._forceRed(this)),t)},A.prototype.neg=function(t){return t.isZero()?t.clone():this.m.sub(t)._forceRed(this)},A.prototype.add=function(t,e){this._verify2(t,e);var r=t.add(e);return r.cmp(this.m)>=0&&r.isub(this.m),r._forceRed(this)},A.prototype.iadd=function(t,e){this._verify2(t,e);var r=t.iadd(e);return r.cmp(this.m)>=0&&r.isub(this.m),r},A.prototype.sub=function(t,e){this._verify2(t,e);var r=t.sub(e);return r.cmpn(0)<0&&r.iadd(this.m),r._forceRed(this)},A.prototype.isub=function(t,e){this._verify2(t,e);var r=t.isub(e);return r.cmpn(0)<0&&r.iadd(this.m),r},A.prototype.shl=function(t,e){return this._verify1(t),this.imod(t.ushln(e))},A.prototype.imul=function(t,e){return this._verify2(t,e),this.imod(t.imul(e))},A.prototype.mul=function(t,e){return this._verify2(t,e),this.imod(t.mul(e))},A.prototype.isqr=function(t){return this.imul(t,t.clone())},A.prototype.sqr=function(t){return this.mul(t,t)},A.prototype.sqrt=function(t){if(t.isZero())return t.clone();var e=this.m.andln(3);if(r(e%2==1),3===e){var i=this.m.add(new n(1)).iushrn(2);return this.pow(t,i)}for(var o=this.m.subn(1),s=0;!o.isZero()&&0===o.andln(1);)s++,o.iushrn(1);r(!o.isZero());var h=new n(1).toRed(this),u=h.redNeg(),a=this.m.subn(1).iushrn(1),f=this.m.bitLength();for(f=new n(2*f*f).toRed(this);0!==this.pow(f,a).cmp(u);)f.redIAdd(u);for(var l=this.pow(f,o),d=this.pow(t,o.addn(1).iushrn(1)),c=this.pow(t,o),p=s;0!==c.cmp(h);){for(var m=c,v=0;0!==m.cmp(h);v++)m=m.redSqr();r(v<p);var g=this.pow(l,new n(1).iushln(p-v-1));d=d.redMul(g),l=g.redSqr(),c=c.redMul(l),p=v}return d},A.prototype.invm=function(t){var e=t._invmp(this.m);return 0!==e.negative?(e.negative=0,this.imod(e).redNeg()):this.imod(e)},A.prototype.pow=function(t,e){if(e.isZero())return new n(1).toRed(this);if(0===e.cmpn(1))return t.clone();var r=new Array(16);r[0]=new n(1).toRed(this),r[1]=t;for(var i=2;i<r.length;i++)r[i]=this.mul(r[i-1],t);var o=r[0],s=0,h=0,u=e.bitLength()%26;for(0===u&&(u=26),i=e.length-1;i>=0;i--){for(var a=e.words[i],f=u-1;f>=0;f--){var l=a>>f&1;o!==r[0]&&(o=this.sqr(o)),0!==l||0!==s?(s<<=1,s|=l,(4==++h||0===i&&0===f)&&(o=this.mul(o,r[s]),h=0,s=0)):h=0}u=26}return o},A.prototype.convertTo=function(t){var e=t.umod(this.m);return e===t?e.clone():e},A.prototype.convertFrom=function(t){var e=t.clone();return e.red=null,e},n.mont=function(t){return new k(t)},i(k,A),k.prototype.convertTo=function(t){return this.imod(t.ushln(this.shift))},k.prototype.convertFrom=function(t){var e=this.imod(t.mul(this.rinv));return e.red=null,e},k.prototype.imul=function(t,e){if(t.isZero()||e.isZero())return t.words[0]=0,t.length=1,t;var r=t.imul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),n=r.isub(i).iushrn(this.shift),o=n;return n.cmp(this.m)>=0?o=n.isub(this.m):n.cmpn(0)<0&&(o=n.iadd(this.m)),o._forceRed(this)},k.prototype.mul=function(t,e){if(t.isZero()||e.isZero())return new n(0)._forceRed(this);var r=t.mul(e),i=r.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m),o=r.isub(i).iushrn(this.shift),s=o;return o.cmp(this.m)>=0?s=o.isub(this.m):o.cmpn(0)<0&&(s=o.iadd(this.m)),s._forceRed(this)},k.prototype.invm=function(t){return this.imod(t._invmp(this.m).mul(this.r2))._forceRed(this)}}(H,g);var Z=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(C,"__esModule",{value:!0}),C.getLength=C.decode=C.encode=void 0;var D=Z(H.exports);function K(t,e){if("0"===t[0]&&"0"===t[1])throw new Error("invalid RLP: extra zeros");return parseInt(t,e)}function U(t,e){if(t<56)return Buffer.from([t+e]);var r=V(t),i=V(e+55+r.length/2);return Buffer.from(i+r,"hex")}function F(t){var e,r,i,n,o,s=[],h=t[0];if(h<=127)return{data:t.slice(0,1),remainder:t.slice(1)};if(h<=183){if(e=h-127,i=128===h?Buffer.from([]):t.slice(1,e),2===e&&i[0]<128)throw new Error("invalid rlp encoding: byte must be less 0x80");return{data:i,remainder:t.slice(e)}}if(h<=191){if(r=h-182,t.length-1<r)throw new Error("invalid RLP: not enough bytes for string length");if((e=K(t.slice(1,r).toString("hex"),16))<=55)throw new Error("invalid RLP: expected string length to be greater than 55");if((i=t.slice(r,e+r)).length<e)throw new Error("invalid RLP: not enough bytes for string");return{data:i,remainder:t.slice(e+r)}}if(h<=247){for(e=h-191,n=t.slice(1,e);n.length;)o=F(n),s.push(o.data),n=o.remainder;return{data:s,remainder:t.slice(e)}}var u=(r=h-246)+(e=K(t.slice(1,r).toString("hex"),16));if(u>t.length)throw new Error("invalid rlp: total length is larger than the data");if(0===(n=t.slice(r,u)).length)throw new Error("invalid rlp, List has a invalid length");for(;n.length;)o=F(n),s.push(o.data),n=o.remainder;return{data:s,remainder:t.slice(u)}}function W(t){return"0x"===t.slice(0,2)}function V(t){if(t<0)throw new Error("Invalid integer as argument, must be unsigned!");var e=t.toString(16);return e.length%2?"0"+e:e}function J(t){if(!Buffer.isBuffer(t)){if("string"==typeof t)return W(t)?Buffer.from((r="string"!=typeof(i=t)?i:W(i)?i.slice(2):i).length%2?"0"+r:r,"hex"):Buffer.from(t);if("number"==typeof t||"bigint"==typeof t)return t?(e=V(t),Buffer.from(e,"hex")):Buffer.from([]);if(null==t)return Buffer.from([]);if(t instanceof Uint8Array)return Buffer.from(t);if(D.default.isBN(t))return Buffer.from(t.toArray());throw new Error("invalid type")}var e,r,i;return t}C.encode=function t(e){if(Array.isArray(e)){for(var r=[],i=0;i<e.length;i++)r.push(t(e[i]));var n=Buffer.concat(r);return Buffer.concat([U(n.length,192),n])}var o=J(e);return 1===o.length&&o[0]<128?o:Buffer.concat([U(o.length,128),o])},C.decode=function(t,e){if(void 0===e&&(e=!1),!t||0===t.length)return Buffer.from([]);var r=F(J(t));if(e)return r;if(0!==r.remainder.length)throw new Error("invalid remainder");return r.data},C.getLength=function(t){if(!t||0===t.length)return Buffer.from([]);var e=J(t),r=e[0];if(r<=127)return e.length;if(r<=183)return r-127;if(r<=191)return r-182;if(r<=247)return r-191;var i=r-246;return i+K(e.slice(1,i).toString("hex"),16)};var X={},$="Impossible case. Please create issue.",G="The tweak was out of range or the resulted private key is invalid",Y="The tweak was out of range or equal to zero",Q="Unknow error on context randomization",tt="Private Key is invalid",et="Public Key could not be parsed",rt="Public Key serialization error",it="The sum of the public keys is not valid",nt="Signature could not be parsed",ot="The nonce generation function failed, or the private key was invalid",st="Public key could not be recover",ht="Scalar was invalid (zero or overflow)";function ut(t,e){if(!t)throw new Error(e)}function at(t,e,r){if(ut(e instanceof Uint8Array,"Expected ".concat(t," to be an Uint8Array")),void 0!==r)if(Array.isArray(r)){var i=r.join(", "),n="Expected ".concat(t," to be an Uint8Array with length [").concat(i,"]");ut(r.includes(e.length),n)}else{var o="Expected ".concat(t," to be an Uint8Array with length ").concat(r);ut(e.length===r,o)}}function ft(t){ut("Boolean"===dt(t),"Expected compressed to be a Boolean")}function lt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:function(t){return new Uint8Array(t)},e=arguments.length>1?arguments[1]:void 0;return"function"==typeof t&&(t=t(e)),at("output",t,e),t}function dt(t){return Object.prototype.toString.call(t).slice(8,-1)}var ct={},pt="6.5.4",mt={},vt=gt;function gt(t,e){if(!t)throw new Error(e||"Assertion failed")}gt.equal=function(t,e,r){if(t!=e)throw new Error(r||"Assertion failed: "+t+" != "+e)};var yt={};!function(t){var e=yt;function r(t){return 1===t.length?"0"+t:t}function i(t){for(var e="",i=0;i<t.length;i++)e+=r(t[i].toString(16));return e}e.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"!=typeof t){for(var i=0;i<t.length;i++)r[i]=0|t[i];return r}if("hex"===e){(t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t);for(i=0;i<t.length;i+=2)r.push(parseInt(t[i]+t[i+1],16))}else for(i=0;i<t.length;i++){var n=t.charCodeAt(i),o=n>>8,s=255&n;o?r.push(o,s):r.push(s)}return r},e.zero2=r,e.toHex=i,e.encode=function(t,e){return"hex"===e?i(t):t}}(),function(t){var e=mt,r=N.exports,i=vt,n=yt;e.assert=i,e.toArray=n.toArray,e.zero2=n.zero2,e.toHex=n.toHex,e.encode=n.encode,e.getNAF=function(t,e,r){var i=new Array(Math.max(t.bitLength(),r)+1);i.fill(0);for(var n=1<<e+1,o=t.clone(),s=0;s<i.length;s++){var h,u=o.andln(n-1);o.isOdd()?(h=u>(n>>1)-1?(n>>1)-u:u,o.isubn(h)):h=0,i[s]=h,o.iushrn(1)}return i},e.getJSF=function(t,e){var r=[[],[]];t=t.clone(),e=e.clone();for(var i,n=0,o=0;t.cmpn(-n)>0||e.cmpn(-o)>0;){var s,h,u=t.andln(3)+n&3,a=e.andln(3)+o&3;3===u&&(u=-1),3===a&&(a=-1),s=0==(1&u)?0:3!==(i=t.andln(7)+n&7)&&5!==i||2!==a?u:-u,r[0].push(s),h=0==(1&a)?0:3!==(i=e.andln(7)+o&7)&&5!==i||2!==u?a:-a,r[1].push(h),2*n===s+1&&(n=1-n),2*o===h+1&&(o=1-o),t.iushrn(1),e.iushrn(1)}return r},e.cachedProperty=function(t,e,r){var i="_"+e;t.prototype[e]=function(){return void 0!==this[i]?this[i]:this[i]=r.call(this)}},e.parseBytes=function(t){return"string"==typeof t?e.toArray(t,"hex"):t},e.intFromLE=function(t){return new r(t,"hex","le")}}();var wt,Mt={exports:{}};function bt(t){this.rand=t}if(Mt.exports=function(t){return wt||(wt=new bt(null)),wt.generate(t)},Mt.exports.Rand=bt,bt.prototype.generate=function(t){return this._rand(t)},bt.prototype._rand=function(t){if(this.rand.getBytes)return this.rand.getBytes(t);for(var e=new Uint8Array(t),r=0;r<e.length;r++)e[r]=this.rand.getByte();return e},"object"===("undefined"==typeof self?"undefined":s(self)))self.crypto&&self.crypto.getRandomValues?bt.prototype._rand=function(t){var e=new Uint8Array(t);return self.crypto.getRandomValues(e),e}:self.msCrypto&&self.msCrypto.getRandomValues?bt.prototype._rand=function(t){var e=new Uint8Array(t);return self.msCrypto.getRandomValues(e),e}:"object"===("undefined"==typeof window?"undefined":s(window))&&(bt.prototype._rand=function(){throw new Error("Not implemented yet")});else try{var _t=require("crypto");if("function"!=typeof _t.randomBytes)throw new Error("Not supported");bt.prototype._rand=function(t){return _t.randomBytes(t)}}catch(t){}var St={},xt=N.exports,At=mt,kt=At.getNAF,Et=At.getJSF,Rt=At.assert;function Bt(t,e){this.type=t,this.p=new xt(e.p,16),this.red=e.prime?xt.red(e.prime):xt.mont(this.p),this.zero=new xt(0).toRed(this.red),this.one=new xt(1).toRed(this.red),this.two=new xt(2).toRed(this.red),this.n=e.n&&new xt(e.n,16),this.g=e.g&&this.pointFromJSON(e.g,e.gRed),this._wnafT1=new Array(4),this._wnafT2=new Array(4),this._wnafT3=new Array(4),this._wnafT4=new Array(4),this._bitLength=this.n?this.n.bitLength():0;var r=this.n&&this.p.div(this.n);!r||r.cmpn(100)>0?this.redN=null:(this._maxwellTrick=!0,this.redN=this.n.toRed(this.red))}var It=Bt;function Tt(t,e){this.curve=t,this.type=e,this.precomputed=null}Bt.prototype.point=function(){throw new Error("Not implemented")},Bt.prototype.validate=function(){throw new Error("Not implemented")},Bt.prototype._fixedNafMul=function(t,e){Rt(t.precomputed);var r=t._getDoubles(),i=kt(e,1,this._bitLength),n=(1<<r.step+1)-(r.step%2==0?2:1);n/=3;var o,s,h=[];for(o=0;o<i.length;o+=r.step){s=0;for(var u=o+r.step-1;u>=o;u--)s=(s<<1)+i[u];h.push(s)}for(var a=this.jpoint(null,null,null),f=this.jpoint(null,null,null),l=n;l>0;l--){for(o=0;o<h.length;o++)(s=h[o])===l?f=f.mixedAdd(r.points[o]):s===-l&&(f=f.mixedAdd(r.points[o].neg()));a=a.add(f)}return a.toP()},Bt.prototype._wnafMul=function(t,e){var r=4,i=t._getNAFPoints(r);r=i.wnd;for(var n=i.points,o=kt(e,r,this._bitLength),s=this.jpoint(null,null,null),h=o.length-1;h>=0;h--){for(var u=0;h>=0&&0===o[h];h--)u++;if(h>=0&&u++,s=s.dblp(u),h<0)break;var a=o[h];Rt(0!==a),s="affine"===t.type?a>0?s.mixedAdd(n[a-1>>1]):s.mixedAdd(n[-a-1>>1].neg()):a>0?s.add(n[a-1>>1]):s.add(n[-a-1>>1].neg())}return"affine"===t.type?s.toP():s},Bt.prototype._wnafMulAdd=function(t,e,r,i,n){var o,s,h,u=this._wnafT1,a=this._wnafT2,f=this._wnafT3,l=0;for(o=0;o<i;o++){var d=(h=e[o])._getNAFPoints(t);u[o]=d.wnd,a[o]=d.points}for(o=i-1;o>=1;o-=2){var c=o-1,p=o;if(1===u[c]&&1===u[p]){var m=[e[c],null,null,e[p]];0===e[c].y.cmp(e[p].y)?(m[1]=e[c].add(e[p]),m[2]=e[c].toJ().mixedAdd(e[p].neg())):0===e[c].y.cmp(e[p].y.redNeg())?(m[1]=e[c].toJ().mixedAdd(e[p]),m[2]=e[c].add(e[p].neg())):(m[1]=e[c].toJ().mixedAdd(e[p]),m[2]=e[c].toJ().mixedAdd(e[p].neg()));var v=[-3,-1,-5,-7,0,7,5,1,3],g=Et(r[c],r[p]);for(l=Math.max(g[0].length,l),f[c]=new Array(l),f[p]=new Array(l),s=0;s<l;s++){var y=0|g[0][s],w=0|g[1][s];f[c][s]=v[3*(y+1)+(w+1)],f[p][s]=0,a[c]=m}}else f[c]=kt(r[c],u[c],this._bitLength),f[p]=kt(r[p],u[p],this._bitLength),l=Math.max(f[c].length,l),l=Math.max(f[p].length,l)}var M=this.jpoint(null,null,null),b=this._wnafT4;for(o=l;o>=0;o--){for(var _=0;o>=0;){var S=!0;for(s=0;s<i;s++)b[s]=0|f[s][o],0!==b[s]&&(S=!1);if(!S)break;_++,o--}if(o>=0&&_++,M=M.dblp(_),o<0)break;for(s=0;s<i;s++){var x=b[s];0!==x&&(x>0?h=a[s][x-1>>1]:x<0&&(h=a[s][-x-1>>1].neg()),M="affine"===h.type?M.mixedAdd(h):M.add(h))}}for(o=0;o<i;o++)a[o]=null;return n?M:M.toP()},Bt.BasePoint=Tt,Tt.prototype.eq=function(){throw new Error("Not implemented")},Tt.prototype.validate=function(){return this.curve.validate(this)},Bt.prototype.decodePoint=function(t,e){t=At.toArray(t,e);var r=this.p.byteLength();if((4===t[0]||6===t[0]||7===t[0])&&t.length-1==2*r)return 6===t[0]?Rt(t[t.length-1]%2==0):7===t[0]&&Rt(t[t.length-1]%2==1),this.point(t.slice(1,1+r),t.slice(1+r,1+2*r));if((2===t[0]||3===t[0])&&t.length-1===r)return this.pointFromX(t.slice(1,1+r),3===t[0]);throw new Error("Unknown point format")},Tt.prototype.encodeCompressed=function(t){return this.encode(t,!0)},Tt.prototype._encode=function(t){var e=this.curve.p.byteLength(),r=this.getX().toArray("be",e);return t?[this.getY().isEven()?2:3].concat(r):[4].concat(r,this.getY().toArray("be",e))},Tt.prototype.encode=function(t,e){return At.encode(this._encode(e),t)},Tt.prototype.precompute=function(t){if(this.precomputed)return this;var e={doubles:null,naf:null,beta:null};return e.naf=this._getNAFPoints(8),e.doubles=this._getDoubles(4,t),e.beta=this._getBeta(),this.precomputed=e,this},Tt.prototype._hasDoubles=function(t){if(!this.precomputed)return!1;var e=this.precomputed.doubles;return!!e&&e.points.length>=Math.ceil((t.bitLength()+1)/e.step)},Tt.prototype._getDoubles=function(t,e){if(this.precomputed&&this.precomputed.doubles)return this.precomputed.doubles;for(var r=[this],i=this,n=0;n<e;n+=t){for(var o=0;o<t;o++)i=i.dbl();r.push(i)}return{step:t,points:r}},Tt.prototype._getNAFPoints=function(t){if(this.precomputed&&this.precomputed.naf)return this.precomputed.naf;for(var e=[this],r=(1<<t)-1,i=1===r?null:this.dbl(),n=1;n<r;n++)e[n]=e[n-1].add(i);return{wnd:t,points:e}},Tt.prototype._getBeta=function(){return null},Tt.prototype.dblp=function(t){for(var e=this,r=0;r<t;r++)e=e.dbl();return e};var Pt={exports:{}},Nt={exports:{}};"function"==typeof Object.create?Nt.exports=function(t,e){e&&(t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}))}:Nt.exports=function(t,e){if(e){t.super_=e;var r=function(){};r.prototype=e.prototype,t.prototype=new r,t.prototype.constructor=t}};try{var Ot=require("util");if("function"!=typeof Ot.inherits)throw"";Pt.exports=Ot.inherits}catch(t){Pt.exports=Nt.exports}var Lt=mt,qt=N.exports,zt=Pt.exports,jt=It,Ct=Lt.assert;function Ht(t){jt.call(this,"short",t),this.a=new qt(t.a,16).toRed(this.red),this.b=new qt(t.b,16).toRed(this.red),this.tinv=this.two.redInvm(),this.zeroA=0===this.a.fromRed().cmpn(0),this.threeA=0===this.a.fromRed().sub(this.p).cmpn(-3),this.endo=this._getEndomorphism(t),this._endoWnafT1=new Array(4),this._endoWnafT2=new Array(4)}zt(Ht,jt);var Zt=Ht;function Dt(t,e,r,i){jt.BasePoint.call(this,t,"affine"),null===e&&null===r?(this.x=null,this.y=null,this.inf=!0):(this.x=new qt(e,16),this.y=new qt(r,16),i&&(this.x.forceRed(this.curve.red),this.y.forceRed(this.curve.red)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.inf=!1)}function Kt(t,e,r,i){jt.BasePoint.call(this,t,"jacobian"),null===e&&null===r&&null===i?(this.x=this.curve.one,this.y=this.curve.one,this.z=new qt(0)):(this.x=new qt(e,16),this.y=new qt(r,16),this.z=new qt(i,16)),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.zOne=this.z===this.curve.one}Ht.prototype._getEndomorphism=function(t){if(this.zeroA&&this.g&&this.n&&1===this.p.modn(3)){var e,r;if(t.beta)e=new qt(t.beta,16).toRed(this.red);else{var i=this._getEndoRoots(this.p);e=(e=i[0].cmp(i[1])<0?i[0]:i[1]).toRed(this.red)}if(t.lambda)r=new qt(t.lambda,16);else{var n=this._getEndoRoots(this.n);0===this.g.mul(n[0]).x.cmp(this.g.x.redMul(e))?r=n[0]:(r=n[1],Ct(0===this.g.mul(r).x.cmp(this.g.x.redMul(e))))}return{beta:e,lambda:r,basis:t.basis?t.basis.map((function(t){return{a:new qt(t.a,16),b:new qt(t.b,16)}})):this._getEndoBasis(r)}}},Ht.prototype._getEndoRoots=function(t){var e=t===this.p?this.red:qt.mont(t),r=new qt(2).toRed(e).redInvm(),i=r.redNeg(),n=new qt(3).toRed(e).redNeg().redSqrt().redMul(r);return[i.redAdd(n).fromRed(),i.redSub(n).fromRed()]},Ht.prototype._getEndoBasis=function(t){for(var e,r,i,n,o,s,h,u,a,f=this.n.ushrn(Math.floor(this.n.bitLength()/2)),l=t,d=this.n.clone(),c=new qt(1),p=new qt(0),m=new qt(0),v=new qt(1),g=0;0!==l.cmpn(0);){var y=d.div(l);u=d.sub(y.mul(l)),a=m.sub(y.mul(c));var w=v.sub(y.mul(p));if(!i&&u.cmp(f)<0)e=h.neg(),r=c,i=u.neg(),n=a;else if(i&&2==++g)break;h=u,d=l,l=u,m=c,c=a,v=p,p=w}o=u.neg(),s=a;var M=i.sqr().add(n.sqr());return o.sqr().add(s.sqr()).cmp(M)>=0&&(o=e,s=r),i.negative&&(i=i.neg(),n=n.neg()),o.negative&&(o=o.neg(),s=s.neg()),[{a:i,b:n},{a:o,b:s}]},Ht.prototype._endoSplit=function(t){var e=this.endo.basis,r=e[0],i=e[1],n=i.b.mul(t).divRound(this.n),o=r.b.neg().mul(t).divRound(this.n),s=n.mul(r.a),h=o.mul(i.a),u=n.mul(r.b),a=o.mul(i.b);return{k1:t.sub(s).sub(h),k2:u.add(a).neg()}},Ht.prototype.pointFromX=function(t,e){(t=new qt(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr().redMul(t).redIAdd(t.redMul(this.a)).redIAdd(this.b),i=r.redSqrt();if(0!==i.redSqr().redSub(r).cmp(this.zero))throw new Error("invalid point");var n=i.fromRed().isOdd();return(e&&!n||!e&&n)&&(i=i.redNeg()),this.point(t,i)},Ht.prototype.validate=function(t){if(t.inf)return!0;var e=t.x,r=t.y,i=this.a.redMul(e),n=e.redSqr().redMul(e).redIAdd(i).redIAdd(this.b);return 0===r.redSqr().redISub(n).cmpn(0)},Ht.prototype._endoWnafMulAdd=function(t,e,r){for(var i=this._endoWnafT1,n=this._endoWnafT2,o=0;o<t.length;o++){var s=this._endoSplit(e[o]),h=t[o],u=h._getBeta();s.k1.negative&&(s.k1.ineg(),h=h.neg(!0)),s.k2.negative&&(s.k2.ineg(),u=u.neg(!0)),i[2*o]=h,i[2*o+1]=u,n[2*o]=s.k1,n[2*o+1]=s.k2}for(var a=this._wnafMulAdd(1,i,n,2*o,r),f=0;f<2*o;f++)i[f]=null,n[f]=null;return a},zt(Dt,jt.BasePoint),Ht.prototype.point=function(t,e,r){return new Dt(this,t,e,r)},Ht.prototype.pointFromJSON=function(t,e){return Dt.fromJSON(this,t,e)},Dt.prototype._getBeta=function(){if(this.curve.endo){var t=this.precomputed;if(t&&t.beta)return t.beta;var e=this.curve.point(this.x.redMul(this.curve.endo.beta),this.y);if(t){var r=this.curve,i=function(t){return r.point(t.x.redMul(r.endo.beta),t.y)};t.beta=e,e.precomputed={beta:null,naf:t.naf&&{wnd:t.naf.wnd,points:t.naf.points.map(i)},doubles:t.doubles&&{step:t.doubles.step,points:t.doubles.points.map(i)}}}return e}},Dt.prototype.toJSON=function(){return this.precomputed?[this.x,this.y,this.precomputed&&{doubles:this.precomputed.doubles&&{step:this.precomputed.doubles.step,points:this.precomputed.doubles.points.slice(1)},naf:this.precomputed.naf&&{wnd:this.precomputed.naf.wnd,points:this.precomputed.naf.points.slice(1)}}]:[this.x,this.y]},Dt.fromJSON=function(t,e,r){"string"==typeof e&&(e=JSON.parse(e));var i=t.point(e[0],e[1],r);if(!e[2])return i;function n(e){return t.point(e[0],e[1],r)}var o=e[2];return i.precomputed={beta:null,doubles:o.doubles&&{step:o.doubles.step,points:[i].concat(o.doubles.points.map(n))},naf:o.naf&&{wnd:o.naf.wnd,points:[i].concat(o.naf.points.map(n))}},i},Dt.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+">"},Dt.prototype.isInfinity=function(){return this.inf},Dt.prototype.add=function(t){if(this.inf)return t;if(t.inf)return this;if(this.eq(t))return this.dbl();if(this.neg().eq(t))return this.curve.point(null,null);if(0===this.x.cmp(t.x))return this.curve.point(null,null);var e=this.y.redSub(t.y);0!==e.cmpn(0)&&(e=e.redMul(this.x.redSub(t.x).redInvm()));var r=e.redSqr().redISub(this.x).redISub(t.x),i=e.redMul(this.x.redSub(r)).redISub(this.y);return this.curve.point(r,i)},Dt.prototype.dbl=function(){if(this.inf)return this;var t=this.y.redAdd(this.y);if(0===t.cmpn(0))return this.curve.point(null,null);var e=this.curve.a,r=this.x.redSqr(),i=t.redInvm(),n=r.redAdd(r).redIAdd(r).redIAdd(e).redMul(i),o=n.redSqr().redISub(this.x.redAdd(this.x)),s=n.redMul(this.x.redSub(o)).redISub(this.y);return this.curve.point(o,s)},Dt.prototype.getX=function(){return this.x.fromRed()},Dt.prototype.getY=function(){return this.y.fromRed()},Dt.prototype.mul=function(t){return t=new qt(t,16),this.isInfinity()?this:this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve.endo?this.curve._endoWnafMulAdd([this],[t]):this.curve._wnafMul(this,t)},Dt.prototype.mulAdd=function(t,e,r){var i=[this,e],n=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n):this.curve._wnafMulAdd(1,i,n,2)},Dt.prototype.jmulAdd=function(t,e,r){var i=[this,e],n=[t,r];return this.curve.endo?this.curve._endoWnafMulAdd(i,n,!0):this.curve._wnafMulAdd(1,i,n,2,!0)},Dt.prototype.eq=function(t){return this===t||this.inf===t.inf&&(this.inf||0===this.x.cmp(t.x)&&0===this.y.cmp(t.y))},Dt.prototype.neg=function(t){if(this.inf)return this;var e=this.curve.point(this.x,this.y.redNeg());if(t&&this.precomputed){var r=this.precomputed,i=function(t){return t.neg()};e.precomputed={naf:r.naf&&{wnd:r.naf.wnd,points:r.naf.points.map(i)},doubles:r.doubles&&{step:r.doubles.step,points:r.doubles.points.map(i)}}}return e},Dt.prototype.toJ=function(){return this.inf?this.curve.jpoint(null,null,null):this.curve.jpoint(this.x,this.y,this.curve.one)},zt(Kt,jt.BasePoint),Ht.prototype.jpoint=function(t,e,r){return new Kt(this,t,e,r)},Kt.prototype.toP=function(){if(this.isInfinity())return this.curve.point(null,null);var t=this.z.redInvm(),e=t.redSqr(),r=this.x.redMul(e),i=this.y.redMul(e).redMul(t);return this.curve.point(r,i)},Kt.prototype.neg=function(){return this.curve.jpoint(this.x,this.y.redNeg(),this.z)},Kt.prototype.add=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.z.redSqr(),r=this.z.redSqr(),i=this.x.redMul(e),n=t.x.redMul(r),o=this.y.redMul(e.redMul(t.z)),s=t.y.redMul(r.redMul(this.z)),h=i.redSub(n),u=o.redSub(s);if(0===h.cmpn(0))return 0!==u.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var a=h.redSqr(),f=a.redMul(h),l=i.redMul(a),d=u.redSqr().redIAdd(f).redISub(l).redISub(l),c=u.redMul(l.redISub(d)).redISub(o.redMul(f)),p=this.z.redMul(t.z).redMul(h);return this.curve.jpoint(d,c,p)},Kt.prototype.mixedAdd=function(t){if(this.isInfinity())return t.toJ();if(t.isInfinity())return this;var e=this.z.redSqr(),r=this.x,i=t.x.redMul(e),n=this.y,o=t.y.redMul(e).redMul(this.z),s=r.redSub(i),h=n.redSub(o);if(0===s.cmpn(0))return 0!==h.cmpn(0)?this.curve.jpoint(null,null,null):this.dbl();var u=s.redSqr(),a=u.redMul(s),f=r.redMul(u),l=h.redSqr().redIAdd(a).redISub(f).redISub(f),d=h.redMul(f.redISub(l)).redISub(n.redMul(a)),c=this.z.redMul(s);return this.curve.jpoint(l,d,c)},Kt.prototype.dblp=function(t){if(0===t)return this;if(this.isInfinity())return this;if(!t)return this.dbl();var e;if(this.curve.zeroA||this.curve.threeA){var r=this;for(e=0;e<t;e++)r=r.dbl();return r}var i=this.curve.a,n=this.curve.tinv,o=this.x,s=this.y,h=this.z,u=h.redSqr().redSqr(),a=s.redAdd(s);for(e=0;e<t;e++){var f=o.redSqr(),l=a.redSqr(),d=l.redSqr(),c=f.redAdd(f).redIAdd(f).redIAdd(i.redMul(u)),p=o.redMul(l),m=c.redSqr().redISub(p.redAdd(p)),v=p.redISub(m),g=c.redMul(v);g=g.redIAdd(g).redISub(d);var y=a.redMul(h);e+1<t&&(u=u.redMul(d)),o=m,h=y,a=g}return this.curve.jpoint(o,a.redMul(n),h)},Kt.prototype.dbl=function(){return this.isInfinity()?this:this.curve.zeroA?this._zeroDbl():this.curve.threeA?this._threeDbl():this._dbl()},Kt.prototype._zeroDbl=function(){var t,e,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),s=this.x.redAdd(n).redSqr().redISub(i).redISub(o);s=s.redIAdd(s);var h=i.redAdd(i).redIAdd(i),u=h.redSqr().redISub(s).redISub(s),a=o.redIAdd(o);a=(a=a.redIAdd(a)).redIAdd(a),t=u,e=h.redMul(s.redISub(u)).redISub(a),r=this.y.redAdd(this.y)}else{var f=this.x.redSqr(),l=this.y.redSqr(),d=l.redSqr(),c=this.x.redAdd(l).redSqr().redISub(f).redISub(d);c=c.redIAdd(c);var p=f.redAdd(f).redIAdd(f),m=p.redSqr(),v=d.redIAdd(d);v=(v=v.redIAdd(v)).redIAdd(v),t=m.redISub(c).redISub(c),e=p.redMul(c.redISub(t)).redISub(v),r=(r=this.y.redMul(this.z)).redIAdd(r)}return this.curve.jpoint(t,e,r)},Kt.prototype._threeDbl=function(){var t,e,r;if(this.zOne){var i=this.x.redSqr(),n=this.y.redSqr(),o=n.redSqr(),s=this.x.redAdd(n).redSqr().redISub(i).redISub(o);s=s.redIAdd(s);var h=i.redAdd(i).redIAdd(i).redIAdd(this.curve.a),u=h.redSqr().redISub(s).redISub(s);t=u;var a=o.redIAdd(o);a=(a=a.redIAdd(a)).redIAdd(a),e=h.redMul(s.redISub(u)).redISub(a),r=this.y.redAdd(this.y)}else{var f=this.z.redSqr(),l=this.y.redSqr(),d=this.x.redMul(l),c=this.x.redSub(f).redMul(this.x.redAdd(f));c=c.redAdd(c).redIAdd(c);var p=d.redIAdd(d),m=(p=p.redIAdd(p)).redAdd(p);t=c.redSqr().redISub(m),r=this.y.redAdd(this.z).redSqr().redISub(l).redISub(f);var v=l.redSqr();v=(v=(v=v.redIAdd(v)).redIAdd(v)).redIAdd(v),e=c.redMul(p.redISub(t)).redISub(v)}return this.curve.jpoint(t,e,r)},Kt.prototype._dbl=function(){var t=this.curve.a,e=this.x,r=this.y,i=this.z,n=i.redSqr().redSqr(),o=e.redSqr(),s=r.redSqr(),h=o.redAdd(o).redIAdd(o).redIAdd(t.redMul(n)),u=e.redAdd(e),a=(u=u.redIAdd(u)).redMul(s),f=h.redSqr().redISub(a.redAdd(a)),l=a.redISub(f),d=s.redSqr();d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var c=h.redMul(l).redISub(d),p=r.redAdd(r).redMul(i);return this.curve.jpoint(f,c,p)},Kt.prototype.trpl=function(){if(!this.curve.zeroA)return this.dbl().add(this);var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr(),i=e.redSqr(),n=t.redAdd(t).redIAdd(t),o=n.redSqr(),s=this.x.redAdd(e).redSqr().redISub(t).redISub(i),h=(s=(s=(s=s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(),u=i.redIAdd(i);u=(u=(u=u.redIAdd(u)).redIAdd(u)).redIAdd(u);var a=n.redIAdd(s).redSqr().redISub(o).redISub(h).redISub(u),f=e.redMul(a);f=(f=f.redIAdd(f)).redIAdd(f);var l=this.x.redMul(h).redISub(f);l=(l=l.redIAdd(l)).redIAdd(l);var d=this.y.redMul(a.redMul(u.redISub(a)).redISub(s.redMul(h)));d=(d=(d=d.redIAdd(d)).redIAdd(d)).redIAdd(d);var c=this.z.redAdd(s).redSqr().redISub(r).redISub(h);return this.curve.jpoint(l,d,c)},Kt.prototype.mul=function(t,e){return t=new qt(t,e),this.curve._wnafMul(this,t)},Kt.prototype.eq=function(t){if("affine"===t.type)return this.eq(t.toJ());if(this===t)return!0;var e=this.z.redSqr(),r=t.z.redSqr();if(0!==this.x.redMul(r).redISub(t.x.redMul(e)).cmpn(0))return!1;var i=e.redMul(this.z),n=r.redMul(t.z);return 0===this.y.redMul(n).redISub(t.y.redMul(i)).cmpn(0)},Kt.prototype.eqXToP=function(t){var e=this.z.redSqr(),r=t.toRed(this.curve.red).redMul(e);if(0===this.x.cmp(r))return!0;for(var i=t.clone(),n=this.curve.redN.redMul(e);;){if(i.iadd(this.curve.n),i.cmp(this.curve.p)>=0)return!1;if(r.redIAdd(n),0===this.x.cmp(r))return!0}},Kt.prototype.inspect=function(){return this.isInfinity()?"<EC JPoint Infinity>":"<EC JPoint x: "+this.x.toString(16,2)+" y: "+this.y.toString(16,2)+" z: "+this.z.toString(16,2)+">"},Kt.prototype.isInfinity=function(){return 0===this.z.cmpn(0)};var Ut=N.exports,Ft=Pt.exports,Wt=It,Vt=mt;function Jt(t){Wt.call(this,"mont",t),this.a=new Ut(t.a,16).toRed(this.red),this.b=new Ut(t.b,16).toRed(this.red),this.i4=new Ut(4).toRed(this.red).redInvm(),this.two=new Ut(2).toRed(this.red),this.a24=this.i4.redMul(this.a.redAdd(this.two))}Ft(Jt,Wt);var Xt=Jt;function $t(t,e,r){Wt.BasePoint.call(this,t,"projective"),null===e&&null===r?(this.x=this.curve.one,this.z=this.curve.zero):(this.x=new Ut(e,16),this.z=new Ut(r,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)))}Jt.prototype.validate=function(t){var e=t.normalize().x,r=e.redSqr(),i=r.redMul(e).redAdd(r.redMul(this.a)).redAdd(e);return 0===i.redSqrt().redSqr().cmp(i)},Ft($t,Wt.BasePoint),Jt.prototype.decodePoint=function(t,e){return this.point(Vt.toArray(t,e),1)},Jt.prototype.point=function(t,e){return new $t(this,t,e)},Jt.prototype.pointFromJSON=function(t){return $t.fromJSON(this,t)},$t.prototype.precompute=function(){},$t.prototype._encode=function(){return this.getX().toArray("be",this.curve.p.byteLength())},$t.fromJSON=function(t,e){return new $t(t,e[0],e[1]||t.one)},$t.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},$t.prototype.isInfinity=function(){return 0===this.z.cmpn(0)},$t.prototype.dbl=function(){var t=this.x.redAdd(this.z).redSqr(),e=this.x.redSub(this.z).redSqr(),r=t.redSub(e),i=t.redMul(e),n=r.redMul(e.redAdd(this.curve.a24.redMul(r)));return this.curve.point(i,n)},$t.prototype.add=function(){throw new Error("Not supported on Montgomery curve")},$t.prototype.diffAdd=function(t,e){var r=this.x.redAdd(this.z),i=this.x.redSub(this.z),n=t.x.redAdd(t.z),o=t.x.redSub(t.z).redMul(r),s=n.redMul(i),h=e.z.redMul(o.redAdd(s).redSqr()),u=e.x.redMul(o.redISub(s).redSqr());return this.curve.point(h,u)},$t.prototype.mul=function(t){for(var e=t.clone(),r=this,i=this.curve.point(null,null),n=[];0!==e.cmpn(0);e.iushrn(1))n.push(e.andln(1));for(var o=n.length-1;o>=0;o--)0===n[o]?(r=r.diffAdd(i,this),i=i.dbl()):(i=r.diffAdd(i,this),r=r.dbl());return i},$t.prototype.mulAdd=function(){throw new Error("Not supported on Montgomery curve")},$t.prototype.jumlAdd=function(){throw new Error("Not supported on Montgomery curve")},$t.prototype.eq=function(t){return 0===this.getX().cmp(t.getX())},$t.prototype.normalize=function(){return this.x=this.x.redMul(this.z.redInvm()),this.z=this.curve.one,this},$t.prototype.getX=function(){return this.normalize(),this.x.fromRed()};var Gt=mt,Yt=N.exports,Qt=Pt.exports,te=It,ee=Gt.assert;function re(t){this.twisted=1!=(0|t.a),this.mOneA=this.twisted&&-1==(0|t.a),this.extended=this.mOneA,te.call(this,"edwards",t),this.a=new Yt(t.a,16).umod(this.red.m),this.a=this.a.toRed(this.red),this.c=new Yt(t.c,16).toRed(this.red),this.c2=this.c.redSqr(),this.d=new Yt(t.d,16).toRed(this.red),this.dd=this.d.redAdd(this.d),ee(!this.twisted||0===this.c.fromRed().cmpn(1)),this.oneC=1==(0|t.c)}Qt(re,te);var ie=re;function ne(t,e,r,i,n){te.BasePoint.call(this,t,"projective"),null===e&&null===r&&null===i?(this.x=this.curve.zero,this.y=this.curve.one,this.z=this.curve.one,this.t=this.curve.zero,this.zOne=!0):(this.x=new Yt(e,16),this.y=new Yt(r,16),this.z=i?new Yt(i,16):this.curve.one,this.t=n&&new Yt(n,16),this.x.red||(this.x=this.x.toRed(this.curve.red)),this.y.red||(this.y=this.y.toRed(this.curve.red)),this.z.red||(this.z=this.z.toRed(this.curve.red)),this.t&&!this.t.red&&(this.t=this.t.toRed(this.curve.red)),this.zOne=this.z===this.curve.one,this.curve.extended&&!this.t&&(this.t=this.x.redMul(this.y),this.zOne||(this.t=this.t.redMul(this.z.redInvm()))))}re.prototype._mulA=function(t){return this.mOneA?t.redNeg():this.a.redMul(t)},re.prototype._mulC=function(t){return this.oneC?t:this.c.redMul(t)},re.prototype.jpoint=function(t,e,r,i){return this.point(t,e,r,i)},re.prototype.pointFromX=function(t,e){(t=new Yt(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr(),i=this.c2.redSub(this.a.redMul(r)),n=this.one.redSub(this.c2.redMul(this.d).redMul(r)),o=i.redMul(n.redInvm()),s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");var h=s.fromRed().isOdd();return(e&&!h||!e&&h)&&(s=s.redNeg()),this.point(t,s)},re.prototype.pointFromY=function(t,e){(t=new Yt(t,16)).red||(t=t.toRed(this.red));var r=t.redSqr(),i=r.redSub(this.c2),n=r.redMul(this.d).redMul(this.c2).redSub(this.a),o=i.redMul(n.redInvm());if(0===o.cmp(this.zero)){if(e)throw new Error("invalid point");return this.point(this.zero,t)}var s=o.redSqrt();if(0!==s.redSqr().redSub(o).cmp(this.zero))throw new Error("invalid point");return s.fromRed().isOdd()!==e&&(s=s.redNeg()),this.point(s,t)},re.prototype.validate=function(t){if(t.isInfinity())return!0;t.normalize();var e=t.x.redSqr(),r=t.y.redSqr(),i=e.redMul(this.a).redAdd(r),n=this.c2.redMul(this.one.redAdd(this.d.redMul(e).redMul(r)));return 0===i.cmp(n)},Qt(ne,te.BasePoint),re.prototype.pointFromJSON=function(t){return ne.fromJSON(this,t)},re.prototype.point=function(t,e,r,i){return new ne(this,t,e,r,i)},ne.fromJSON=function(t,e){return new ne(t,e[0],e[1],e[2])},ne.prototype.inspect=function(){return this.isInfinity()?"<EC Point Infinity>":"<EC Point x: "+this.x.fromRed().toString(16,2)+" y: "+this.y.fromRed().toString(16,2)+" z: "+this.z.fromRed().toString(16,2)+">"},ne.prototype.isInfinity=function(){return 0===this.x.cmpn(0)&&(0===this.y.cmp(this.z)||this.zOne&&0===this.y.cmp(this.curve.c))},ne.prototype._extDbl=function(){var t=this.x.redSqr(),e=this.y.redSqr(),r=this.z.redSqr();r=r.redIAdd(r);var i=this.curve._mulA(t),n=this.x.redAdd(this.y).redSqr().redISub(t).redISub(e),o=i.redAdd(e),s=o.redSub(r),h=i.redSub(e),u=n.redMul(s),a=o.redMul(h),f=n.redMul(h),l=s.redMul(o);return this.curve.point(u,a,l,f)},ne.prototype._projDbl=function(){var t,e,r,i,n,o,s=this.x.redAdd(this.y).redSqr(),h=this.x.redSqr(),u=this.y.redSqr();if(this.curve.twisted){var a=(i=this.curve._mulA(h)).redAdd(u);this.zOne?(t=s.redSub(h).redSub(u).redMul(a.redSub(this.curve.two)),e=a.redMul(i.redSub(u)),r=a.redSqr().redSub(a).redSub(a)):(n=this.z.redSqr(),o=a.redSub(n).redISub(n),t=s.redSub(h).redISub(u).redMul(o),e=a.redMul(i.redSub(u)),r=a.redMul(o))}else i=h.redAdd(u),n=this.curve._mulC(this.z).redSqr(),o=i.redSub(n).redSub(n),t=this.curve._mulC(s.redISub(i)).redMul(o),e=this.curve._mulC(i).redMul(h.redISub(u)),r=i.redMul(o);return this.curve.point(t,e,r)},ne.prototype.dbl=function(){return this.isInfinity()?this:this.curve.extended?this._extDbl():this._projDbl()},ne.prototype._extAdd=function(t){var e=this.y.redSub(this.x).redMul(t.y.redSub(t.x)),r=this.y.redAdd(this.x).redMul(t.y.redAdd(t.x)),i=this.t.redMul(this.curve.dd).redMul(t.t),n=this.z.redMul(t.z.redAdd(t.z)),o=r.redSub(e),s=n.redSub(i),h=n.redAdd(i),u=r.redAdd(e),a=o.redMul(s),f=h.redMul(u),l=o.redMul(u),d=s.redMul(h);return this.curve.point(a,f,d,l)},ne.prototype._projAdd=function(t){var e,r,i=this.z.redMul(t.z),n=i.redSqr(),o=this.x.redMul(t.x),s=this.y.redMul(t.y),h=this.curve.d.redMul(o).redMul(s),u=n.redSub(h),a=n.redAdd(h),f=this.x.redAdd(this.y).redMul(t.x.redAdd(t.y)).redISub(o).redISub(s),l=i.redMul(u).redMul(f);return this.curve.twisted?(e=i.redMul(a).redMul(s.redSub(this.curve._mulA(o))),r=u.redMul(a)):(e=i.redMul(a).redMul(s.redSub(o)),r=this.curve._mulC(u).redMul(a)),this.curve.point(l,e,r)},ne.prototype.add=function(t){return this.isInfinity()?t:t.isInfinity()?this:this.curve.extended?this._extAdd(t):this._projAdd(t)},ne.prototype.mul=function(t){return this._hasDoubles(t)?this.curve._fixedNafMul(this,t):this.curve._wnafMul(this,t)},ne.prototype.mulAdd=function(t,e,r){return this.curve._wnafMulAdd(1,[this,e],[t,r],2,!1)},ne.prototype.jmulAdd=function(t,e,r){return this.curve._wnafMulAdd(1,[this,e],[t,r],2,!0)},ne.prototype.normalize=function(){if(this.zOne)return this;var t=this.z.redInvm();return this.x=this.x.redMul(t),this.y=this.y.redMul(t),this.t&&(this.t=this.t.redMul(t)),this.z=this.curve.one,this.zOne=!0,this},ne.prototype.neg=function(){return this.curve.point(this.x.redNeg(),this.y,this.z,this.t&&this.t.redNeg())},ne.prototype.getX=function(){return this.normalize(),this.x.fromRed()},ne.prototype.getY=function(){return this.normalize(),this.y.fromRed()},ne.prototype.eq=function(t){return this===t||0===this.getX().cmp(t.getX())&&0===this.getY().cmp(t.getY())},ne.prototype.eqXToP=function(t){var e=t.toRed(this.curve.red).redMul(this.z);if(0===this.x.cmp(e))return!0;for(var r=t.clone(),i=this.curve.redN.redMul(this.z);;){if(r.iadd(this.curve.n),r.cmp(this.curve.p)>=0)return!1;if(e.redIAdd(i),0===this.x.cmp(e))return!0}},ne.prototype.toP=ne.prototype.normalize,ne.prototype.mixedAdd=ne.prototype.add,function(t){var e=t;e.base=It,e.short=Zt,e.mont=Xt,e.edwards=ie}(St);var oe={},se={},he={},ue=vt,ae=Pt.exports;function fe(t,e){return 55296==(64512&t.charCodeAt(e))&&(!(e<0||e+1>=t.length)&&56320==(64512&t.charCodeAt(e+1)))}function le(t){return(t>>>24|t>>>8&65280|t<<8&16711680|(255&t)<<24)>>>0}function de(t){return 1===t.length?"0"+t:t}function ce(t){return 7===t.length?"0"+t:6===t.length?"00"+t:5===t.length?"000"+t:4===t.length?"0000"+t:3===t.length?"00000"+t:2===t.length?"000000"+t:1===t.length?"0000000"+t:t}he.inherits=ae,he.toArray=function(t,e){if(Array.isArray(t))return t.slice();if(!t)return[];var r=[];if("string"==typeof t)if(e){if("hex"===e)for((t=t.replace(/[^a-z0-9]+/gi,"")).length%2!=0&&(t="0"+t),n=0;n<t.length;n+=2)r.push(parseInt(t[n]+t[n+1],16))}else for(var i=0,n=0;n<t.length;n++){var o=t.charCodeAt(n);o<128?r[i++]=o:o<2048?(r[i++]=o>>6|192,r[i++]=63&o|128):fe(t,n)?(o=65536+((1023&o)<<10)+(1023&t.charCodeAt(++n)),r[i++]=o>>18|240,r[i++]=o>>12&63|128,r[i++]=o>>6&63|128,r[i++]=63&o|128):(r[i++]=o>>12|224,r[i++]=o>>6&63|128,r[i++]=63&o|128)}else for(n=0;n<t.length;n++)r[n]=0|t[n];return r},he.toHex=function(t){for(var e="",r=0;r<t.length;r++)e+=de(t[r].toString(16));return e},he.htonl=le,he.toHex32=function(t,e){for(var r="",i=0;i<t.length;i++){var n=t[i];"little"===e&&(n=le(n)),r+=ce(n.toString(16))}return r},he.zero2=de,he.zero8=ce,he.join32=function(t,e,r,i){var n=r-e;ue(n%4==0);for(var o=new Array(n/4),s=0,h=e;s<o.length;s++,h+=4){var u;u="big"===i?t[h]<<24|t[h+1]<<16|t[h+2]<<8|t[h+3]:t[h+3]<<24|t[h+2]<<16|t[h+1]<<8|t[h],o[s]=u>>>0}return o},he.split32=function(t,e){for(var r=new Array(4*t.length),i=0,n=0;i<t.length;i++,n+=4){var o=t[i];"big"===e?(r[n]=o>>>24,r[n+1]=o>>>16&255,r[n+2]=o>>>8&255,r[n+3]=255&o):(r[n+3]=o>>>24,r[n+2]=o>>>16&255,r[n+1]=o>>>8&255,r[n]=255&o)}return r},he.rotr32=function(t,e){return t>>>e|t<<32-e},he.rotl32=function(t,e){return t<<e|t>>>32-e},he.sum32=function(t,e){return t+e>>>0},he.sum32_3=function(t,e,r){return t+e+r>>>0},he.sum32_4=function(t,e,r,i){return t+e+r+i>>>0},he.sum32_5=function(t,e,r,i,n){return t+e+r+i+n>>>0},he.sum64=function(t,e,r,i){var n=t[e],o=i+t[e+1]>>>0,s=(o<i?1:0)+r+n;t[e]=s>>>0,t[e+1]=o},he.sum64_hi=function(t,e,r,i){return(e+i>>>0<e?1:0)+t+r>>>0},he.sum64_lo=function(t,e,r,i){return e+i>>>0},he.sum64_4_hi=function(t,e,r,i,n,o,s,h){var u=0,a=e;return u+=(a=a+i>>>0)<e?1:0,u+=(a=a+o>>>0)<o?1:0,t+r+n+s+(u+=(a=a+h>>>0)<h?1:0)>>>0},he.sum64_4_lo=function(t,e,r,i,n,o,s,h){return e+i+o+h>>>0},he.sum64_5_hi=function(t,e,r,i,n,o,s,h,u,a){var f=0,l=e;return f+=(l=l+i>>>0)<e?1:0,f+=(l=l+o>>>0)<o?1:0,f+=(l=l+h>>>0)<h?1:0,t+r+n+s+u+(f+=(l=l+a>>>0)<a?1:0)>>>0},he.sum64_5_lo=function(t,e,r,i,n,o,s,h,u,a){return e+i+o+h+a>>>0},he.rotr64_hi=function(t,e,r){return(e<<32-r|t>>>r)>>>0},he.rotr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0},he.shr64_hi=function(t,e,r){return t>>>r},he.shr64_lo=function(t,e,r){return(t<<32-r|e>>>r)>>>0};var pe={},me=he,ve=vt;function ge(){this.pending=null,this.pendingTotal=0,this.blockSize=this.constructor.blockSize,this.outSize=this.constructor.outSize,this.hmacStrength=this.constructor.hmacStrength,this.padLength=this.constructor.padLength/8,this.endian="big",this._delta8=this.blockSize/8,this._delta32=this.blockSize/32}pe.BlockHash=ge,ge.prototype.update=function(t,e){if(t=me.toArray(t,e),this.pending?this.pending=this.pending.concat(t):this.pending=t,this.pendingTotal+=t.length,this.pending.length>=this._delta8){var r=(t=this.pending).length%this._delta8;this.pending=t.slice(t.length-r,t.length),0===this.pending.length&&(this.pending=null),t=me.join32(t,0,t.length-r,this.endian);for(var i=0;i<t.length;i+=this._delta32)this._update(t,i,i+this._delta32)}return this},ge.prototype.digest=function(t){return this.update(this._pad()),ve(null===this.pending),this._digest(t)},ge.prototype._pad=function(){var t=this.pendingTotal,e=this._delta8,r=e-(t+this.padLength)%e,i=new Array(r+this.padLength);i[0]=128;for(var n=1;n<r;n++)i[n]=0;if(t<<=3,"big"===this.endian){for(var o=8;o<this.padLength;o++)i[n++]=0;i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=t>>>24&255,i[n++]=t>>>16&255,i[n++]=t>>>8&255,i[n++]=255&t}else for(i[n++]=255&t,i[n++]=t>>>8&255,i[n++]=t>>>16&255,i[n++]=t>>>24&255,i[n++]=0,i[n++]=0,i[n++]=0,i[n++]=0,o=8;o<this.padLength;o++)i[n++]=0;return i};var ye={},we={},Me=he.rotr32;function be(t,e,r){return t&e^~t&r}function _e(t,e,r){return t&e^t&r^e&r}function Se(t,e,r){return t^e^r}we.ft_1=function(t,e,r,i){return 0===t?be(e,r,i):1===t||3===t?Se(e,r,i):2===t?_e(e,r,i):void 0},we.ch32=be,we.maj32=_e,we.p32=Se,we.s0_256=function(t){return Me(t,2)^Me(t,13)^Me(t,22)},we.s1_256=function(t){return Me(t,6)^Me(t,11)^Me(t,25)},we.g0_256=function(t){return Me(t,7)^Me(t,18)^t>>>3},we.g1_256=function(t){return Me(t,17)^Me(t,19)^t>>>10};var xe=he,Ae=pe,ke=we,Ee=xe.rotl32,Re=xe.sum32,Be=xe.sum32_5,Ie=ke.ft_1,Te=Ae.BlockHash,Pe=[1518500249,1859775393,2400959708,3395469782];function Ne(){if(!(this instanceof Ne))return new Ne;Te.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.W=new Array(80)}xe.inherits(Ne,Te);var Oe=Ne;Ne.blockSize=512,Ne.outSize=160,Ne.hmacStrength=80,Ne.padLength=64,Ne.prototype._update=function(t,e){for(var r=this.W,i=0;i<16;i++)r[i]=t[e+i];for(;i<r.length;i++)r[i]=Ee(r[i-3]^r[i-8]^r[i-14]^r[i-16],1);var n=this.h[0],o=this.h[1],s=this.h[2],h=this.h[3],u=this.h[4];for(i=0;i<r.length;i++){var a=~~(i/20),f=Be(Ee(n,5),Ie(a,o,s,h),u,r[i],Pe[a]);u=h,h=s,s=Ee(o,30),o=n,n=f}this.h[0]=Re(this.h[0],n),this.h[1]=Re(this.h[1],o),this.h[2]=Re(this.h[2],s),this.h[3]=Re(this.h[3],h),this.h[4]=Re(this.h[4],u)},Ne.prototype._digest=function(t){return"hex"===t?xe.toHex32(this.h,"big"):xe.split32(this.h,"big")};var Le=he,qe=pe,ze=we,je=vt,Ce=Le.sum32,He=Le.sum32_4,Ze=Le.sum32_5,De=ze.ch32,Ke=ze.maj32,Ue=ze.s0_256,Fe=ze.s1_256,We=ze.g0_256,Ve=ze.g1_256,Je=qe.BlockHash,Xe=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function $e(){if(!(this instanceof $e))return new $e;Je.call(this),this.h=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],this.k=Xe,this.W=new Array(64)}Le.inherits($e,Je);var Ge=$e;$e.blockSize=512,$e.outSize=256,$e.hmacStrength=192,$e.padLength=64,$e.prototype._update=function(t,e){for(var r=this.W,i=0;i<16;i++)r[i]=t[e+i];for(;i<r.length;i++)r[i]=He(Ve(r[i-2]),r[i-7],We(r[i-15]),r[i-16]);var n=this.h[0],o=this.h[1],s=this.h[2],h=this.h[3],u=this.h[4],a=this.h[5],f=this.h[6],l=this.h[7];for(je(this.k.length===r.length),i=0;i<r.length;i++){var d=Ze(l,Fe(u),De(u,a,f),this.k[i],r[i]),c=Ce(Ue(n),Ke(n,o,s));l=f,f=a,a=u,u=Ce(h,d),h=s,s=o,o=n,n=Ce(d,c)}this.h[0]=Ce(this.h[0],n),this.h[1]=Ce(this.h[1],o),this.h[2]=Ce(this.h[2],s),this.h[3]=Ce(this.h[3],h),this.h[4]=Ce(this.h[4],u),this.h[5]=Ce(this.h[5],a),this.h[6]=Ce(this.h[6],f),this.h[7]=Ce(this.h[7],l)},$e.prototype._digest=function(t){return"hex"===t?Le.toHex32(this.h,"big"):Le.split32(this.h,"big")};var Ye=he,Qe=Ge;function tr(){if(!(this instanceof tr))return new tr;Qe.call(this),this.h=[3238371032,914150663,812702999,4144912697,4290775857,1750603025,1694076839,3204075428]}Ye.inherits(tr,Qe);var er=tr;tr.blockSize=512,tr.outSize=224,tr.hmacStrength=192,tr.padLength=64,tr.prototype._digest=function(t){return"hex"===t?Ye.toHex32(this.h.slice(0,7),"big"):Ye.split32(this.h.slice(0,7),"big")};var rr=he,ir=pe,nr=vt,or=rr.rotr64_hi,sr=rr.rotr64_lo,hr=rr.shr64_hi,ur=rr.shr64_lo,ar=rr.sum64,fr=rr.sum64_hi,lr=rr.sum64_lo,dr=rr.sum64_4_hi,cr=rr.sum64_4_lo,pr=rr.sum64_5_hi,mr=rr.sum64_5_lo,vr=ir.BlockHash,gr=[1116352408,3609767458,1899447441,602891725,3049323471,3964484399,3921009573,2173295548,961987163,4081628472,1508970993,3053834265,2453635748,2937671579,2870763221,3664609560,3624381080,2734883394,310598401,1164996542,607225278,1323610764,1426881987,3590304994,1925078388,4068182383,2162078206,991336113,2614888103,633803317,3248222580,3479774868,3835390401,2666613458,4022224774,944711139,264347078,2341262773,604807628,2007800933,770255983,1495990901,1249150122,1856431235,1555081692,3175218132,1996064986,2198950837,2554220882,3999719339,2821834349,766784016,2952996808,2566594879,3210313671,3203337956,3336571891,1034457026,3584528711,2466948901,113926993,3758326383,338241895,168717936,666307205,1188179964,773529912,1546045734,1294757372,1522805485,1396182291,2643833823,1695183700,2343527390,1986661051,1014477480,2177026350,1206759142,2456956037,344077627,2730485921,1290863460,2820302411,3158454273,3259730800,3505952657,3345764771,106217008,3516065817,3606008344,3600352804,1432725776,4094571909,1467031594,275423344,851169720,430227734,3100823752,506948616,1363258195,659060556,3750685593,883997877,3785050280,958139571,3318307427,1322822218,3812723403,1537002063,2003034995,1747873779,3602036899,1955562222,1575990012,2024104815,1125592928,2227730452,2716904306,2361852424,442776044,2428436474,593698344,2756734187,3733110249,3204031479,2999351573,3329325298,3815920427,3391569614,3928383900,3515267271,566280711,3940187606,3454069534,4118630271,4000239992,116418474,1914138554,174292421,2731055270,289380356,3203993006,460393269,320620315,685471733,587496836,852142971,1086792851,1017036298,365543100,1126000580,2618297676,1288033470,3409855158,1501505948,4234509866,1607167915,987167468,1816402316,1246189591];function yr(){if(!(this instanceof yr))return new yr;vr.call(this),this.h=[1779033703,4089235720,3144134277,2227873595,1013904242,4271175723,2773480762,1595750129,1359893119,2917565137,2600822924,725511199,528734635,4215389547,1541459225,327033209],this.k=gr,this.W=new Array(160)}rr.inherits(yr,vr);var wr=yr;function Mr(t,e,r,i,n){var o=t&r^~t&n;return o<0&&(o+=4294967296),o}function br(t,e,r,i,n,o){var s=e&i^~e&o;return s<0&&(s+=4294967296),s}function _r(t,e,r,i,n){var o=t&r^t&n^r&n;return o<0&&(o+=4294967296),o}function Sr(t,e,r,i,n,o){var s=e&i^e&o^i&o;return s<0&&(s+=4294967296),s}function xr(t,e){var r=or(t,e,28)^or(e,t,2)^or(e,t,7);return r<0&&(r+=4294967296),r}function Ar(t,e){var r=sr(t,e,28)^sr(e,t,2)^sr(e,t,7);return r<0&&(r+=4294967296),r}function kr(t,e){var r=or(t,e,14)^or(t,e,18)^or(e,t,9);return r<0&&(r+=4294967296),r}function Er(t,e){var r=sr(t,e,14)^sr(t,e,18)^sr(e,t,9);return r<0&&(r+=4294967296),r}function Rr(t,e){var r=or(t,e,1)^or(t,e,8)^hr(t,e,7);return r<0&&(r+=4294967296),r}function Br(t,e){var r=sr(t,e,1)^sr(t,e,8)^ur(t,e,7);return r<0&&(r+=4294967296),r}function Ir(t,e){var r=or(t,e,19)^or(e,t,29)^hr(t,e,6);return r<0&&(r+=4294967296),r}function Tr(t,e){var r=sr(t,e,19)^sr(e,t,29)^ur(t,e,6);return r<0&&(r+=4294967296),r}yr.blockSize=1024,yr.outSize=512,yr.hmacStrength=192,yr.padLength=128,yr.prototype._prepareBlock=function(t,e){for(var r=this.W,i=0;i<32;i++)r[i]=t[e+i];for(;i<r.length;i+=2){var n=Ir(r[i-4],r[i-3]),o=Tr(r[i-4],r[i-3]),s=r[i-14],h=r[i-13],u=Rr(r[i-30],r[i-29]),a=Br(r[i-30],r[i-29]),f=r[i-32],l=r[i-31];r[i]=dr(n,o,s,h,u,a,f,l),r[i+1]=cr(n,o,s,h,u,a,f,l)}},yr.prototype._update=function(t,e){this._prepareBlock(t,e);var r=this.W,i=this.h[0],n=this.h[1],o=this.h[2],s=this.h[3],h=this.h[4],u=this.h[5],a=this.h[6],f=this.h[7],l=this.h[8],d=this.h[9],c=this.h[10],p=this.h[11],m=this.h[12],v=this.h[13],g=this.h[14],y=this.h[15];nr(this.k.length===r.length);for(var w=0;w<r.length;w+=2){var M=g,b=y,_=kr(l,d),S=Er(l,d),x=Mr(l,d,c,p,m),A=br(l,d,c,p,m,v),k=this.k[w],E=this.k[w+1],R=r[w],B=r[w+1],I=pr(M,b,_,S,x,A,k,E,R,B),T=mr(M,b,_,S,x,A,k,E,R,B);M=xr(i,n),b=Ar(i,n),_=_r(i,n,o,s,h),S=Sr(i,n,o,s,h,u);var P=fr(M,b,_,S),N=lr(M,b,_,S);g=m,y=v,m=c,v=p,c=l,p=d,l=fr(a,f,I,T),d=lr(f,f,I,T),a=h,f=u,h=o,u=s,o=i,s=n,i=fr(I,T,P,N),n=lr(I,T,P,N)}ar(this.h,0,i,n),ar(this.h,2,o,s),ar(this.h,4,h,u),ar(this.h,6,a,f),ar(this.h,8,l,d),ar(this.h,10,c,p),ar(this.h,12,m,v),ar(this.h,14,g,y)},yr.prototype._digest=function(t){return"hex"===t?rr.toHex32(this.h,"big"):rr.split32(this.h,"big")};var Pr=he,Nr=wr;function Or(){if(!(this instanceof Or))return new Or;Nr.call(this),this.h=[3418070365,3238371032,1654270250,914150663,2438529370,812702999,355462360,4144912697,1731405415,4290775857,2394180231,1750603025,3675008525,1694076839,1203062813,3204075428]}Pr.inherits(Or,Nr);var Lr=Or;Or.blockSize=1024,Or.outSize=384,Or.hmacStrength=192,Or.padLength=128,Or.prototype._digest=function(t){return"hex"===t?Pr.toHex32(this.h.slice(0,12),"big"):Pr.split32(this.h.slice(0,12),"big")},ye.sha1=Oe,ye.sha224=er,ye.sha256=Ge,ye.sha384=Lr,ye.sha512=wr;var qr={},zr=he,jr=pe,Cr=zr.rotl32,Hr=zr.sum32,Zr=zr.sum32_3,Dr=zr.sum32_4,Kr=jr.BlockHash;function Ur(){if(!(this instanceof Ur))return new Ur;Kr.call(this),this.h=[1732584193,4023233417,2562383102,271733878,3285377520],this.endian="little"}function Fr(t,e,r,i){return t<=15?e^r^i:t<=31?e&r|~e&i:t<=47?(e|~r)^i:t<=63?e&i|r&~i:e^(r|~i)}function Wr(t){return t<=15?0:t<=31?1518500249:t<=47?1859775393:t<=63?2400959708:2840853838}function Vr(t){return t<=15?1352829926:t<=31?1548603684:t<=47?1836072691:t<=63?2053994217:0}zr.inherits(Ur,Kr),qr.ripemd160=Ur,Ur.blockSize=512,Ur.outSize=160,Ur.hmacStrength=192,Ur.padLength=64,Ur.prototype._update=function(t,e){for(var r=this.h[0],i=this.h[1],n=this.h[2],o=this.h[3],s=this.h[4],h=r,u=i,a=n,f=o,l=s,d=0;d<80;d++){var c=Hr(Cr(Dr(r,Fr(d,i,n,o),t[Jr[d]+e],Wr(d)),$r[d]),s);r=s,s=o,o=Cr(n,10),n=i,i=c,c=Hr(Cr(Dr(h,Fr(79-d,u,a,f),t[Xr[d]+e],Vr(d)),Gr[d]),l),h=l,l=f,f=Cr(a,10),a=u,u=c}c=Zr(this.h[1],n,f),this.h[1]=Zr(this.h[2],o,l),this.h[2]=Zr(this.h[3],s,h),this.h[3]=Zr(this.h[4],r,u),this.h[4]=Zr(this.h[0],i,a),this.h[0]=c},Ur.prototype._digest=function(t){return"hex"===t?zr.toHex32(this.h,"little"):zr.split32(this.h,"little")};var Jr=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],Xr=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],$r=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],Gr=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],Yr=he,Qr=vt;function ti(t,e,r){if(!(this instanceof ti))return new ti(t,e,r);this.Hash=t,this.blockSize=t.blockSize/8,this.outSize=t.outSize/8,this.inner=null,this.outer=null,this._init(Yr.toArray(e,r))}var ei=ti;ti.prototype._init=function(t){t.length>this.blockSize&&(t=(new this.Hash).update(t).digest()),Qr(t.length<=this.blockSize);for(var e=t.length;e<this.blockSize;e++)t.push(0);for(e=0;e<t.length;e++)t[e]^=54;for(this.inner=(new this.Hash).update(t),e=0;e<t.length;e++)t[e]^=106;this.outer=(new this.Hash).update(t)},ti.prototype.update=function(t,e){return this.inner.update(t,e),this},ti.prototype.digest=function(t){return this.outer.update(this.inner.digest()),this.outer.digest(t)},function(t){var e=se;e.utils=he,e.common=pe,e.sha=ye,e.ripemd=qr,e.hmac=ei,e.sha1=e.sha.sha1,e.sha256=e.sha.sha256,e.sha224=e.sha.sha224,e.sha384=e.sha.sha384,e.sha512=e.sha.sha512,e.ripemd160=e.ripemd.ripemd160}(),function(t){var e,r=oe,i=se,n=St,o=mt.assert;function s(t){"short"===t.type?this.curve=new n.short(t):"edwards"===t.type?this.curve=new n.edwards(t):this.curve=new n.mont(t),this.g=this.curve.g,this.n=this.curve.n,this.hash=t.hash,o(this.g.validate(),"Invalid curve"),o(this.g.mul(this.n).isInfinity(),"Invalid curve, G*N != O")}function h(t,e){Object.defineProperty(r,t,{configurable:!0,enumerable:!0,get:function(){var i=new s(e);return Object.defineProperty(r,t,{configurable:!0,enumerable:!0,value:i}),i}})}r.PresetCurve=s,h("p192",{type:"short",prime:"p192",p:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",a:"ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",b:"64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",n:"ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",hash:i.sha256,gRed:!1,g:["188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012","07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"]}),h("p224",{type:"short",prime:"p224",p:"ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",a:"ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",b:"b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",n:"ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",hash:i.sha256,gRed:!1,g:["b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21","bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"]}),h("p256",{type:"short",prime:null,p:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",a:"ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",b:"5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",n:"ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",hash:i.sha256,gRed:!1,g:["6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296","4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"]}),h("p384",{type:"short",prime:null,p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",a:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",b:"b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",n:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",hash:i.sha384,gRed:!1,g:["aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7","3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"]}),h("p521",{type:"short",prime:null,p:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",a:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",b:"00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",n:"000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",hash:i.sha512,gRed:!1,g:["000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66","00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"]}),h("curve25519",{type:"mont",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"76d06",b:"1",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:i.sha256,gRed:!1,g:["9"]}),h("ed25519",{type:"edwards",prime:"p25519",p:"7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",a:"-1",c:"1",d:"52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",n:"1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",hash:i.sha256,gRed:!1,g:["216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a","6666666666666666666666666666666666666666666666666666666666666658"]});try{e=require("./precomputed/secp256k1")}catch(t){e=void 0}h("secp256k1",{type:"short",prime:"k256",p:"ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",a:"0",b:"7",n:"ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",h:"1",hash:i.sha256,beta:"7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",lambda:"5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",basis:[{a:"3086d221a7d46bcde86c90e49284eb15",b:"-e4437ed6010e88286f547fa90abfe4c3"},{a:"114ca50f7a8e2f3f657c1108d9d44cfd8",b:"3086d221a7d46bcde86c90e49284eb15"}],gRed:!1,g:["79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798","483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",e]})}();var ri=se,ii=yt,ni=vt;function oi(t){if(!(this instanceof oi))return new oi(t);this.hash=t.hash,this.predResist=!!t.predResist,this.outLen=this.hash.outSize,this.minEntropy=t.minEntropy||this.hash.hmacStrength,this._reseed=null,this.reseedInterval=null,this.K=null,this.V=null;var e=ii.toArray(t.entropy,t.entropyEnc||"hex"),r=ii.toArray(t.nonce,t.nonceEnc||"hex"),i=ii.toArray(t.pers,t.persEnc||"hex");ni(e.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._init(e,r,i)}var si=oi;oi.prototype._init=function(t,e,r){var i=t.concat(e).concat(r);this.K=new Array(this.outLen/8),this.V=new Array(this.outLen/8);for(var n=0;n<this.V.length;n++)this.K[n]=0,this.V[n]=1;this._update(i),this._reseed=1,this.reseedInterval=281474976710656},oi.prototype._hmac=function(){return new ri.hmac(this.hash,this.K)},oi.prototype._update=function(t){var e=this._hmac().update(this.V).update([0]);t&&(e=e.update(t)),this.K=e.digest(),this.V=this._hmac().update(this.V).digest(),t&&(this.K=this._hmac().update(this.V).update([1]).update(t).digest(),this.V=this._hmac().update(this.V).digest())},oi.prototype.reseed=function(t,e,r,i){"string"!=typeof e&&(i=r,r=e,e=null),t=ii.toArray(t,e),r=ii.toArray(r,i),ni(t.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits"),this._update(t.concat(r||[])),this._reseed=1},oi.prototype.generate=function(t,e,r,i){if(this._reseed>this.reseedInterval)throw new Error("Reseed is required");"string"!=typeof e&&(i=r,r=e,e=null),r&&(r=ii.toArray(r,i||"hex"),this._update(r));for(var n=[];n.length<t;)this.V=this._hmac().update(this.V).digest(),n=n.concat(this.V);var o=n.slice(0,t);return this._update(r),this._reseed++,ii.encode(o,e)};var hi=N.exports,ui=mt.assert;function ai(t,e){this.ec=t,this.priv=null,this.pub=null,e.priv&&this._importPrivate(e.priv,e.privEnc),e.pub&&this._importPublic(e.pub,e.pubEnc)}var fi=ai;ai.fromPublic=function(t,e,r){return e instanceof ai?e:new ai(t,{pub:e,pubEnc:r})},ai.fromPrivate=function(t,e,r){return e instanceof ai?e:new ai(t,{priv:e,privEnc:r})},ai.prototype.validate=function(){var t=this.getPublic();return t.isInfinity()?{result:!1,reason:"Invalid public key"}:t.validate()?t.mul(this.ec.curve.n).isInfinity()?{result:!0,reason:null}:{result:!1,reason:"Public key * N != O"}:{result:!1,reason:"Public key is not a point"}},ai.prototype.getPublic=function(t,e){return"string"==typeof t&&(e=t,t=null),this.pub||(this.pub=this.ec.g.mul(this.priv)),e?this.pub.encode(e,t):this.pub},ai.prototype.getPrivate=function(t){return"hex"===t?this.priv.toString(16,2):this.priv},ai.prototype._importPrivate=function(t,e){this.priv=new hi(t,e||16),this.priv=this.priv.umod(this.ec.curve.n)},ai.prototype._importPublic=function(t,e){if(t.x||t.y)return"mont"===this.ec.curve.type?ui(t.x,"Need x coordinate"):"short"!==this.ec.curve.type&&"edwards"!==this.ec.curve.type||ui(t.x&&t.y,"Need both x and y coordinate"),void(this.pub=this.ec.curve.point(t.x,t.y));this.pub=this.ec.curve.decodePoint(t,e)},ai.prototype.derive=function(t){return t.validate()||ui(t.validate(),"public point not validated"),t.mul(this.priv).getX()},ai.prototype.sign=function(t,e,r){return this.ec.sign(t,this,e,r)},ai.prototype.verify=function(t,e){return this.ec.verify(t,e,this)},ai.prototype.inspect=function(){return"<Key priv: "+(this.priv&&this.priv.toString(16,2))+" pub: "+(this.pub&&this.pub.inspect())+" >"};var li=N.exports,di=mt,ci=di.assert;function pi(t,e){if(t instanceof pi)return t;this._importDER(t,e)||(ci(t.r&&t.s,"Signature without r or s"),this.r=new li(t.r,16),this.s=new li(t.s,16),void 0===t.recoveryParam?this.recoveryParam=null:this.recoveryParam=t.recoveryParam)}var mi=pi;function vi(){this.place=0}function gi(t,e){var r=t[e.place++];if(!(128&r))return r;var i=15&r;if(0===i||i>4)return!1;for(var n=0,o=0,s=e.place;o<i;o++,s++)n<<=8,n|=t[s],n>>>=0;return!(n<=127)&&(e.place=s,n)}function yi(t){for(var e=0,r=t.length-1;!t[e]&&!(128&t[e+1])&&e<r;)e++;return 0===e?t:t.slice(e)}function wi(t,e){if(e<128)t.push(e);else{var r=1+(Math.log(e)/Math.LN2>>>3);for(t.push(128|r);--r;)t.push(e>>>(r<<3)&255);t.push(e)}}pi.prototype._importDER=function(t,e){t=di.toArray(t,e);var r=new vi;if(48!==t[r.place++])return!1;var i=gi(t,r);if(!1===i)return!1;if(i+r.place!==t.length)return!1;if(2!==t[r.place++])return!1;var n=gi(t,r);if(!1===n)return!1;var o=t.slice(r.place,n+r.place);if(r.place+=n,2!==t[r.place++])return!1;var s=gi(t,r);if(!1===s)return!1;if(t.length!==s+r.place)return!1;var h=t.slice(r.place,s+r.place);if(0===o[0]){if(!(128&o[1]))return!1;o=o.slice(1)}if(0===h[0]){if(!(128&h[1]))return!1;h=h.slice(1)}return this.r=new li(o),this.s=new li(h),this.recoveryParam=null,!0},pi.prototype.toDER=function(t){var e=this.r.toArray(),r=this.s.toArray();for(128&e[0]&&(e=[0].concat(e)),128&r[0]&&(r=[0].concat(r)),e=yi(e),r=yi(r);!(r[0]||128&r[1]);)r=r.slice(1);var i=[2];wi(i,e.length),(i=i.concat(e)).push(2),wi(i,r.length);var n=i.concat(r),o=[48];return wi(o,n.length),o=o.concat(n),di.encode(o,t)};var Mi=N.exports,bi=si,_i=mt,Si=oe,xi=Mt.exports,Ai=_i.assert,ki=fi,Ei=mi;function Ri(t){if(!(this instanceof Ri))return new Ri(t);"string"==typeof t&&(Ai(Object.prototype.hasOwnProperty.call(Si,t),"Unknown curve "+t),t=Si[t]),t instanceof Si.PresetCurve&&(t={curve:t}),this.curve=t.curve.curve,this.n=this.curve.n,this.nh=this.n.ushrn(1),this.g=this.curve.g,this.g=t.curve.g,this.g.precompute(t.curve.n.bitLength()+1),this.hash=t.hash||t.curve.hash}var Bi=Ri;Ri.prototype.keyPair=function(t){return new ki(this,t)},Ri.prototype.keyFromPrivate=function(t,e){return ki.fromPrivate(this,t,e)},Ri.prototype.keyFromPublic=function(t,e){return ki.fromPublic(this,t,e)},Ri.prototype.genKeyPair=function(t){t||(t={});for(var e=new bi({hash:this.hash,pers:t.pers,persEnc:t.persEnc||"utf8",entropy:t.entropy||xi(this.hash.hmacStrength),entropyEnc:t.entropy&&t.entropyEnc||"utf8",nonce:this.n.toArray()}),r=this.n.byteLength(),i=this.n.sub(new Mi(2));;){var n=new Mi(e.generate(r));if(!(n.cmp(i)>0))return n.iaddn(1),this.keyFromPrivate(n)}},Ri.prototype._truncateToN=function(t,e){var r=8*t.byteLength()-this.n.bitLength();return r>0&&(t=t.ushrn(r)),!e&&t.cmp(this.n)>=0?t.sub(this.n):t},Ri.prototype.sign=function(t,e,r,i){"object"===s(r)&&(i=r,r=null),i||(i={}),e=this.keyFromPrivate(e,r),t=this._truncateToN(new Mi(t,16));for(var n=this.n.byteLength(),o=e.getPrivate().toArray("be",n),h=t.toArray("be",n),u=new bi({hash:this.hash,entropy:o,nonce:h,pers:i.pers,persEnc:i.persEnc||"utf8"}),a=this.n.sub(new Mi(1)),f=0;;f++){var l=i.k?i.k(f):new Mi(u.generate(this.n.byteLength()));if(!((l=this._truncateToN(l,!0)).cmpn(1)<=0||l.cmp(a)>=0)){var d=this.g.mul(l);if(!d.isInfinity()){var c=d.getX(),p=c.umod(this.n);if(0!==p.cmpn(0)){var m=l.invm(this.n).mul(p.mul(e.getPrivate()).iadd(t));if(0!==(m=m.umod(this.n)).cmpn(0)){var v=(d.getY().isOdd()?1:0)|(0!==c.cmp(p)?2:0);return i.canonical&&m.cmp(this.nh)>0&&(m=this.n.sub(m),v^=1),new Ei({r:p,s:m,recoveryParam:v})}}}}}},Ri.prototype.verify=function(t,e,r,i){t=this._truncateToN(new Mi(t,16)),r=this.keyFromPublic(r,i);var n=(e=new Ei(e,"hex")).r,o=e.s;if(n.cmpn(1)<0||n.cmp(this.n)>=0)return!1;if(o.cmpn(1)<0||o.cmp(this.n)>=0)return!1;var s,h=o.invm(this.n),u=h.mul(t).umod(this.n),a=h.mul(n).umod(this.n);return this.curve._maxwellTrick?!(s=this.g.jmulAdd(u,r.getPublic(),a)).isInfinity()&&s.eqXToP(n):!(s=this.g.mulAdd(u,r.getPublic(),a)).isInfinity()&&0===s.getX().umod(this.n).cmp(n)},Ri.prototype.recoverPubKey=function(t,e,r,i){Ai((3&r)===r,"The recovery param is more than two bits"),e=new Ei(e,i);var n=this.n,o=new Mi(t),s=e.r,h=e.s,u=1&r,a=r>>1;if(s.cmp(this.curve.p.umod(this.curve.n))>=0&&a)throw new Error("Unable to find sencond key candinate");s=a?this.curve.pointFromX(s.add(this.curve.n),u):this.curve.pointFromX(s,u);var f=e.r.invm(n),l=n.sub(o).mul(f).umod(n),d=h.mul(f).umod(n);return this.g.mulAdd(l,s,d)},Ri.prototype.getKeyRecoveryParam=function(t,e,r,i){if(null!==(e=new Ei(e,i)).recoveryParam)return e.recoveryParam;for(var n=0;n<4;n++){var o;try{o=this.recoverPubKey(t,e,n)}catch(t){continue}if(o.eq(r))return n}throw new Error("Unable to find valid recovery factor")};var Ii=mt,Ti=Ii.assert,Pi=Ii.parseBytes,Ni=Ii.cachedProperty;function Oi(t,e){this.eddsa=t,this._secret=Pi(e.secret),t.isPoint(e.pub)?this._pub=e.pub:this._pubBytes=Pi(e.pub)}Oi.fromPublic=function(t,e){return e instanceof Oi?e:new Oi(t,{pub:e})},Oi.fromSecret=function(t,e){return e instanceof Oi?e:new Oi(t,{secret:e})},Oi.prototype.secret=function(){return this._secret},Ni(Oi,"pubBytes",(function(){return this.eddsa.encodePoint(this.pub())})),Ni(Oi,"pub",(function(){return this._pubBytes?this.eddsa.decodePoint(this._pubBytes):this.eddsa.g.mul(this.priv())})),Ni(Oi,"privBytes",(function(){var t=this.eddsa,e=this.hash(),r=t.encodingLength-1,i=e.slice(0,t.encodingLength);return i[0]&=248,i[r]&=127,i[r]|=64,i})),Ni(Oi,"priv",(function(){return this.eddsa.decodeInt(this.privBytes())})),Ni(Oi,"hash",(function(){return this.eddsa.hash().update(this.secret()).digest()})),Ni(Oi,"messagePrefix",(function(){return this.hash().slice(this.eddsa.encodingLength)})),Oi.prototype.sign=function(t){return Ti(this._secret,"KeyPair can only verify"),this.eddsa.sign(t,this)},Oi.prototype.verify=function(t,e){return this.eddsa.verify(t,e,this)},Oi.prototype.getSecret=function(t){return Ti(this._secret,"KeyPair is public only"),Ii.encode(this.secret(),t)},Oi.prototype.getPublic=function(t){return Ii.encode(this.pubBytes(),t)};var Li=Oi,qi=N.exports,zi=mt,ji=zi.assert,Ci=zi.cachedProperty,Hi=zi.parseBytes;function Zi(t,e){this.eddsa=t,"object"!==s(e)&&(e=Hi(e)),Array.isArray(e)&&(e={R:e.slice(0,t.encodingLength),S:e.slice(t.encodingLength)}),ji(e.R&&e.S,"Signature without R or S"),t.isPoint(e.R)&&(this._R=e.R),e.S instanceof qi&&(this._S=e.S),this._Rencoded=Array.isArray(e.R)?e.R:e.Rencoded,this._Sencoded=Array.isArray(e.S)?e.S:e.Sencoded}Ci(Zi,"S",(function(){return this.eddsa.decodeInt(this.Sencoded())})),Ci(Zi,"R",(function(){return this.eddsa.decodePoint(this.Rencoded())})),Ci(Zi,"Rencoded",(function(){return this.eddsa.encodePoint(this.R())})),Ci(Zi,"Sencoded",(function(){return this.eddsa.encodeInt(this.S())})),Zi.prototype.toBytes=function(){return this.Rencoded().concat(this.Sencoded())},Zi.prototype.toHex=function(){return zi.encode(this.toBytes(),"hex").toUpperCase()};var Di=Zi,Ki=se,Ui=oe,Fi=mt,Wi=Fi.assert,Vi=Fi.parseBytes,Ji=Li,Xi=Di;function $i(t){if(Wi("ed25519"===t,"only tested with ed25519 so far"),!(this instanceof $i))return new $i(t);t=Ui[t].curve,this.curve=t,this.g=t.g,this.g.precompute(t.n.bitLength()+1),this.pointClass=t.point().constructor,this.encodingLength=Math.ceil(t.n.bitLength()/8),this.hash=Ki.sha512}var Gi=$i;$i.prototype.sign=function(t,e){t=Vi(t);var r=this.keyFromSecret(e),i=this.hashInt(r.messagePrefix(),t),n=this.g.mul(i),o=this.encodePoint(n),s=this.hashInt(o,r.pubBytes(),t).mul(r.priv()),h=i.add(s).umod(this.curve.n);return this.makeSignature({R:n,S:h,Rencoded:o})},$i.prototype.verify=function(t,e,r){t=Vi(t),e=this.makeSignature(e);var i=this.keyFromPublic(r),n=this.hashInt(e.Rencoded(),i.pubBytes(),t),o=this.g.mul(e.S());return e.R().add(i.pub().mul(n)).eq(o)},$i.prototype.hashInt=function(){for(var t=this.hash(),e=0;e<arguments.length;e++)t.update(arguments[e]);return Fi.intFromLE(t.digest()).umod(this.curve.n)},$i.prototype.keyFromPublic=function(t){return Ji.fromPublic(this,t)},$i.prototype.keyFromSecret=function(t){return Ji.fromSecret(this,t)},$i.prototype.makeSignature=function(t){return t instanceof Xi?t:new Xi(this,t)},$i.prototype.encodePoint=function(t){var e=t.getY().toArray("le",this.encodingLength);return e[this.encodingLength-1]|=t.getX().isOdd()?128:0,e},$i.prototype.decodePoint=function(t){var e=(t=Fi.parseBytes(t)).length-1,r=t.slice(0,e).concat(-129&t[e]),i=0!=(128&t[e]),n=Fi.intFromLE(r);return this.curve.pointFromY(n,i)},$i.prototype.encodeInt=function(t){return t.toArray("le",this.encodingLength)},$i.prototype.decodeInt=function(t){return Fi.intFromLE(t)},$i.prototype.isPoint=function(t){return t instanceof this.pointClass},function(t){var e=ct;e.version=pt,e.utils=mt,e.rand=Mt.exports,e.curve=St,e.curves=oe,e.ec=Bi,e.eddsa=Gi}();var Yi=new(0,ct.ec)("secp256k1"),Qi=Yi.curve,tn=Qi.n.constructor;function en(t){var e=t[0];switch(e){case 2:case 3:return 33!==t.length?null:function(t,e){var r=new tn(e);if(r.cmp(Qi.p)>=0)return null;var i=(r=r.toRed(Qi.red)).redSqr().redIMul(r).redIAdd(Qi.b).redSqrt();return 3===t!==i.isOdd()&&(i=i.redNeg()),Yi.keyPair({pub:{x:r,y:i}})}(e,t.subarray(1,33));case 4:case 6:case 7:return 65!==t.length?null:function(t,e,r){var i=new tn(e),n=new tn(r);if(i.cmp(Qi.p)>=0||n.cmp(Qi.p)>=0)return null;if(i=i.toRed(Qi.red),n=n.toRed(Qi.red),(6===t||7===t)&&n.isOdd()!==(7===t))return null;var o=i.redSqr().redIMul(i);return n.redSqr().redISub(o.redIAdd(Qi.b)).isZero()?Yi.keyPair({pub:{x:i,y:n}}):null}(e,t.subarray(1,33),t.subarray(33,65));default:return null}}function rn(t,e){for(var r=e.encode(null,33===t.length),i=0;i<t.length;++i)t[i]=r[i]}var nn={contextRandomize:function(){return 0},privateKeyVerify:function(t){var e=new tn(t);return e.cmp(Qi.n)<0&&!e.isZero()?0:1},privateKeyNegate:function(t){var e=new tn(t),r=Qi.n.sub(e).umod(Qi.n).toArrayLike(Uint8Array,"be",32);return t.set(r),0},privateKeyTweakAdd:function(t,e){var r=new tn(e);if(r.cmp(Qi.n)>=0)return 1;if(r.iadd(new tn(t)),r.cmp(Qi.n)>=0&&r.isub(Qi.n),r.isZero())return 1;var i=r.toArrayLike(Uint8Array,"be",32);return t.set(i),0},privateKeyTweakMul:function(t,e){var r=new tn(e);if(r.cmp(Qi.n)>=0||r.isZero())return 1;r.imul(new tn(t)),r.cmp(Qi.n)>=0&&(r=r.umod(Qi.n));var i=r.toArrayLike(Uint8Array,"be",32);return t.set(i),0},publicKeyVerify:function(t){return null===en(t)?1:0},publicKeyCreate:function(t,e){var r=new tn(e);return r.cmp(Qi.n)>=0||r.isZero()?1:(rn(t,Yi.keyFromPrivate(e).getPublic()),0)},publicKeyConvert:function(t,e){var r=en(e);return null===r?1:(rn(t,r.getPublic()),0)},publicKeyNegate:function(t,e){var r=en(e);if(null===r)return 1;var i=r.getPublic();return i.y=i.y.redNeg(),rn(t,i),0},publicKeyCombine:function(t,e){for(var r=new Array(e.length),i=0;i<e.length;++i)if(r[i]=en(e[i]),null===r[i])return 1;for(var n=r[0].getPublic(),o=1;o<r.length;++o)n=n.add(r[o].pub);return n.isInfinity()?2:(rn(t,n),0)},publicKeyTweakAdd:function(t,e,r){var i=en(e);if(null===i)return 1;if((r=new tn(r)).cmp(Qi.n)>=0)return 2;var n=i.getPublic().add(Qi.g.mul(r));return n.isInfinity()?2:(rn(t,n),0)},publicKeyTweakMul:function(t,e,r){var i=en(e);return null===i?1:(r=new tn(r)).cmp(Qi.n)>=0||r.isZero()?2:(rn(t,i.getPublic().mul(r)),0)},signatureNormalize:function(t){var e=new tn(t.subarray(0,32)),r=new tn(t.subarray(32,64));return e.cmp(Qi.n)>=0||r.cmp(Qi.n)>=0?1:(1===r.cmp(Yi.nh)&&t.set(Qi.n.sub(r).toArrayLike(Uint8Array,"be",32),32),0)},signatureExport:function(t,e){var r=e.subarray(0,32),i=e.subarray(32,64);if(new tn(r).cmp(Qi.n)>=0)return 1;if(new tn(i).cmp(Qi.n)>=0)return 1;var n=t.output,o=n.subarray(4,37);o[0]=0,o.set(r,1);for(var s=33,h=0;s>1&&0===o[h]&&!(128&o[h+1]);--s,++h);if(128&(o=o.subarray(h))[0])return 1;if(s>1&&0===o[0]&&!(128&o[1]))return 1;var u=n.subarray(39,72);u[0]=0,u.set(i,1);for(var a=33,f=0;a>1&&0===u[f]&&!(128&u[f+1]);--a,++f);return 128&(u=u.subarray(f))[0]||a>1&&0===u[0]&&!(128&u[1])?1:(t.outputlen=6+s+a,n[0]=48,n[1]=t.outputlen-2,n[2]=2,n[3]=o.length,n.set(o,4),n[4+s]=2,n[5+s]=u.length,n.set(u,6+s),0)},signatureImport:function(t,e){if(e.length<8)return 1;if(e.length>72)return 1;if(48!==e[0])return 1;if(e[1]!==e.length-2)return 1;if(2!==e[2])return 1;var r=e[3];if(0===r)return 1;if(5+r>=e.length)return 1;if(2!==e[4+r])return 1;var i=e[5+r];if(0===i)return 1;if(6+r+i!==e.length)return 1;if(128&e[4])return 1;if(r>1&&0===e[4]&&!(128&e[5]))return 1;if(128&e[r+6])return 1;if(i>1&&0===e[r+6]&&!(128&e[r+7]))return 1;var n=e.subarray(4,4+r);if(33===n.length&&0===n[0]&&(n=n.subarray(1)),n.length>32)return 1;var o=e.subarray(6+r);if(33===o.length&&0===o[0]&&(o=o.slice(1)),o.length>32)throw new Error("S length is too long");var s=new tn(n);s.cmp(Qi.n)>=0&&(s=new tn(0));var h=new tn(e.subarray(6+r));return h.cmp(Qi.n)>=0&&(h=new tn(0)),t.set(s.toArrayLike(Uint8Array,"be",32),0),t.set(h.toArrayLike(Uint8Array,"be",32),32),0},ecdsaSign:function(t,e,r,i,n){if(n){var o=n;n=function(t){var n=o(e,r,null,i,t);if(!(n instanceof Uint8Array&&32===n.length))throw new Error("This is the way");return new tn(n)}}var s,h=new tn(r);if(h.cmp(Qi.n)>=0||h.isZero())return 1;try{s=Yi.sign(e,r,{canonical:!0,k:n,pers:i})}catch(t){return 1}return t.signature.set(s.r.toArrayLike(Uint8Array,"be",32),0),t.signature.set(s.s.toArrayLike(Uint8Array,"be",32),32),t.recid=s.recoveryParam,0},ecdsaVerify:function(t,e,r){var i={r:t.subarray(0,32),s:t.subarray(32,64)},n=new tn(i.r),o=new tn(i.s);if(n.cmp(Qi.n)>=0||o.cmp(Qi.n)>=0)return 1;if(1===o.cmp(Yi.nh)||n.isZero()||o.isZero())return 3;var s=en(r);if(null===s)return 2;var h=s.getPublic();return Yi.verify(e,i,h)?0:3},ecdsaRecover:function(t,e,r,i){var n,o={r:e.slice(0,32),s:e.slice(32,64)},s=new tn(o.r),h=new tn(o.s);if(s.cmp(Qi.n)>=0||h.cmp(Qi.n)>=0)return 1;if(s.isZero()||h.isZero())return 2;try{n=Yi.recoverPubKey(i,o,r)}catch(t){return 2}return rn(t,n),0},ecdh:function(t,e,r,i,n,o,s){var h=en(e);if(null===h)return 1;var u=new tn(r);if(u.cmp(Qi.n)>=0||u.isZero())return 2;var a=h.getPublic().mul(u);if(void 0===n)for(var f=a.encode(null,!0),l=Yi.hash().update(f).digest(),d=0;d<32;++d)t[d]=l[d];else{o||(o=new Uint8Array(32));for(var c=a.getX().toArray("be",32),p=0;p<32;++p)o[p]=c[p];s||(s=new Uint8Array(32));for(var m=a.getY().toArray("be",32),v=0;v<32;++v)s[v]=m[v];var g=n(o,s,i);if(!(g instanceof Uint8Array&&g.length===t.length))return 2;t.set(g)}return 0}},on=function(t){return{contextRandomize:function(e){if(ut(null===e||e instanceof Uint8Array,"Expected seed to be an Uint8Array or null"),null!==e&&at("seed",e,32),1===t.contextRandomize(e))throw new Error(Q)},privateKeyVerify:function(e){return at("private key",e,32),0===t.privateKeyVerify(e)},privateKeyNegate:function(e){switch(at("private key",e,32),t.privateKeyNegate(e)){case 0:return e;case 1:throw new Error($)}},privateKeyTweakAdd:function(e,r){switch(at("private key",e,32),at("tweak",r,32),t.privateKeyTweakAdd(e,r)){case 0:return e;case 1:throw new Error(G)}},privateKeyTweakMul:function(e,r){switch(at("private key",e,32),at("tweak",r,32),t.privateKeyTweakMul(e,r)){case 0:return e;case 1:throw new Error(Y)}},publicKeyVerify:function(e){return at("public key",e,[33,65]),0===t.publicKeyVerify(e)},publicKeyCreate:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2?arguments[2]:void 0;switch(at("private key",e,32),ft(r),i=lt(i,r?33:65),t.publicKeyCreate(i,e)){case 0:return i;case 1:throw new Error(tt);case 2:throw new Error(rt)}},publicKeyConvert:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2?arguments[2]:void 0;switch(at("public key",e,[33,65]),ft(r),i=lt(i,r?33:65),t.publicKeyConvert(i,e)){case 0:return i;case 1:throw new Error(et);case 2:throw new Error(rt)}},publicKeyNegate:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2?arguments[2]:void 0;switch(at("public key",e,[33,65]),ft(r),i=lt(i,r?33:65),t.publicKeyNegate(i,e)){case 0:return i;case 1:throw new Error(et);case 2:throw new Error($);case 3:throw new Error(rt)}},publicKeyCombine:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],i=arguments.length>2?arguments[2]:void 0;ut(Array.isArray(e),"Expected public keys to be an Array"),ut(e.length>0,"Expected public keys array will have more than zero items");var n,o=v(e);try{for(o.s();!(n=o.n()).done;){var s=n.value;at("public key",s,[33,65])}}catch(t){o.e(t)}finally{o.f()}switch(ft(r),i=lt(i,r?33:65),t.publicKeyCombine(i,e)){case 0:return i;case 1:throw new Error(et);case 2:throw new Error(it);case 3:throw new Error(rt)}},publicKeyTweakAdd:function(e,r){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=arguments.length>3?arguments[3]:void 0;switch(at("public key",e,[33,65]),at("tweak",r,32),ft(i),n=lt(n,i?33:65),t.publicKeyTweakAdd(n,e,r)){case 0:return n;case 1:throw new Error(et);case 2:throw new Error(G)}},publicKeyTweakMul:function(e,r){var i=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],n=arguments.length>3?arguments[3]:void 0;switch(at("public key",e,[33,65]),at("tweak",r,32),ft(i),n=lt(n,i?33:65),t.publicKeyTweakMul(n,e,r)){case 0:return n;case 1:throw new Error(et);case 2:throw new Error(Y)}},signatureNormalize:function(e){switch(at("signature",e,64),t.signatureNormalize(e)){case 0:return e;case 1:throw new Error(nt)}},signatureExport:function(e,r){at("signature",e,64);var i={output:r=lt(r,72),outputlen:72};switch(t.signatureExport(i,e)){case 0:return r.slice(0,i.outputlen);case 1:throw new Error(nt);case 2:throw new Error($)}},signatureImport:function(e,r){switch(at("signature",e),r=lt(r,64),t.signatureImport(r,e)){case 0:return r;case 1:throw new Error(nt);case 2:throw new Error($)}},ecdsaSign:function(e,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments.length>3?arguments[3]:void 0;at("message",e,32),at("private key",r,32),ut("Object"===dt(i),"Expected options to be an Object"),void 0!==i.data&&at("options.data",i.data),void 0!==i.noncefn&&ut("Function"===dt(i.noncefn),"Expected options.noncefn to be a Function");var o={signature:n=lt(n,64),recid:null};switch(t.ecdsaSign(o,e,r,i.data,i.noncefn)){case 0:return o;case 1:throw new Error(ot);case 2:throw new Error($)}},ecdsaVerify:function(e,r,i){switch(at("signature",e,64),at("message",r,32),at("public key",i,[33,65]),t.ecdsaVerify(e,r,i)){case 0:return!0;case 3:return!1;case 1:throw new Error(nt);case 2:throw new Error(et)}},ecdsaRecover:function(e,r,i){var n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],o=arguments.length>4?arguments[4]:void 0;switch(at("signature",e,64),ut("Number"===dt(r)&&r>=0&&r<=3,"Expected recovery id to be a Number within interval [0, 3]"),at("message",i,32),ft(n),o=lt(o,n?33:65),t.ecdsaRecover(o,e,r,i)){case 0:return o;case 1:throw new Error(nt);case 2:throw new Error(st);case 3:throw new Error($)}},ecdh:function(e,r){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=arguments.length>3?arguments[3]:void 0;switch(at("public key",e,[33,65]),at("private key",r,32),ut("Object"===dt(i),"Expected options to be an Object"),void 0!==i.data&&at("options.data",i.data),void 0!==i.hashfn?(ut("Function"===dt(i.hashfn),"Expected options.hashfn to be a Function"),void 0!==i.xbuf&&at("options.xbuf",i.xbuf,32),void 0!==i.ybuf&&at("options.ybuf",i.ybuf,32),at("output",n)):n=lt(n,32),t.ecdh(n,e,r,i.data,i.hashfn,i.xbuf,i.ybuf)){case 0:return n;case 1:throw new Error(et);case 2:throw new Error(ht)}}}}(nn),sn={},hn=r.randomBytes;Object.defineProperty(sn,"__esModule",{value:!0});var un=hn;sn.getRandomBytes=function(t){return new Promise((function(e,r){un(t,(function(t,i){t?r(t):e(i)}))}))},sn.getRandomBytesSync=function(t){return un(t)},function(t){var e=g&&g.__awaiter||function(t,e,r,i){return new(r||(r=Promise))((function(n,o){function s(t){try{u(i.next(t))}catch(t){o(t)}}function h(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?n(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,h)}u((i=i.apply(t,e||[])).next())}))},r=g&&g.__generator||function(t,e){var r,i,n,o,s={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return o={next:h(0),throw:h(1),return:h(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function h(o){return function(h){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,i&&(n=2&o[0]?i.return:o[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,o[1])).done)return n;switch(i=0,n&&(o=[2&o[0],n.value]),o[0]){case 0:case 1:n=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,i=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(n=s.trys,(n=n.length>0&&n[n.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!n||o[1]>n[0]&&o[1]<n[3])){s.label=o[1];break}if(6===o[0]&&s.label<n[1]){s.label=n[1],n=o;break}if(n&&s.label<n[2]){s.label=n[2],s.ops.push(o);break}n[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],i=0}finally{r=n=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,h])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=on,n=sn;t.createPrivateKey=function(){return e(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return[4,n.getRandomBytes(32)];case 1:return t=e.sent(),i.privateKeyVerify(t)?[2,t]:[3,0];case 2:return[2]}}))}))},t.createPrivateKeySync=function(){for(;;){var t=n.getRandomBytesSync(32);if(i.privateKeyVerify(t))return t}},function(e){for(var r in e)t.hasOwnProperty(r)||(t[r]=e[r])}(on)}(X);var an={};function fn(t){if("string"!=typeof t)throw new Error("[isHexPrefixed] input must be type 'string', received type "+s(t));return"0"===t[0]&&"x"===t[1]}Object.defineProperty(an,"__esModule",{value:!0}),an.isHexString=an.getKeys=an.fromAscii=an.fromUtf8=an.toAscii=an.arrayContainsArray=an.getBinarySize=an.padToEven=an.stripHexPrefix=an.isHexPrefixed=void 0,an.isHexPrefixed=fn;function ln(t){var e=t;if("string"!=typeof e)throw new Error("[padToEven] value must be type 'string', received "+s(e));return e.length%2&&(e="0"+e),e}an.stripHexPrefix=function(t){if("string"!=typeof t)throw new Error("[stripHexPrefix] input must be type 'string', received "+s(t));return fn(t)?t.slice(2):t},an.padToEven=ln,an.getBinarySize=function(t){if("string"!=typeof t)throw new Error("[getBinarySize] method requires input type 'string', recieved "+s(t));return Buffer.byteLength(t,"utf8")},an.arrayContainsArray=function(t,e,r){if(!0!==Array.isArray(t))throw new Error("[arrayContainsArray] method requires input 'superset' to be an array, got type '"+s(t)+"'");if(!0!==Array.isArray(e))throw new Error("[arrayContainsArray] method requires input 'subset' to be an array, got type '"+s(e)+"'");return e[r?"some":"every"]((function(e){return t.indexOf(e)>=0}))},an.toAscii=function(t){var e="",r=0,i=t.length;for("0x"===t.substring(0,2)&&(r=2);r<i;r+=2){var n=parseInt(t.substr(r,2),16);e+=String.fromCharCode(n)}return e},an.fromUtf8=function(t){return"0x"+ln(Buffer.from(t,"utf8").toString("hex")).replace(/^0+|0+$/g,"")},an.fromAscii=function(t){for(var e="",r=0;r<t.length;r++){var i=t.charCodeAt(r).toString(16);e+=i.length<2?"0"+i:i}return"0x"+e},an.getKeys=function(t,e,r){if(!Array.isArray(t))throw new Error("[getKeys] method expects input 'params' to be an array, got "+s(t));if("string"!=typeof e)throw new Error("[getKeys] method expects input 'key' to be type 'string', got "+s(t));for(var i=[],n=0;n<t.length;n++){var o=t[n][e];if(r&&!o)o="";else if("string"!=typeof o)throw new Error("invalid abi - expected type 'string', received "+s(o));i.push(o)}return i},an.isHexString=function(t,e){return!("string"!=typeof t||!t.match(/^0x[0-9A-Fa-f]*$/))&&(!e||t.length===2+2*e)};var dn={},cn={};Object.defineProperty(cn,"__esModule",{value:!0}),cn.assertIsString=cn.assertIsArray=cn.assertIsBuffer=cn.assertIsHexString=void 0;var pn=an;cn.assertIsHexString=function(t){if(!(0,pn.isHexString)(t))throw new Error("This method only supports 0x-prefixed hex strings but input was: "+t)};cn.assertIsBuffer=function(t){if(!Buffer.isBuffer(t))throw new Error("This method only supports Buffer but input was: "+t)};cn.assertIsArray=function(t){if(!Array.isArray(t))throw new Error("This method only supports number arrays but input was: "+t)};cn.assertIsString=function(t){if("string"!=typeof t)throw new Error("This method only supports strings but input was: "+t)},function(t){var e=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(t,"__esModule",{value:!0}),t.baToJSON=t.toUtf8=t.addHexPrefix=t.toUnsigned=t.fromSigned=t.bufferToHex=t.bufferToInt=t.toBuffer=t.unpadHexString=t.unpadArray=t.unpadBuffer=t.setLengthRight=t.setLengthLeft=t.zeros=t.intToBuffer=t.intToHex=void 0;var r=e(z.exports),i=an,n=cn;t.intToHex=function(t){if(!Number.isSafeInteger(t)||t<0)throw new Error("Received an invalid integer type: "+t);return"0x"+t.toString(16)};t.intToBuffer=function(e){var r=(0,t.intToHex)(e);return Buffer.from((0,i.padToEven)(r.slice(2)),"hex")};t.zeros=function(t){return Buffer.allocUnsafe(t).fill(0)};var o=function(e,r,i){var n=(0,t.zeros)(r);return i?e.length<r?(e.copy(n),n):e.slice(0,r):e.length<r?(e.copy(n,r-e.length),n):e.slice(-r)};t.setLengthLeft=function(t,e){return(0,n.assertIsBuffer)(t),o(t,e,!1)};t.setLengthRight=function(t,e){return(0,n.assertIsBuffer)(t),o(t,e,!0)};var s=function(t){for(var e=t[0];t.length>0&&"0"===e.toString();)e=(t=t.slice(1))[0];return t};t.unpadBuffer=function(t){return(0,n.assertIsBuffer)(t),s(t)};t.unpadArray=function(t){return(0,n.assertIsArray)(t),s(t)};t.unpadHexString=function(t){return(0,n.assertIsHexString)(t),t=(0,i.stripHexPrefix)(t),s(t)};t.toBuffer=function(e){if(null==e)return Buffer.allocUnsafe(0);if(Buffer.isBuffer(e))return Buffer.from(e);if(Array.isArray(e)||e instanceof Uint8Array)return Buffer.from(e);if("string"==typeof e){if(!(0,i.isHexString)(e))throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: "+e);return Buffer.from((0,i.padToEven)((0,i.stripHexPrefix)(e)),"hex")}if("number"==typeof e)return(0,t.intToBuffer)(e);if(r.default.isBN(e))return e.toArrayLike(Buffer);if(e.toArray)return Buffer.from(e.toArray());if(e.toBuffer)return Buffer.from(e.toBuffer());throw new Error("invalid type")};t.bufferToInt=function(e){return new r.default((0,t.toBuffer)(e)).toNumber()};t.bufferToHex=function(e){return"0x"+(e=(0,t.toBuffer)(e)).toString("hex")};t.fromSigned=function(t){return new r.default(t).fromTwos(256)};t.toUnsigned=function(t){return Buffer.from(t.toTwos(256).toArray())};t.addHexPrefix=function(t){return"string"!=typeof t||(0,i.isHexPrefixed)(t)?t:"0x"+t};t.toUtf8=function(t){if((t=(0,i.stripHexPrefix)(t)).length%2!=0)throw new Error("Invalid non-even hex string input for toUtf8() provided");return Buffer.from(t.replace(/^(00)+|(00)+$/g,""),"hex").toString("utf8")};t.baToJSON=function(e){if(Buffer.isBuffer(e))return"0x"+e.toString("hex");if(e instanceof Array){for(var r=[],i=0;i<e.length;i++)r.push((0,t.baToJSON)(e[i]));return r}}}(dn);var mn={},vn={},gn={};Object.defineProperty(gn,"__esModule",{value:!0}),gn.createHashFunction=function(t){return function(e){var r=t();return r.update(e),Buffer.from(r.digest())}};var yn={exports:{}},wn={exports:{}},Mn=i;function bn(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function _n(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Sn(t,e){for(var r=0;r<e.length;r++){var i=e[r];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}var xn=t.Buffer,An=o.inspect,kn=An&&An.custom||"inspect";function En(t,e,r){xn.prototype.copy.call(t,e,r)}var Rn=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.head=null,this.tail=null,this.length=0}var e,r,i;return e=t,r=[{key:"push",value:function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length}},{key:"unshift",value:function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length}},{key:"shift",value:function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(t){if(0===this.length)return"";for(var e=this.head,r=""+e.data;e=e.next;)r+=t+e.data;return r}},{key:"concat",value:function(t){if(0===this.length)return xn.alloc(0);for(var e=xn.allocUnsafe(t>>>0),r=this.head,i=0;r;)En(r.data,e,i),i+=r.data.length,r=r.next;return e}},{key:"consume",value:function(t,e){var r;return t<this.head.data.length?(r=this.head.data.slice(0,t),this.head.data=this.head.data.slice(t)):r=t===this.head.data.length?this.shift():e?this._getString(t):this._getBuffer(t),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(t){var e=this.head,r=1,i=e.data;for(t-=i.length;e=e.next;){var n=e.data,o=t>n.length?n.length:t;if(o===n.length?i+=n:i+=n.slice(0,t),0==(t-=o)){o===n.length?(++r,e.next?this.head=e.next:this.head=this.tail=null):(this.head=e,e.data=n.slice(o));break}++r}return this.length-=r,i}},{key:"_getBuffer",value:function(t){var e=xn.allocUnsafe(t),r=this.head,i=1;for(r.data.copy(e),t-=r.data.length;r=r.next;){var n=r.data,o=t>n.length?n.length:t;if(n.copy(e,e.length-t,0,o),0==(t-=o)){o===n.length?(++i,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=n.slice(o));break}++i}return this.length-=i,e}},{key:kn,value:function(t,e){return An(this,function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?bn(Object(r),!0).forEach((function(e){_n(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):bn(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},e,{depth:0,customInspect:!1}))}}],r&&Sn(e.prototype,r),i&&Sn(e,i),t}();function Bn(t,e){Tn(t,e),In(t)}function In(t){t._writableState&&!t._writableState.emitClose||t._readableState&&!t._readableState.emitClose||t.emit("close")}function Tn(t,e){t.emit("error",e)}var Pn={destroy:function(t,e){var r=this,i=this._readableState&&this._readableState.destroyed,n=this._writableState&&this._writableState.destroyed;return i||n?(e?e(t):t&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,process.nextTick(Tn,this,t)):process.nextTick(Tn,this,t)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(t||null,(function(t){!e&&t?r._writableState?r._writableState.errorEmitted?process.nextTick(In,r):(r._writableState.errorEmitted=!0,process.nextTick(Bn,r,t)):process.nextTick(Bn,r,t):e?(process.nextTick(In,r),e(t)):process.nextTick(In,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(t,e){var r=t._readableState,i=t._writableState;r&&r.autoDestroy||i&&i.autoDestroy?t.destroy(e):t.emit("error",e)}},Nn={},On={};function Ln(t,e,r){r||(r=Error);var i=function(t){f(i,t);var r=p(i);function i(t,n,o){return h(this,i),r.call(this,function(t,r,i){return"string"==typeof e?e:e(t,r,i)}(t,n,o))}return i}(r);i.prototype.name=r.name,i.prototype.code=t,On[t]=i}function qn(t,e){if(Array.isArray(t)){var r=t.length;return t=t.map((function(t){return String(t)})),r>2?"one of ".concat(e," ").concat(t.slice(0,r-1).join(", "),", or ")+t[r-1]:2===r?"one of ".concat(e," ").concat(t[0]," or ").concat(t[1]):"of ".concat(e," ").concat(t[0])}return"of ".concat(e," ").concat(String(t))}Ln("ERR_INVALID_OPT_VALUE",(function(t,e){return'The value "'+e+'" is invalid for option "'+t+'"'}),TypeError),Ln("ERR_INVALID_ARG_TYPE",(function(t,e,r){var i,n,o,h;if("string"==typeof e&&(n="not ",e.substr(!o||o<0?0:+o,n.length)===n)?(i="must not be",e=e.replace(/^not /,"")):i="must be",function(t,e,r){return(void 0===r||r>t.length)&&(r=t.length),t.substring(r-e.length,r)===e}(t," argument"))h="The ".concat(t," ").concat(i," ").concat(qn(e,"type"));else{var u=function(t,e,r){return"number"!=typeof r&&(r=0),!(r+e.length>t.length)&&-1!==t.indexOf(e,r)}(t,".")?"property":"argument";h='The "'.concat(t,'" ').concat(u," ").concat(i," ").concat(qn(e,"type"))}return h+=". Received type ".concat(s(r))}),TypeError),Ln("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),Ln("ERR_METHOD_NOT_IMPLEMENTED",(function(t){return"The "+t+" method is not implemented"})),Ln("ERR_STREAM_PREMATURE_CLOSE","Premature close"),Ln("ERR_STREAM_DESTROYED",(function(t){return"Cannot call "+t+" after a stream was destroyed"})),Ln("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),Ln("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),Ln("ERR_STREAM_WRITE_AFTER_END","write after end"),Ln("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),Ln("ERR_UNKNOWN_ENCODING",(function(t){return"Unknown encoding: "+t}),TypeError),Ln("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),Nn.codes=On;var zn=Nn.codes.ERR_INVALID_OPT_VALUE;var jn,Cn={getHighWaterMark:function(t,e,r,i){var n=function(t,e,r){return null!=t.highWaterMark?t.highWaterMark:e?t[r]:null}(e,i,r);if(null!=n){if(!isFinite(n)||Math.floor(n)!==n||n<0)throw new zn(i?r:"highWaterMark",n);return Math.floor(n)}return t.objectMode?16:16384}},Hn=o.deprecate,Zn=uo;function Dn(t){var e=this;this.next=null,this.entry=null,this.finish=function(){!function(t,e,r){var i=t.entry;t.entry=null;for(;i;){var n=i.callback;e.pendingcb--,n(r),i=i.next}e.corkedRequestsFree.next=t}(e,t)}}uo.WritableState=ho;var Kn={deprecate:Hn},Un=Mn,Fn=t.Buffer,Wn=g.Uint8Array||function(){};var Vn,Jn=Pn,Xn=Cn.getHighWaterMark,$n=Nn.codes,Gn=$n.ERR_INVALID_ARG_TYPE,Yn=$n.ERR_METHOD_NOT_IMPLEMENTED,Qn=$n.ERR_MULTIPLE_CALLBACK,to=$n.ERR_STREAM_CANNOT_PIPE,eo=$n.ERR_STREAM_DESTROYED,ro=$n.ERR_STREAM_NULL_VALUES,io=$n.ERR_STREAM_WRITE_AFTER_END,no=$n.ERR_UNKNOWN_ENCODING,oo=Jn.errorOrDestroy;function so(){}function ho(t,e,r){jn=jn||go,t=t||{},"boolean"!=typeof r&&(r=e instanceof jn),this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.writableObjectMode),this.highWaterMark=Xn(this,t,"writableHighWaterMark",r),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var i=!1===t.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var r=t._writableState,i=r.sync,n=r.writecb;if("function"!=typeof n)throw new Qn;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(r),e)!function(t,e,r,i,n){--e.pendingcb,r?(process.nextTick(n,i),process.nextTick(mo,t,e),t._writableState.errorEmitted=!0,oo(t,i)):(n(i),t._writableState.errorEmitted=!0,oo(t,i),mo(t,e))}(t,r,i,e,n);else{var o=co(r)||t.destroyed;o||r.corked||r.bufferProcessing||!r.bufferedRequest||lo(t,r),i?process.nextTick(fo,t,r,o,n):fo(t,r,o,n)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new Dn(this)}function uo(t){var e=this instanceof(jn=jn||go);if(!e&&!Vn.call(uo,this))return new uo(t);this._writableState=new ho(t,this,e),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev),"function"==typeof t.destroy&&(this._destroy=t.destroy),"function"==typeof t.final&&(this._final=t.final)),Un.call(this)}function ao(t,e,r,i,n,o,s){e.writelen=i,e.writecb=s,e.writing=!0,e.sync=!0,e.destroyed?e.onwrite(new eo("write")):r?t._writev(n,e.onwrite):t._write(n,o,e.onwrite),e.sync=!1}function fo(t,e,r,i){r||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,i(),mo(t,e)}function lo(t,e){e.bufferProcessing=!0;var r=e.bufferedRequest;if(t._writev&&r&&r.next){var i=e.bufferedRequestCount,n=new Array(i),o=e.corkedRequestsFree;o.entry=r;for(var s=0,h=!0;r;)n[s]=r,r.isBuf||(h=!1),r=r.next,s+=1;n.allBuffers=h,ao(t,e,!0,e.length,n,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new Dn(e),e.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,a=r.encoding,f=r.callback;if(ao(t,e,!1,e.objectMode?1:u.length,u,a,f),r=r.next,e.bufferedRequestCount--,e.writing)break}null===r&&(e.lastBufferedRequest=null)}e.bufferedRequest=r,e.bufferProcessing=!1}function co(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function po(t,e){t._final((function(r){e.pendingcb--,r&&oo(t,r),e.prefinished=!0,t.emit("prefinish"),mo(t,e)}))}function mo(t,e){var r=co(e);if(r&&(function(t,e){e.prefinished||e.finalCalled||("function"!=typeof t._final||e.destroyed?(e.prefinished=!0,t.emit("prefinish")):(e.pendingcb++,e.finalCalled=!0,process.nextTick(po,t,e)))}(t,e),0===e.pendingcb&&(e.finished=!0,t.emit("finish"),e.autoDestroy))){var i=t._readableState;(!i||i.autoDestroy&&i.endEmitted)&&t.destroy()}return r}Pt.exports(uo,Un),ho.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},function(){try{Object.defineProperty(ho.prototype,"buffer",{get:Kn.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(t){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(Vn=Function.prototype[Symbol.hasInstance],Object.defineProperty(uo,Symbol.hasInstance,{value:function(t){return!!Vn.call(this,t)||this===uo&&(t&&t._writableState instanceof ho)}})):Vn=function(t){return t instanceof this},uo.prototype.pipe=function(){oo(this,new to)},uo.prototype.write=function(t,e,r){var i,n=this._writableState,o=!1,s=!n.objectMode&&(i=t,Fn.isBuffer(i)||i instanceof Wn);return s&&!Fn.isBuffer(t)&&(t=function(t){return Fn.from(t)}(t)),"function"==typeof e&&(r=e,e=null),s?e="buffer":e||(e=n.defaultEncoding),"function"!=typeof r&&(r=so),n.ending?function(t,e){var r=new io;oo(t,r),process.nextTick(e,r)}(this,r):(s||function(t,e,r,i){var n;return null===r?n=new ro:"string"==typeof r||e.objectMode||(n=new Gn("chunk",["string","Buffer"],r)),!n||(oo(t,n),process.nextTick(i,n),!1)}(this,n,t,r))&&(n.pendingcb++,o=function(t,e,r,i,n,o){if(!r){var s=function(t,e,r){t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=Fn.from(e,r));return e}(e,i,n);i!==s&&(r=!0,n="buffer",i=s)}var h=e.objectMode?1:i.length;e.length+=h;var u=e.length<e.highWaterMark;u||(e.needDrain=!0);if(e.writing||e.corked){var a=e.lastBufferedRequest;e.lastBufferedRequest={chunk:i,encoding:n,isBuf:r,callback:o,next:null},a?a.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else ao(t,e,!1,h,i,n,o);return u}(this,n,s,t,e,r)),o},uo.prototype.cork=function(){this._writableState.corked++},uo.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.bufferProcessing||!t.bufferedRequest||lo(this,t))},uo.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new no(t);return this._writableState.defaultEncoding=t,this},Object.defineProperty(uo.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(uo.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),uo.prototype._write=function(t,e,r){r(new Yn("_write()"))},uo.prototype._writev=null,uo.prototype.end=function(t,e,r){var i=this._writableState;return"function"==typeof t?(r=t,t=null,e=null):"function"==typeof e&&(r=e,e=null),null!=t&&this.write(t,e),i.corked&&(i.corked=1,this.uncork()),i.ending||function(t,e,r){e.ending=!0,mo(t,e),r&&(e.finished?process.nextTick(r):t.once("finish",r));e.ended=!0,t.writable=!1}(this,i,r),this},Object.defineProperty(uo.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(uo.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(t){this._writableState&&(this._writableState.destroyed=t)}}),uo.prototype.destroy=Jn.destroy,uo.prototype._undestroy=Jn.undestroy,uo.prototype._destroy=function(t,e){e(t)};var vo=Object.keys||function(t){var e=[];for(var r in t)e.push(r);return e},go=So,yo=ls,wo=Zn;Pt.exports(So,yo);for(var Mo=vo(wo.prototype),bo=0;bo<Mo.length;bo++){var _o=Mo[bo];So.prototype[_o]||(So.prototype[_o]=wo.prototype[_o])}function So(t){if(!(this instanceof So))return new So(t);yo.call(this,t),wo.call(this,t),this.allowHalfOpen=!0,t&&(!1===t.readable&&(this.readable=!1),!1===t.writable&&(this.writable=!1),!1===t.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",xo)))}function xo(){this._writableState.ended||process.nextTick(Ao,this)}function Ao(t){t.end()}Object.defineProperty(So.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(So.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(So.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(So.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(t){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=t,this._writableState.destroyed=t)}});var ko={},Eo={exports:{}};
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
!function(e,r){var i=t,n=i.Buffer;function o(t,e){for(var r in t)e[r]=t[r]}function s(t,e,r){return n(t,e,r)}n.from&&n.alloc&&n.allocUnsafe&&n.allocUnsafeSlow?e.exports=i:(o(i,r),r.Buffer=s),s.prototype=Object.create(n.prototype),o(n,s),s.from=function(t,e,r){if("number"==typeof t)throw new TypeError("Argument must not be a number");return n(t,e,r)},s.alloc=function(t,e,r){if("number"!=typeof t)throw new TypeError("Argument must be a number");var i=n(t);return void 0!==e?"string"==typeof r?i.fill(e,r):i.fill(e):i.fill(0),i},s.allocUnsafe=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return n(t)},s.allocUnsafeSlow=function(t){if("number"!=typeof t)throw new TypeError("Argument must be a number");return i.SlowBuffer(t)}}(Eo,Eo.exports);var Ro=Eo.exports.Buffer,Bo=Ro.isEncoding||function(t){switch((t=""+t)&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function Io(t){var e;switch(this.encoding=function(t){var e=function(t){if(!t)return"utf8";for(var e;;)switch(t){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return t;default:if(e)return;t=(""+t).toLowerCase(),e=!0}}(t);if("string"!=typeof e&&(Ro.isEncoding===Bo||!Bo(t)))throw new Error("Unknown encoding: "+t);return e||t}(t),this.encoding){case"utf16le":this.text=No,this.end=Oo,e=4;break;case"utf8":this.fillLast=Po,e=4;break;case"base64":this.text=Lo,this.end=qo,e=3;break;default:return this.write=zo,void(this.end=jo)}this.lastNeed=0,this.lastTotal=0,this.lastChar=Ro.allocUnsafe(e)}function To(t){return t<=127?0:t>>5==6?2:t>>4==14?3:t>>3==30?4:t>>6==2?-1:-2}function Po(t){var e=this.lastTotal-this.lastNeed,r=function(t,e,r){if(128!=(192&e[0]))return t.lastNeed=0,"�";if(t.lastNeed>1&&e.length>1){if(128!=(192&e[1]))return t.lastNeed=1,"�";if(t.lastNeed>2&&e.length>2&&128!=(192&e[2]))return t.lastNeed=2,"�"}}(this,t);return void 0!==r?r:this.lastNeed<=t.length?(t.copy(this.lastChar,e,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(t.copy(this.lastChar,e,0,t.length),void(this.lastNeed-=t.length))}function No(t,e){if((t.length-e)%2==0){var r=t.toString("utf16le",e);if(r){var i=r.charCodeAt(r.length-1);if(i>=55296&&i<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=t[t.length-1],t.toString("utf16le",e,t.length-1)}function Oo(t){var e=t&&t.length?this.write(t):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return e+this.lastChar.toString("utf16le",0,r)}return e}function Lo(t,e){var r=(t.length-e)%3;return 0===r?t.toString("base64",e):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=t[t.length-1]:(this.lastChar[0]=t[t.length-2],this.lastChar[1]=t[t.length-1]),t.toString("base64",e,t.length-r))}function qo(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+this.lastChar.toString("base64",0,3-this.lastNeed):e}function zo(t){return t.toString(this.encoding)}function jo(t){return t&&t.length?this.write(t):""}ko.StringDecoder=Io,Io.prototype.write=function(t){if(0===t.length)return"";var e,r;if(this.lastNeed){if(void 0===(e=this.fillLast(t)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<t.length?e?e+this.text(t,r):this.text(t,r):e||""},Io.prototype.end=function(t){var e=t&&t.length?this.write(t):"";return this.lastNeed?e+"�":e},Io.prototype.text=function(t,e){var r=function(t,e,r){var i=e.length-1;if(i<r)return 0;var n=To(e[i]);if(n>=0)return n>0&&(t.lastNeed=n-1),n;if(--i<r||-2===n)return 0;if((n=To(e[i]))>=0)return n>0&&(t.lastNeed=n-2),n;if(--i<r||-2===n)return 0;if((n=To(e[i]))>=0)return n>0&&(2===n?n=0:t.lastNeed=n-3),n;return 0}(this,t,e);if(!this.lastNeed)return t.toString("utf8",e);this.lastTotal=r;var i=t.length-(r-this.lastNeed);return t.copy(this.lastChar,0,i),t.toString("utf8",e,i)},Io.prototype.fillLast=function(t){if(this.lastNeed<=t.length)return t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);t.copy(this.lastChar,this.lastTotal-this.lastNeed,0,t.length),this.lastNeed-=t.length};var Co=Nn.codes.ERR_STREAM_PREMATURE_CLOSE;function Ho(){}var Zo,Do=function t(e,r,i){if("function"==typeof r)return t(e,null,r);r||(r={}),i=function(t){var e=!1;return function(){if(!e){e=!0;for(var r=arguments.length,i=new Array(r),n=0;n<r;n++)i[n]=arguments[n];t.apply(this,i)}}}(i||Ho);var n=r.readable||!1!==r.readable&&e.readable,o=r.writable||!1!==r.writable&&e.writable,s=function(){e.writable||u()},h=e._writableState&&e._writableState.finished,u=function(){o=!1,h=!0,n||i.call(e)},a=e._readableState&&e._readableState.endEmitted,f=function(){n=!1,a=!0,o||i.call(e)},l=function(t){i.call(e,t)},d=function(){var t;return n&&!a?(e._readableState&&e._readableState.ended||(t=new Co),i.call(e,t)):o&&!h?(e._writableState&&e._writableState.ended||(t=new Co),i.call(e,t)):void 0},c=function(){e.req.on("finish",u)};return!function(t){return t.setHeader&&"function"==typeof t.abort}(e)?o&&!e._writableState&&(e.on("end",s),e.on("close",s)):(e.on("complete",u),e.on("abort",d),e.req?c():e.on("request",c)),e.on("end",f),e.on("finish",u),!1!==r.error&&e.on("error",l),e.on("close",d),function(){e.removeListener("complete",u),e.removeListener("abort",d),e.removeListener("request",c),e.req&&e.req.removeListener("finish",u),e.removeListener("end",s),e.removeListener("close",s),e.removeListener("finish",u),e.removeListener("end",f),e.removeListener("error",l),e.removeListener("close",d)}};function Ko(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var Uo=Do,Fo=Symbol("lastResolve"),Wo=Symbol("lastReject"),Vo=Symbol("error"),Jo=Symbol("ended"),Xo=Symbol("lastPromise"),$o=Symbol("handlePromise"),Go=Symbol("stream");function Yo(t,e){return{value:t,done:e}}function Qo(t){var e=t[Fo];if(null!==e){var r=t[Go].read();null!==r&&(t[Xo]=null,t[Fo]=null,t[Wo]=null,e(Yo(r,!1)))}}function ts(t){process.nextTick(Qo,t)}var es=Object.getPrototypeOf((function(){})),rs=Object.setPrototypeOf((Ko(Zo={get stream(){return this[Go]},next:function(){var t=this,e=this[Vo];if(null!==e)return Promise.reject(e);if(this[Jo])return Promise.resolve(Yo(void 0,!0));if(this[Go].destroyed)return new Promise((function(e,r){process.nextTick((function(){t[Vo]?r(t[Vo]):e(Yo(void 0,!0))}))}));var r,i=this[Xo];if(i)r=new Promise(function(t,e){return function(r,i){t.then((function(){e[Jo]?r(Yo(void 0,!0)):e[$o](r,i)}),i)}}(i,this));else{var n=this[Go].read();if(null!==n)return Promise.resolve(Yo(n,!1));r=new Promise(this[$o])}return this[Xo]=r,r}},Symbol.asyncIterator,(function(){return this})),Ko(Zo,"return",(function(){var t=this;return new Promise((function(e,r){t[Go].destroy(null,(function(t){t?r(t):e(Yo(void 0,!0))}))}))})),Zo),es),is=function(t){var e,r=Object.create(rs,(Ko(e={},Go,{value:t,writable:!0}),Ko(e,Fo,{value:null,writable:!0}),Ko(e,Wo,{value:null,writable:!0}),Ko(e,Vo,{value:null,writable:!0}),Ko(e,Jo,{value:t._readableState.endEmitted,writable:!0}),Ko(e,$o,{value:function(t,e){var i=r[Go].read();i?(r[Xo]=null,r[Fo]=null,r[Wo]=null,t(Yo(i,!1))):(r[Fo]=t,r[Wo]=e)},writable:!0}),e));return r[Xo]=null,Uo(t,(function(t){if(t&&"ERR_STREAM_PREMATURE_CLOSE"!==t.code){var e=r[Wo];return null!==e&&(r[Xo]=null,r[Fo]=null,r[Wo]=null,e(t)),void(r[Vo]=t)}var i=r[Fo];null!==i&&(r[Xo]=null,r[Fo]=null,r[Wo]=null,i(Yo(void 0,!0))),r[Jo]=!0})),t.on("readable",ts.bind(null,r)),r};function ns(t,e,r,i,n,o,s){try{var h=t[o](s),u=h.value}catch(t){return void r(t)}h.done?e(u):Promise.resolve(u).then(i,n)}function os(t){return function(){var e=this,r=arguments;return new Promise((function(i,n){var o=t.apply(e,r);function s(t){ns(o,i,n,s,h,"next",t)}function h(t){ns(o,i,n,s,h,"throw",t)}s(void 0)}))}}function ss(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,i)}return r}function hs(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var us=Nn.codes.ERR_INVALID_ARG_TYPE;var as,fs=function(t,e,r){var i;if(e&&"function"==typeof e.next)i=e;else if(e&&e[Symbol.asyncIterator])i=e[Symbol.asyncIterator]();else{if(!e||!e[Symbol.iterator])throw new us("iterable",["Iterable"],e);i=e[Symbol.iterator]()}var n=new t(function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?ss(Object(r),!0).forEach((function(e){hs(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ss(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({objectMode:!0},r)),o=!1;function s(){return h.apply(this,arguments)}function h(){return(h=os(regeneratorRuntime.mark((function t(){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,i.next();case 3:if(e=t.sent,r=e.value,!e.done){t.next=10;break}n.push(null),t.next=19;break;case 10:return t.t0=n,t.next=13,r;case 13:if(t.t1=t.sent,!t.t0.push.call(t.t0,t.t1)){t.next=18;break}s(),t.next=19;break;case 18:o=!1;case 19:t.next=24;break;case 21:t.prev=21,t.t2=t.catch(0),n.destroy(t.t2);case 24:case"end":return t.stop()}}),t,null,[[0,21]])})))).apply(this,arguments)}return n._read=function(){o||(o=!0,s())},n},ls=Ps;Ps.ReadableState=Ts,n.EventEmitter;var ds=function(t,e){return t.listeners(e).length},cs=Mn,ps=t.Buffer,ms=g.Uint8Array||function(){};var vs,gs=o;vs=gs&&gs.debuglog?gs.debuglog("stream"):function(){};var ys,ws,Ms,bs=Rn,_s=Pn,Ss=Cn.getHighWaterMark,xs=Nn.codes,As=xs.ERR_INVALID_ARG_TYPE,ks=xs.ERR_STREAM_PUSH_AFTER_EOF,Es=xs.ERR_METHOD_NOT_IMPLEMENTED,Rs=xs.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;Pt.exports(Ps,cs);var Bs=_s.errorOrDestroy,Is=["error","close","destroy","pause","resume"];function Ts(t,e,r){as=as||go,t=t||{},"boolean"!=typeof r&&(r=e instanceof as),this.objectMode=!!t.objectMode,r&&(this.objectMode=this.objectMode||!!t.readableObjectMode),this.highWaterMark=Ss(this,t,"readableHighWaterMark",r),this.buffer=new bs,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==t.emitClose,this.autoDestroy=!!t.autoDestroy,this.destroyed=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(ys||(ys=ko.StringDecoder),this.decoder=new ys(t.encoding),this.encoding=t.encoding)}function Ps(t){if(as=as||go,!(this instanceof Ps))return new Ps(t);var e=this instanceof as;this._readableState=new Ts(t,this,e),this.readable=!0,t&&("function"==typeof t.read&&(this._read=t.read),"function"==typeof t.destroy&&(this._destroy=t.destroy)),cs.call(this)}function Ns(t,e,r,i,n){vs("readableAddChunk",e);var o,s=t._readableState;if(null===e)s.reading=!1,function(t,e){if(vs("onEofChunk"),e.ended)return;if(e.decoder){var r=e.decoder.end();r&&r.length&&(e.buffer.push(r),e.length+=e.objectMode?1:r.length)}e.ended=!0,e.sync?qs(t):(e.needReadable=!1,e.emittedReadable||(e.emittedReadable=!0,zs(t)))}(t,s);else if(n||(o=function(t,e){var r;i=e,ps.isBuffer(i)||i instanceof ms||"string"==typeof e||void 0===e||t.objectMode||(r=new As("chunk",["string","Buffer","Uint8Array"],e));var i;return r}(s,e)),o)Bs(t,o);else if(s.objectMode||e&&e.length>0)if("string"==typeof e||s.objectMode||Object.getPrototypeOf(e)===ps.prototype||(e=function(t){return ps.from(t)}(e)),i)s.endEmitted?Bs(t,new Rs):Os(t,s,e,!0);else if(s.ended)Bs(t,new ks);else{if(s.destroyed)return!1;s.reading=!1,s.decoder&&!r?(e=s.decoder.write(e),s.objectMode||0!==e.length?Os(t,s,e,!1):js(t,s)):Os(t,s,e,!1)}else i||(s.reading=!1,js(t,s));return!s.ended&&(s.length<s.highWaterMark||0===s.length)}function Os(t,e,r,i){e.flowing&&0===e.length&&!e.sync?(e.awaitDrain=0,t.emit("data",r)):(e.length+=e.objectMode?1:r.length,i?e.buffer.unshift(r):e.buffer.push(r),e.needReadable&&qs(t)),js(t,e)}Object.defineProperty(Ps.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(t){this._readableState&&(this._readableState.destroyed=t)}}),Ps.prototype.destroy=_s.destroy,Ps.prototype._undestroy=_s.undestroy,Ps.prototype._destroy=function(t,e){e(t)},Ps.prototype.push=function(t,e){var r,i=this._readableState;return i.objectMode?r=!0:"string"==typeof t&&((e=e||i.defaultEncoding)!==i.encoding&&(t=ps.from(t,e),e=""),r=!0),Ns(this,t,e,!1,r)},Ps.prototype.unshift=function(t){return Ns(this,t,null,!0,!1)},Ps.prototype.isPaused=function(){return!1===this._readableState.flowing},Ps.prototype.setEncoding=function(t){ys||(ys=ko.StringDecoder);var e=new ys(t);this._readableState.decoder=e,this._readableState.encoding=this._readableState.decoder.encoding;for(var r=this._readableState.buffer.head,i="";null!==r;)i+=e.write(r.data),r=r.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};function Ls(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=1073741824?t=1073741824:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function qs(t){var e=t._readableState;vs("emitReadable",e.needReadable,e.emittedReadable),e.needReadable=!1,e.emittedReadable||(vs("emitReadable",e.flowing),e.emittedReadable=!0,process.nextTick(zs,t))}function zs(t){var e=t._readableState;vs("emitReadable_",e.destroyed,e.length,e.ended),e.destroyed||!e.length&&!e.ended||(t.emit("readable"),e.emittedReadable=!1),e.needReadable=!e.flowing&&!e.ended&&e.length<=e.highWaterMark,Ks(t)}function js(t,e){e.readingMore||(e.readingMore=!0,process.nextTick(Cs,t,e))}function Cs(t,e){for(;!e.reading&&!e.ended&&(e.length<e.highWaterMark||e.flowing&&0===e.length);){var r=e.length;if(vs("maybeReadMore read 0"),t.read(0),r===e.length)break}e.readingMore=!1}function Hs(t){var e=t._readableState;e.readableListening=t.listenerCount("readable")>0,e.resumeScheduled&&!e.paused?e.flowing=!0:t.listenerCount("data")>0&&t.resume()}function Zs(t){vs("readable nexttick read 0"),t.read(0)}function Ds(t,e){vs("resume",e.reading),e.reading||t.read(0),e.resumeScheduled=!1,t.emit("resume"),Ks(t),e.flowing&&!e.reading&&t.read(0)}function Ks(t){var e=t._readableState;for(vs("flow",e.flowing);e.flowing&&null!==t.read(););}function Us(t,e){return 0===e.length?null:(e.objectMode?r=e.buffer.shift():!t||t>=e.length?(r=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.first():e.buffer.concat(e.length),e.buffer.clear()):r=e.buffer.consume(t,e.decoder),r);var r}function Fs(t){var e=t._readableState;vs("endReadable",e.endEmitted),e.endEmitted||(e.ended=!0,process.nextTick(Ws,e,t))}function Ws(t,e){if(vs("endReadableNT",t.endEmitted,t.length),!t.endEmitted&&0===t.length&&(t.endEmitted=!0,e.readable=!1,e.emit("end"),t.autoDestroy)){var r=e._writableState;(!r||r.autoDestroy&&r.finished)&&e.destroy()}}function Vs(t,e){for(var r=0,i=t.length;r<i;r++)if(t[r]===e)return r;return-1}Ps.prototype.read=function(t){vs("read",t),t=parseInt(t,10);var e=this._readableState,r=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&((0!==e.highWaterMark?e.length>=e.highWaterMark:e.length>0)||e.ended))return vs("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?Fs(this):qs(this),null;if(0===(t=Ls(t,e))&&e.ended)return 0===e.length&&Fs(this),null;var i,n=e.needReadable;return vs("need readable",n),(0===e.length||e.length-t<e.highWaterMark)&&vs("length less than watermark",n=!0),e.ended||e.reading?vs("reading or ended",n=!1):n&&(vs("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=Ls(r,e))),null===(i=t>0?Us(t,e):null)?(e.needReadable=e.length<=e.highWaterMark,t=0):(e.length-=t,e.awaitDrain=0),0===e.length&&(e.ended||(e.needReadable=!0),r!==t&&e.ended&&Fs(this)),null!==i&&this.emit("data",i),i},Ps.prototype._read=function(t){Bs(this,new Es("_read()"))},Ps.prototype.pipe=function(t,e){var r=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=t;break;case 1:i.pipes=[i.pipes,t];break;default:i.pipes.push(t)}i.pipesCount+=1,vs("pipe count=%d opts=%j",i.pipesCount,e);var n=(!e||!1!==e.end)&&t!==process.stdout&&t!==process.stderr?s:c;function o(e,n){vs("onunpipe"),e===r&&n&&!1===n.hasUnpiped&&(n.hasUnpiped=!0,vs("cleanup"),t.removeListener("close",l),t.removeListener("finish",d),t.removeListener("drain",h),t.removeListener("error",f),t.removeListener("unpipe",o),r.removeListener("end",s),r.removeListener("end",c),r.removeListener("data",a),u=!0,!i.awaitDrain||t._writableState&&!t._writableState.needDrain||h())}function s(){vs("onend"),t.end()}i.endEmitted?process.nextTick(n):r.once("end",n),t.on("unpipe",o);var h=function(t){return function(){var e=t._readableState;vs("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&ds(t,"data")&&(e.flowing=!0,Ks(t))}}(r);t.on("drain",h);var u=!1;function a(e){vs("ondata");var n=t.write(e);vs("dest.write",n),!1===n&&((1===i.pipesCount&&i.pipes===t||i.pipesCount>1&&-1!==Vs(i.pipes,t))&&!u&&(vs("false write response, pause",i.awaitDrain),i.awaitDrain++),r.pause())}function f(e){vs("onerror",e),c(),t.removeListener("error",f),0===ds(t,"error")&&Bs(t,e)}function l(){t.removeListener("finish",d),c()}function d(){vs("onfinish"),t.removeListener("close",l),c()}function c(){vs("unpipe"),r.unpipe(t)}return r.on("data",a),function(t,e,r){if("function"==typeof t.prependListener)return t.prependListener(e,r);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(r):t._events[e]=[r,t._events[e]]:t.on(e,r)}(t,"error",f),t.once("close",l),t.once("finish",d),t.emit("pipe",r),i.flowing||(vs("pipe resume"),r.resume()),t},Ps.prototype.unpipe=function(t){var e=this._readableState,r={hasUnpiped:!1};if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes||(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this,r)),this;if(!t){var i=e.pipes,n=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var o=0;o<n;o++)i[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=Vs(e.pipes,t);return-1===s||(e.pipes.splice(s,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this,r)),this},Ps.prototype.on=function(t,e){var r=cs.prototype.on.call(this,t,e),i=this._readableState;return"data"===t?(i.readableListening=this.listenerCount("readable")>0,!1!==i.flowing&&this.resume()):"readable"===t&&(i.endEmitted||i.readableListening||(i.readableListening=i.needReadable=!0,i.flowing=!1,i.emittedReadable=!1,vs("on readable",i.length,i.reading),i.length?qs(this):i.reading||process.nextTick(Zs,this))),r},Ps.prototype.addListener=Ps.prototype.on,Ps.prototype.removeListener=function(t,e){var r=cs.prototype.removeListener.call(this,t,e);return"readable"===t&&process.nextTick(Hs,this),r},Ps.prototype.removeAllListeners=function(t){var e=cs.prototype.removeAllListeners.apply(this,arguments);return"readable"!==t&&void 0!==t||process.nextTick(Hs,this),e},Ps.prototype.resume=function(){var t=this._readableState;return t.flowing||(vs("resume"),t.flowing=!t.readableListening,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,process.nextTick(Ds,t,e))}(this,t)),t.paused=!1,this},Ps.prototype.pause=function(){return vs("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(vs("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},Ps.prototype.wrap=function(t){var e=this,r=this._readableState,i=!1;for(var n in t.on("end",(function(){if(vs("wrapped end"),r.decoder&&!r.ended){var t=r.decoder.end();t&&t.length&&e.push(t)}e.push(null)})),t.on("data",(function(n){(vs("wrapped data"),r.decoder&&(n=r.decoder.write(n)),r.objectMode&&null==n)||(r.objectMode||n&&n.length)&&(e.push(n)||(i=!0,t.pause()))})),t)void 0===this[n]&&"function"==typeof t[n]&&(this[n]=function(e){return function(){return t[e].apply(t,arguments)}}(n));for(var o=0;o<Is.length;o++)t.on(Is[o],this.emit.bind(this,Is[o]));return this._read=function(e){vs("wrapped _read",e),i&&(i=!1,t.resume())},this},"function"==typeof Symbol&&(Ps.prototype[Symbol.asyncIterator]=function(){return void 0===ws&&(ws=is),ws(this)}),Object.defineProperty(Ps.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(Ps.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(Ps.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(t){this._readableState&&(this._readableState.flowing=t)}}),Ps._fromList=Us,Object.defineProperty(Ps.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(Ps.from=function(t,e){return void 0===Ms&&(Ms=fs),Ms(Ps,t,e)});var Js=rh,Xs=Nn.codes,$s=Xs.ERR_METHOD_NOT_IMPLEMENTED,Gs=Xs.ERR_MULTIPLE_CALLBACK,Ys=Xs.ERR_TRANSFORM_ALREADY_TRANSFORMING,Qs=Xs.ERR_TRANSFORM_WITH_LENGTH_0,th=go;function eh(t,e){var r=this._transformState;r.transforming=!1;var i=r.writecb;if(null===i)return this.emit("error",new Gs);r.writechunk=null,r.writecb=null,null!=e&&this.push(e),i(t);var n=this._readableState;n.reading=!1,(n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}function rh(t){if(!(this instanceof rh))return new rh(t);th.call(this,t),this._transformState={afterTransform:eh.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.on("prefinish",ih)}function ih(){var t=this;"function"!=typeof this._flush||this._readableState.destroyed?nh(this,null,null):this._flush((function(e,r){nh(t,e,r)}))}function nh(t,e,r){if(e)return t.emit("error",e);if(null!=r&&t.push(r),t._writableState.length)throw new Qs;if(t._transformState.transforming)throw new Ys;return t.push(null)}Pt.exports(rh,th),rh.prototype.push=function(t,e){return this._transformState.needTransform=!1,th.prototype.push.call(this,t,e)},rh.prototype._transform=function(t,e,r){r(new $s("_transform()"))},rh.prototype._write=function(t,e,r){var i=this._transformState;if(i.writecb=r,i.writechunk=t,i.writeencoding=e,!i.transforming){var n=this._readableState;(i.needTransform||n.needReadable||n.length<n.highWaterMark)&&this._read(n.highWaterMark)}},rh.prototype._read=function(t){var e=this._transformState;null===e.writechunk||e.transforming?e.needTransform=!0:(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform))},rh.prototype._destroy=function(t,e){th.prototype._destroy.call(this,t,(function(t){e(t)}))};var oh,sh=uh,hh=Js;function uh(t){if(!(this instanceof uh))return new uh(t);hh.call(this,t)}Pt.exports(uh,hh),uh.prototype._transform=function(t,e,r){r(null,t)};var ah=Nn.codes,fh=ah.ERR_MISSING_ARGS,lh=ah.ERR_STREAM_DESTROYED;function dh(t){if(t)throw t}function ch(t,e,r,i){i=function(t){var e=!1;return function(){e||(e=!0,t.apply(void 0,arguments))}}(i);var n=!1;t.on("close",(function(){n=!0})),void 0===oh&&(oh=Do),oh(t,{readable:e,writable:r},(function(t){if(t)return i(t);n=!0,i()}));var o=!1;return function(e){if(!n&&!o)return o=!0,function(t){return t.setHeader&&"function"==typeof t.abort}(t)?t.abort():"function"==typeof t.destroy?t.destroy():void i(e||new lh("pipe"))}}function ph(t){t()}function mh(t,e){return t.pipe(e)}function vh(t){return t.length?"function"!=typeof t[t.length-1]?dh:t.pop():dh}var gh=function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];var i,n=vh(e);if(Array.isArray(e[0])&&(e=e[0]),e.length<2)throw new fh("streams");var o=e.map((function(t,r){var s=r<e.length-1;return ch(t,s,r>0,(function(t){i||(i=t),t&&o.forEach(ph),s||(o.forEach(ph),n(i))}))}));return e.reduce(mh)};!function(t,e){var r=i;"disable"===process.env.READABLE_STREAM&&r?(t.exports=r.Readable,Object.assign(t.exports,r),t.exports.Stream=r):((e=t.exports=ls).Stream=r||e,e.Readable=e,e.Writable=Zn,e.Duplex=go,e.Transform=Js,e.PassThrough=sh,e.finished=Do,e.pipeline=gh)}(wn,wn.exports);var yh=wn.exports.Transform,wh=wn.exports.Transform,Mh=function(t){return function(e){f(i,yh);var r=p(i);function i(e,n,o,s,u){var a;return h(this,i),(a=r.call(this,u))._rate=e,a._capacity=n,a._delimitedSuffix=o,a._hashBitLength=s,a._options=u,a._state=new t,a._state.initialize(e,n),a._finalized=!1,a}return a(i,[{key:"_transform",value:function(t,e,r){var i=null;try{this.update(t,e)}catch(t){i=t}r(i)}},{key:"_flush",value:function(t){var e=null;try{this.push(this.digest())}catch(t){e=t}t(e)}},{key:"update",value:function(t,e){if(!Buffer.isBuffer(t)&&"string"!=typeof t)throw new TypeError("Data must be a string or a buffer");if(this._finalized)throw new Error("Digest already called");return Buffer.isBuffer(t)||(t=Buffer.from(t,e)),this._state.absorb(t),this}},{key:"digest",value:function(t){if(this._finalized)throw new Error("Digest already called");this._finalized=!0,this._delimitedSuffix&&this._state.absorbLastFewBits(this._delimitedSuffix);var e=this._state.squeeze(this._hashBitLength/8);return void 0!==t&&(e=e.toString(t)),this._resetState(),e}},{key:"_resetState",value:function(){return this._state.initialize(this._rate,this._capacity),this}},{key:"_clone",value:function(){var t=new i(this._rate,this._capacity,this._delimitedSuffix,this._hashBitLength,this._options);return this._state.copy(t._state),t._finalized=this._finalized,t}}]),i}()},bh=function(t){return function(e){f(i,wh);var r=p(i);function i(e,n,o,s){var u;return h(this,i),(u=r.call(this,s))._rate=e,u._capacity=n,u._delimitedSuffix=o,u._options=s,u._state=new t,u._state.initialize(e,n),u._finalized=!1,u}return a(i,[{key:"_transform",value:function(t,e,r){var i=null;try{this.update(t,e)}catch(t){i=t}r(i)}},{key:"_flush",value:function(){}},{key:"_read",value:function(t){this.push(this.squeeze(t))}},{key:"update",value:function(t,e){if(!Buffer.isBuffer(t)&&"string"!=typeof t)throw new TypeError("Data must be a string or a buffer");if(this._finalized)throw new Error("Squeeze already called");return Buffer.isBuffer(t)||(t=Buffer.from(t,e)),this._state.absorb(t),this}},{key:"squeeze",value:function(t,e){this._finalized||(this._finalized=!0,this._state.absorbLastFewBits(this._delimitedSuffix));var r=this._state.squeeze(t);return void 0!==e&&(r=r.toString(e)),r}},{key:"_resetState",value:function(){return this._state.initialize(this._rate,this._capacity),this}},{key:"_clone",value:function(){var t=new i(this._rate,this._capacity,this._delimitedSuffix,this._options);return this._state.copy(t._state),t._finalized=this._finalized,t}}]),i}()},_h={},Sh=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648];_h.p1600=function(t){for(var e=0;e<24;++e){var r=t[0]^t[10]^t[20]^t[30]^t[40],i=t[1]^t[11]^t[21]^t[31]^t[41],n=t[2]^t[12]^t[22]^t[32]^t[42],o=t[3]^t[13]^t[23]^t[33]^t[43],s=t[4]^t[14]^t[24]^t[34]^t[44],h=t[5]^t[15]^t[25]^t[35]^t[45],u=t[6]^t[16]^t[26]^t[36]^t[46],a=t[7]^t[17]^t[27]^t[37]^t[47],f=t[8]^t[18]^t[28]^t[38]^t[48],l=t[9]^t[19]^t[29]^t[39]^t[49],d=f^(n<<1|o>>>31),c=l^(o<<1|n>>>31),p=t[0]^d,m=t[1]^c,v=t[10]^d,g=t[11]^c,y=t[20]^d,w=t[21]^c,M=t[30]^d,b=t[31]^c,_=t[40]^d,S=t[41]^c;d=r^(s<<1|h>>>31),c=i^(h<<1|s>>>31);var x=t[2]^d,A=t[3]^c,k=t[12]^d,E=t[13]^c,R=t[22]^d,B=t[23]^c,I=t[32]^d,T=t[33]^c,P=t[42]^d,N=t[43]^c;d=n^(u<<1|a>>>31),c=o^(a<<1|u>>>31);var O=t[4]^d,L=t[5]^c,q=t[14]^d,z=t[15]^c,j=t[24]^d,C=t[25]^c,H=t[34]^d,Z=t[35]^c,D=t[44]^d,K=t[45]^c;d=s^(f<<1|l>>>31),c=h^(l<<1|f>>>31);var U=t[6]^d,F=t[7]^c,W=t[16]^d,V=t[17]^c,J=t[26]^d,X=t[27]^c,$=t[36]^d,G=t[37]^c,Y=t[46]^d,Q=t[47]^c;d=u^(r<<1|i>>>31),c=a^(i<<1|r>>>31);var tt=t[8]^d,et=t[9]^c,rt=t[18]^d,it=t[19]^c,nt=t[28]^d,ot=t[29]^c,st=t[38]^d,ht=t[39]^c,ut=t[48]^d,at=t[49]^c,ft=p,lt=m,dt=g<<4|v>>>28,ct=v<<4|g>>>28,pt=y<<3|w>>>29,mt=w<<3|y>>>29,vt=b<<9|M>>>23,gt=M<<9|b>>>23,yt=_<<18|S>>>14,wt=S<<18|_>>>14,Mt=x<<1|A>>>31,bt=A<<1|x>>>31,_t=E<<12|k>>>20,St=k<<12|E>>>20,xt=R<<10|B>>>22,At=B<<10|R>>>22,kt=T<<13|I>>>19,Et=I<<13|T>>>19,Rt=P<<2|N>>>30,Bt=N<<2|P>>>30,It=L<<30|O>>>2,Tt=O<<30|L>>>2,Pt=q<<6|z>>>26,Nt=z<<6|q>>>26,Ot=C<<11|j>>>21,Lt=j<<11|C>>>21,qt=H<<15|Z>>>17,zt=Z<<15|H>>>17,jt=K<<29|D>>>3,Ct=D<<29|K>>>3,Ht=U<<28|F>>>4,Zt=F<<28|U>>>4,Dt=V<<23|W>>>9,Kt=W<<23|V>>>9,Ut=J<<25|X>>>7,Ft=X<<25|J>>>7,Wt=$<<21|G>>>11,Vt=G<<21|$>>>11,Jt=Q<<24|Y>>>8,Xt=Y<<24|Q>>>8,$t=tt<<27|et>>>5,Gt=et<<27|tt>>>5,Yt=rt<<20|it>>>12,Qt=it<<20|rt>>>12,te=ot<<7|nt>>>25,ee=nt<<7|ot>>>25,re=st<<8|ht>>>24,ie=ht<<8|st>>>24,ne=ut<<14|at>>>18,oe=at<<14|ut>>>18;t[0]=ft^~_t&Ot,t[1]=lt^~St&Lt,t[10]=Ht^~Yt&pt,t[11]=Zt^~Qt&mt,t[20]=Mt^~Pt&Ut,t[21]=bt^~Nt&Ft,t[30]=$t^~dt&xt,t[31]=Gt^~ct&At,t[40]=It^~Dt&te,t[41]=Tt^~Kt&ee,t[2]=_t^~Ot&Wt,t[3]=St^~Lt&Vt,t[12]=Yt^~pt&kt,t[13]=Qt^~mt&Et,t[22]=Pt^~Ut&re,t[23]=Nt^~Ft&ie,t[32]=dt^~xt&qt,t[33]=ct^~At&zt,t[42]=Dt^~te&vt,t[43]=Kt^~ee&gt,t[4]=Ot^~Wt&ne,t[5]=Lt^~Vt&oe,t[14]=pt^~kt&jt,t[15]=mt^~Et&Ct,t[24]=Ut^~re&yt,t[25]=Ft^~ie&wt,t[34]=xt^~qt&Jt,t[35]=At^~zt&Xt,t[44]=te^~vt&Rt,t[45]=ee^~gt&Bt,t[6]=Wt^~ne&ft,t[7]=Vt^~oe&lt,t[16]=kt^~jt&Ht,t[17]=Et^~Ct&Zt,t[26]=re^~yt&Mt,t[27]=ie^~wt&bt,t[36]=qt^~Jt&$t,t[37]=zt^~Xt&Gt,t[46]=vt^~Rt&It,t[47]=gt^~Bt&Tt,t[8]=ne^~ft&_t,t[9]=oe^~lt&St,t[18]=jt^~Ht&Yt,t[19]=Ct^~Zt&Qt,t[28]=yt^~Mt&Pt,t[29]=wt^~bt&Nt,t[38]=Jt^~$t&dt,t[39]=Xt^~Gt&ct,t[48]=Rt^~It&Dt,t[49]=Bt^~Tt&Kt,t[0]^=Sh[2*e],t[1]^=Sh[2*e+1]}};var xh=_h;function Ah(){this.state=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],this.blockSize=null,this.count=0,this.squeezing=!1}Ah.prototype.initialize=function(t,e){for(var r=0;r<50;++r)this.state[r]=0;this.blockSize=t/8,this.count=0,this.squeezing=!1},Ah.prototype.absorb=function(t){for(var e=0;e<t.length;++e)this.state[~~(this.count/4)]^=t[e]<<this.count%4*8,this.count+=1,this.count===this.blockSize&&(xh.p1600(this.state),this.count=0)},Ah.prototype.absorbLastFewBits=function(t){this.state[~~(this.count/4)]^=t<<this.count%4*8,0!=(128&t)&&this.count===this.blockSize-1&&xh.p1600(this.state),this.state[~~((this.blockSize-1)/4)]^=128<<(this.blockSize-1)%4*8,xh.p1600(this.state),this.count=0,this.squeezing=!0},Ah.prototype.squeeze=function(t){this.squeezing||this.absorbLastFewBits(1);for(var e=Buffer.alloc(t),r=0;r<t;++r)e[r]=this.state[~~(this.count/4)]>>>this.count%4*8&255,this.count+=1,this.count===this.blockSize&&(xh.p1600(this.state),this.count=0);return e},Ah.prototype.copy=function(t){for(var e=0;e<50;++e)t.state[e]=this.state[e];t.blockSize=this.blockSize,t.count=this.count,t.squeezing=this.squeezing};var kh=function(t){var e=Mh(t),r=bh(t);return function(t,i){switch("string"==typeof t?t.toLowerCase():t){case"keccak224":return new e(1152,448,null,224,i);case"keccak256":return new e(1088,512,null,256,i);case"keccak384":return new e(832,768,null,384,i);case"keccak512":return new e(576,1024,null,512,i);case"sha3-224":return new e(1152,448,6,224,i);case"sha3-256":return new e(1088,512,6,256,i);case"sha3-384":return new e(832,768,6,384,i);case"sha3-512":return new e(576,1024,6,512,i);case"shake128":return new r(1344,256,31,i);case"shake256":return new r(1088,512,31,i);default:throw new Error("Invald algorithm: "+t)}}}(Ah);try{yn.exports=require("./bindings")}catch(t){yn.exports=kh}Object.defineProperty(vn,"__esModule",{value:!0});var Eh=gn,Rh=yn.exports;vn.keccak224=Eh.createHashFunction((function(){return Rh("keccak224")})),vn.keccak256=Eh.createHashFunction((function(){return Rh("keccak256")})),vn.keccak384=Eh.createHashFunction((function(){return Rh("keccak384")})),vn.keccak512=Eh.createHashFunction((function(){return Rh("keccak512")}));var Bh=r.createHash;!function(t){var e=g&&g.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),r=g&&g.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=g&&g.__importStar||function(t){if(t&&t.__esModule)return t;var i={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&e(i,t,n);return r(i,t),i};Object.defineProperty(t,"__esModule",{value:!0}),t.rlphash=t.ripemd160FromArray=t.ripemd160FromString=t.ripemd160=t.sha256FromArray=t.sha256FromString=t.sha256=t.keccakFromArray=t.keccakFromHexString=t.keccakFromString=t.keccak256=t.keccak=void 0;var n=vn,o=Bh,s=i(C),h=dn,u=cn;t.keccak=function(t,e){switch(void 0===e&&(e=256),(0,u.assertIsBuffer)(t),e){case 224:return(0,n.keccak224)(t);case 256:return(0,n.keccak256)(t);case 384:return(0,n.keccak384)(t);case 512:return(0,n.keccak512)(t);default:throw new Error("Invald algorithm: keccak"+e)}};t.keccak256=function(e){return(0,t.keccak)(e)};t.keccakFromString=function(e,r){void 0===r&&(r=256),(0,u.assertIsString)(e);var i=Buffer.from(e,"utf8");return(0,t.keccak)(i,r)};t.keccakFromHexString=function(e,r){return void 0===r&&(r=256),(0,u.assertIsHexString)(e),(0,t.keccak)((0,h.toBuffer)(e),r)};t.keccakFromArray=function(e,r){return void 0===r&&(r=256),(0,u.assertIsArray)(e),(0,t.keccak)((0,h.toBuffer)(e),r)};var a=function(t){return t=(0,h.toBuffer)(t),o("sha256").update(t).digest()};t.sha256=function(t){return(0,u.assertIsBuffer)(t),a(t)};t.sha256FromString=function(t){return(0,u.assertIsString)(t),a(t)};t.sha256FromArray=function(t){return(0,u.assertIsArray)(t),a(t)};var f=function(t,e){t=(0,h.toBuffer)(t);var r=o("rmd160").update(t).digest();return!0===e?(0,h.setLengthLeft)(r,32):r};t.ripemd160=function(t,e){return(0,u.assertIsBuffer)(t),f(t,e)};t.ripemd160FromString=function(t,e){return(0,u.assertIsString)(t),f(t,e)};t.ripemd160FromArray=function(t,e){return(0,u.assertIsArray)(t),f(t,e)};t.rlphash=function(e){return(0,t.keccak)(s.encode(e))}}(mn);var Ih={};!function(t){var e=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(t,"__esModule",{value:!0}),t.toType=t.TypeOutput=t.bnToRlp=t.bnToUnpaddedBuffer=t.bnToHex=void 0;var r,i=e(z.exports),n=an,o=dn;function s(t){return(0,o.unpadBuffer)(t.toArrayLike(Buffer))}t.bnToHex=function(t){return"0x"+t.toString(16)},t.bnToUnpaddedBuffer=s,t.bnToRlp=function(t){return s(t)},function(t){t[t.Number=0]="Number",t[t.BN=1]="BN",t[t.Buffer=2]="Buffer",t[t.PrefixedHexString=3]="PrefixedHexString"}(r=t.TypeOutput||(t.TypeOutput={})),t.toType=function(t,e){if(null===t)return null;if(void 0!==t){if("string"==typeof t&&!(0,n.isHexString)(t))throw new Error("A string must be provided with a 0x-prefix, given: "+t);if("number"==typeof t&&!Number.isSafeInteger(t))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");var s=(0,o.toBuffer)(t);if(e===r.Buffer)return s;if(e===r.BN)return new i.default(s);if(e===r.Number){var h=new i.default(s),u=new i.default(Number.MAX_SAFE_INTEGER.toString());if(h.gt(u))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)");return h.toNumber()}return"0x"+s.toString("hex")}}}(Ih),function(t){var r=g&&g.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),i=g&&g.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),n=g&&g.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return i(e,t),e},o=g&&g.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)s.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return s},s=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(t,"__esModule",{value:!0}),t.isZeroAddress=t.zeroAddress=t.importPublic=t.privateToAddress=t.privateToPublic=t.publicToAddress=t.pubToAddress=t.isValidPublic=t.isValidPrivate=t.generateAddress2=t.generateAddress=t.isValidChecksumAddress=t.toChecksumAddress=t.isValidAddress=t.Account=void 0;var h=s(e),u=s(z.exports),a=n(C),f=X,l=an,d=q,c=dn,p=mn,m=cn,v=Ih,y=function(){function t(t,e,r,i){void 0===t&&(t=new u.default(0)),void 0===e&&(e=new u.default(0)),void 0===r&&(r=d.KECCAK256_RLP),void 0===i&&(i=d.KECCAK256_NULL),this.nonce=t,this.balance=e,this.stateRoot=r,this.codeHash=i,this._validate()}return t.fromAccountData=function(e){var r=e.nonce,i=e.balance,n=e.stateRoot,o=e.codeHash;return new t(r?new u.default((0,c.toBuffer)(r)):void 0,i?new u.default((0,c.toBuffer)(i)):void 0,n?(0,c.toBuffer)(n):void 0,o?(0,c.toBuffer)(o):void 0)},t.fromRlpSerializedAccount=function(t){var e=a.decode(t);if(!Array.isArray(e))throw new Error("Invalid serialized account input. Must be array");return this.fromValuesArray(e)},t.fromValuesArray=function(e){var r=o(e,4),i=r[0],n=r[1],s=r[2],h=r[3];return new t(new u.default(i),new u.default(n),s,h)},t.prototype._validate=function(){if(this.nonce.lt(new u.default(0)))throw new Error("nonce must be greater than zero");if(this.balance.lt(new u.default(0)))throw new Error("balance must be greater than zero");if(32!==this.stateRoot.length)throw new Error("stateRoot must have a length of 32");if(32!==this.codeHash.length)throw new Error("codeHash must have a length of 32")},t.prototype.raw=function(){return[(0,v.bnToUnpaddedBuffer)(this.nonce),(0,v.bnToUnpaddedBuffer)(this.balance),this.stateRoot,this.codeHash]},t.prototype.serialize=function(){return a.encode(this.raw())},t.prototype.isContract=function(){return!this.codeHash.equals(d.KECCAK256_NULL)},t.prototype.isEmpty=function(){return this.balance.isZero()&&this.nonce.isZero()&&this.codeHash.equals(d.KECCAK256_NULL)},t}();t.Account=y;t.isValidAddress=function(t){try{(0,m.assertIsString)(t)}catch(t){return!1}return/^0x[0-9a-fA-F]{40}$/.test(t)};t.toChecksumAddress=function(t,e){(0,m.assertIsHexString)(t);var r=(0,l.stripHexPrefix)(t).toLowerCase(),i="";e&&(i=(0,v.toType)(e,v.TypeOutput.BN).toString()+"0x");for(var n=(0,p.keccakFromString)(i+r).toString("hex"),o="0x",s=0;s<r.length;s++)parseInt(n[s],16)>=8?o+=r[s].toUpperCase():o+=r[s];return o};t.isValidChecksumAddress=function(e,r){return(0,t.isValidAddress)(e)&&(0,t.toChecksumAddress)(e,r)===e};t.generateAddress=function(t,e){(0,m.assertIsBuffer)(t),(0,m.assertIsBuffer)(e);var r=new u.default(e);return r.isZero()?(0,p.rlphash)([t,null]).slice(-20):(0,p.rlphash)([t,Buffer.from(r.toArray())]).slice(-20)};t.generateAddress2=function(t,e,r){return(0,m.assertIsBuffer)(t),(0,m.assertIsBuffer)(e),(0,m.assertIsBuffer)(r),(0,h.default)(20===t.length),(0,h.default)(32===e.length),(0,p.keccak256)(Buffer.concat([Buffer.from("ff","hex"),t,e,(0,p.keccak256)(r)])).slice(-20)};t.isValidPrivate=function(t){return(0,f.privateKeyVerify)(t)};t.isValidPublic=function(t,e){return void 0===e&&(e=!1),(0,m.assertIsBuffer)(t),64===t.length?(0,f.publicKeyVerify)(Buffer.concat([Buffer.from([4]),t])):!!e&&(0,f.publicKeyVerify)(t)};t.pubToAddress=function(t,e){return void 0===e&&(e=!1),(0,m.assertIsBuffer)(t),e&&64!==t.length&&(t=Buffer.from((0,f.publicKeyConvert)(t,!1).slice(1))),(0,h.default)(64===t.length),(0,p.keccak)(t).slice(-20)},t.publicToAddress=t.pubToAddress;t.privateToPublic=function(t){return(0,m.assertIsBuffer)(t),Buffer.from((0,f.publicKeyCreate)(t,!1)).slice(1)};t.privateToAddress=function(e){return(0,t.publicToAddress)((0,t.privateToPublic)(e))};t.importPublic=function(t){return(0,m.assertIsBuffer)(t),64!==t.length&&(t=Buffer.from((0,f.publicKeyConvert)(t,!1).slice(1))),t};t.zeroAddress=function(){var t=(0,c.zeros)(20);return(0,c.bufferToHex)(t)};t.isZeroAddress=function(e){try{(0,m.assertIsString)(e)}catch(t){return!1}return(0,t.zeroAddress)()===e}}(j);var Th={},Ph=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Th,"__esModule",{value:!0}),Th.Address=void 0;var Nh=Ph(e),Oh=Ph(z.exports),Lh=dn,qh=j,zh=function(){function t(t){(0,Nh.default)(20===t.length,"Invalid address length"),this.buf=t}return t.zero=function(){return new t((0,Lh.zeros)(20))},t.fromString=function(e){return(0,Nh.default)((0,qh.isValidAddress)(e),"Invalid address"),new t((0,Lh.toBuffer)(e))},t.fromPublicKey=function(e){return(0,Nh.default)(Buffer.isBuffer(e),"Public key should be Buffer"),new t((0,qh.pubToAddress)(e))},t.fromPrivateKey=function(e){return(0,Nh.default)(Buffer.isBuffer(e),"Private key should be Buffer"),new t((0,qh.privateToAddress)(e))},t.generate=function(e,r){return(0,Nh.default)(Oh.default.isBN(r)),new t((0,qh.generateAddress)(e.buf,r.toArrayLike(Buffer)))},t.generate2=function(e,r,i){return(0,Nh.default)(Buffer.isBuffer(r)),(0,Nh.default)(Buffer.isBuffer(i)),new t((0,qh.generateAddress2)(e.buf,r,i))},t.prototype.equals=function(t){return this.buf.equals(t.buf)},t.prototype.isZero=function(){return this.equals(t.zero())},t.prototype.isPrecompileOrSystemAddress=function(){var t=new Oh.default(this.buf),e=new Oh.default(0),r=new Oh.default("ffff","hex");return t.gte(e)&&t.lte(r)},t.prototype.toString=function(){return"0x"+this.buf.toString("hex")},t.prototype.toBuffer=function(){return Buffer.from(this.buf)},t}();Th.Address=zh;var jh={},Ch=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(jh,"__esModule",{value:!0}),jh.hashPersonalMessage=jh.isValidSignature=jh.fromRpcSig=jh.toCompactSig=jh.toRpcSig=jh.ecrecover=jh.ecsign=void 0;var Hh=X,Zh=Ch(z.exports),Dh=dn,Kh=mn,Uh=cn,Fh=Ih;function Wh(t,e){var r=(0,Fh.toType)(t,Fh.TypeOutput.BN);if(!e)return r.subn(27);var i=(0,Fh.toType)(e,Fh.TypeOutput.BN);return r.sub(i.muln(2).addn(35))}function Vh(t){var e=new Zh.default(t);return e.eqn(0)||e.eqn(1)}jh.ecsign=function(t,e,r){var i=(0,Hh.ecdsaSign)(t,e),n=i.signature,o=i.recid,s=Buffer.from(n.slice(0,32)),h=Buffer.from(n.slice(32,64));if(!r||"number"==typeof r){if(r&&!Number.isSafeInteger(r))throw new Error("The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)");return{r:s,s:h,v:r?o+(2*r+35):o+27}}return{r:s,s:h,v:(0,Fh.toType)(r,Fh.TypeOutput.BN).muln(2).addn(35).addn(o).toArrayLike(Buffer)}};jh.ecrecover=function(t,e,r,i,n){var o=Buffer.concat([(0,Dh.setLengthLeft)(r,32),(0,Dh.setLengthLeft)(i,32)],64),s=Wh(e,n);if(!Vh(s))throw new Error("Invalid signature v value");var h=(0,Hh.ecdsaRecover)(o,s.toNumber(),t);return Buffer.from((0,Hh.publicKeyConvert)(h,!1).slice(1))};jh.toRpcSig=function(t,e,r,i){if(!Vh(Wh(t,i)))throw new Error("Invalid signature v value");return(0,Dh.bufferToHex)(Buffer.concat([(0,Dh.setLengthLeft)(e,32),(0,Dh.setLengthLeft)(r,32),(0,Dh.toBuffer)(t)]))};jh.toCompactSig=function(t,e,r,i){if(!Vh(Wh(t,i)))throw new Error("Invalid signature v value");var n=(0,Fh.toType)(t,Fh.TypeOutput.Number),o=r;return(n>28&&n%2==1||1===n||28===n)&&((o=Buffer.from(r))[0]|=128),(0,Dh.bufferToHex)(Buffer.concat([(0,Dh.setLengthLeft)(e,32),(0,Dh.setLengthLeft)(o,32)]))};jh.fromRpcSig=function(t){var e,r,i,n=(0,Dh.toBuffer)(t);if(n.length>=65)e=n.slice(0,32),r=n.slice(32,64),i=(0,Dh.bufferToInt)(n.slice(64));else{if(64!==n.length)throw new Error("Invalid signature length");e=n.slice(0,32),r=n.slice(32,64),i=(0,Dh.bufferToInt)(n.slice(32,33))>>7,r[0]&=127}return i<27&&(i+=27),{v:i,r:e,s:r}};jh.isValidSignature=function(t,e,r,i,n){void 0===i&&(i=!0);var o=new Zh.default("7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0",16),s=new Zh.default("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",16);if(32!==e.length||32!==r.length)return!1;if(!Vh(Wh(t,n)))return!1;var h=new Zh.default(e),u=new Zh.default(r);return!(h.isZero()||h.gt(s)||u.isZero()||u.gt(s))&&(!i||1!==u.cmp(o))};jh.hashPersonalMessage=function(t){(0,Uh.assertIsBuffer)(t);var e=Buffer.from("Ethereum Signed Message:\n"+t.length,"utf-8");return(0,Kh.keccak)(Buffer.concat([e,t]))};var Jh={},Xh=g&&g.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),$h=g&&g.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),Gh=g&&g.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&Xh(e,t,r);return $h(e,t),e},Yh=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(Jh,"__esModule",{value:!0}),Jh.defineProperties=void 0;var Qh=Yh(e),tu=an,eu=Gh(C),ru=dn;Jh.defineProperties=function(t,e,r){if(t.raw=[],t._fields=[],t.toJSON=function(e){if(void 0===e&&(e=!1),e){var r={};return t._fields.forEach((function(e){r[e]="0x"+t[e].toString("hex")})),r}return(0,ru.baToJSON)(t.raw)},t.serialize=function(){return eu.encode(t.raw)},e.forEach((function(e,r){function i(){return t.raw[r]}function n(i){"00"!==(i=(0,ru.toBuffer)(i)).toString("hex")||e.allowZero||(i=Buffer.allocUnsafe(0)),e.allowLess&&e.length?(i=(0,ru.unpadBuffer)(i),(0,Qh.default)(e.length>=i.length,"The field "+e.name+" must not have more "+e.length+" bytes")):e.allowZero&&0===i.length||!e.length||(0,Qh.default)(e.length===i.length,"The field "+e.name+" must have byte length of "+e.length),t.raw[r]=i}t._fields.push(e.name),Object.defineProperty(t,e.name,{enumerable:!0,configurable:!0,get:i,set:n}),e.default&&(t[e.name]=e.default),e.alias&&Object.defineProperty(t,e.alias,{enumerable:!1,configurable:!0,set:n,get:i})})),r)if("string"==typeof r&&(r=Buffer.from((0,tu.stripHexPrefix)(r),"hex")),Buffer.isBuffer(r)&&(r=eu.decode(r)),Array.isArray(r)){if(r.length>t._fields.length)throw new Error("wrong number of fields in data");r.forEach((function(e,r){t[t._fields[r]]=(0,ru.toBuffer)(e)}))}else{if("object"!==s(r))throw new Error("invalid data");var i=Object.keys(r);e.forEach((function(e){-1!==i.indexOf(e.name)&&(t[e.name]=r[e.name]),-1!==i.indexOf(e.alias)&&(t[e.alias]=r[e.alias])}))}};var iu={},nu=g&&g.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),ou=g&&g.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),su=g&&g.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)"default"!==r&&Object.prototype.hasOwnProperty.call(t,r)&&nu(e,t,r);return ou(e,t),e},hu=g&&g.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(iu,"__esModule",{value:!0}),iu.rlp=iu.BN=void 0;var uu=hu(z.exports);iu.BN=uu.default;var au=su(C);iu.rlp=au,function(t){var e=g&&g.__createBinding||(Object.create?function(t,e,r,i){void 0===i&&(i=r),Object.defineProperty(t,i,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,i){void 0===i&&(i=r),t[i]=e[r]}),r=g&&g.__exportStar||function(t,r){for(var i in t)"default"===i||Object.prototype.hasOwnProperty.call(r,i)||e(r,t,i)};Object.defineProperty(t,"__esModule",{value:!0}),t.isHexString=t.getKeys=t.fromAscii=t.fromUtf8=t.toAscii=t.arrayContainsArray=t.getBinarySize=t.padToEven=t.stripHexPrefix=t.isHexPrefixed=void 0,r(q,t),r(j,t),r(Th,t),r(mn,t),r(jh,t),r(dn,t),r(Jh,t),r(iu,t),r(Ih,t);var i=an;Object.defineProperty(t,"isHexPrefixed",{enumerable:!0,get:function(){return i.isHexPrefixed}}),Object.defineProperty(t,"stripHexPrefix",{enumerable:!0,get:function(){return i.stripHexPrefix}}),Object.defineProperty(t,"padToEven",{enumerable:!0,get:function(){return i.padToEven}}),Object.defineProperty(t,"getBinarySize",{enumerable:!0,get:function(){return i.getBinarySize}}),Object.defineProperty(t,"arrayContainsArray",{enumerable:!0,get:function(){return i.arrayContainsArray}}),Object.defineProperty(t,"toAscii",{enumerable:!0,get:function(){return i.toAscii}}),Object.defineProperty(t,"fromUtf8",{enumerable:!0,get:function(){return i.fromUtf8}}),Object.defineProperty(t,"fromAscii",{enumerable:!0,get:function(){return i.fromAscii}}),Object.defineProperty(t,"getKeys",{enumerable:!0,get:function(){return i.getKeys}}),Object.defineProperty(t,"isHexString",{enumerable:!0,get:function(){return i.isHexString}})}(L);var fu,lu={},du={},cu={exports:{}};fu=cu,function(){var t="input is invalid type",e="object"===("undefined"==typeof window?"undefined":s(window)),r=e?window:{};r.JS_SHA3_NO_WINDOW&&(e=!1);var i=!e&&"object"===("undefined"==typeof self?"undefined":s(self));!r.JS_SHA3_NO_NODE_JS&&"object"===("undefined"==typeof process?"undefined":s(process))&&process.versions&&process.versions.node?r=g:i&&(r=self);var n=!r.JS_SHA3_NO_COMMON_JS&&fu.exports,o=!r.JS_SHA3_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,h="0123456789abcdef".split(""),u=[4,1024,262144,67108864],a=[0,8,16,24],f=[1,0,32898,0,32906,2147483648,2147516416,2147483648,32907,0,2147483649,0,2147516545,2147483648,32777,2147483648,138,0,136,0,2147516425,0,2147483658,0,2147516555,0,139,2147483648,32905,2147483648,32771,2147483648,32770,2147483648,128,2147483648,32778,0,2147483658,2147483648,2147516545,2147483648,32896,2147483648,2147483649,0,2147516424,2147483648],l=[224,256,384,512],d=[128,256],c=["hex","buffer","arrayBuffer","array","digest"],p={128:168,256:136};!r.JS_SHA3_NO_NODE_JS&&Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),!o||!r.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(t){return"object"===s(t)&&t.buffer&&t.buffer.constructor===ArrayBuffer});for(var m=function(t,e,r){return function(i){return new T(t,e,t).update(i)[r]()}},v=function(t,e,r){return function(i,n){return new T(t,e,n).update(i)[r]()}},y=function(t,e,r){return function(e,i,n,o){return S["cshake"+t].update(e,i,n,o)[r]()}},w=function(t,e,r){return function(e,i,n,o){return S["kmac"+t].update(e,i,n,o)[r]()}},M=function(t,e,r,i){for(var n=0;n<c.length;++n){var o=c[n];t[o]=e(r,i,o)}return t},b=function(t,e){var r=m(t,e,"hex");return r.create=function(){return new T(t,e,t)},r.update=function(t){return r.create().update(t)},M(r,m,t,e)},_=[{name:"keccak",padding:[1,256,65536,16777216],bits:l,createMethod:b},{name:"sha3",padding:[6,1536,393216,100663296],bits:l,createMethod:b},{name:"shake",padding:[31,7936,2031616,520093696],bits:d,createMethod:function(t,e){var r=v(t,e,"hex");return r.create=function(r){return new T(t,e,r)},r.update=function(t,e){return r.create(e).update(t)},M(r,v,t,e)}},{name:"cshake",padding:u,bits:d,createMethod:function(t,e){var r=p[t],i=y(t,0,"hex");return i.create=function(i,n,o){return n||o?new T(t,e,i).bytepad([n,o],r):S["shake"+t].create(i)},i.update=function(t,e,r,n){return i.create(e,r,n).update(t)},M(i,y,t,e)}},{name:"kmac",padding:u,bits:d,createMethod:function(t,e){var r=p[t],i=w(t,0,"hex");return i.create=function(i,n,o){return new P(t,e,n).bytepad(["KMAC",o],r).bytepad([i],r)},i.update=function(t,e,r,n){return i.create(t,r,n).update(e)},M(i,w,t,e)}}],S={},x=[],A=0;A<_.length;++A)for(var k=_[A],E=k.bits,R=0;R<E.length;++R){var B=k.name+"_"+E[R];if(x.push(B),S[B]=k.createMethod(E[R],k.padding),"sha3"!==k.name){var I=k.name+E[R];x.push(I),S[I]=S[B]}}function T(t,e,r){this.blocks=[],this.s=[],this.padding=e,this.outputBits=r,this.reset=!0,this.finalized=!1,this.block=0,this.start=0,this.blockCount=1600-(t<<1)>>5,this.byteCount=this.blockCount<<2,this.outputBlocks=r>>5,this.extraBytes=(31&r)>>3;for(var i=0;i<50;++i)this.s[i]=0}function P(t,e,r){T.call(this,t,e,r)}T.prototype.update=function(e){if(this.finalized)throw new Error("finalize already called");var r,i=s(e);if("string"!==i){if("object"!==i)throw new Error(t);if(null===e)throw new Error(t);if(o&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||o&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}for(var n,h,u=this.blocks,f=this.byteCount,l=e.length,d=this.blockCount,c=0,p=this.s;c<l;){if(this.reset)for(this.reset=!1,u[0]=this.block,n=1;n<d+1;++n)u[n]=0;if(r)for(n=this.start;c<l&&n<f;++c)u[n>>2]|=e[c]<<a[3&n++];else for(n=this.start;c<l&&n<f;++c)(h=e.charCodeAt(c))<128?u[n>>2]|=h<<a[3&n++]:h<2048?(u[n>>2]|=(192|h>>6)<<a[3&n++],u[n>>2]|=(128|63&h)<<a[3&n++]):h<55296||h>=57344?(u[n>>2]|=(224|h>>12)<<a[3&n++],u[n>>2]|=(128|h>>6&63)<<a[3&n++],u[n>>2]|=(128|63&h)<<a[3&n++]):(h=65536+((1023&h)<<10|1023&e.charCodeAt(++c)),u[n>>2]|=(240|h>>18)<<a[3&n++],u[n>>2]|=(128|h>>12&63)<<a[3&n++],u[n>>2]|=(128|h>>6&63)<<a[3&n++],u[n>>2]|=(128|63&h)<<a[3&n++]);if(this.lastByteIndex=n,n>=f){for(this.start=n-f,this.block=u[d],n=0;n<d;++n)p[n]^=u[n];N(p),this.reset=!0}else this.start=n}return this},T.prototype.encode=function(t,e){var r=255&t,i=1,n=[r];for(r=255&(t>>=8);r>0;)n.unshift(r),r=255&(t>>=8),++i;return e?n.push(i):n.unshift(i),this.update(n),n.length},T.prototype.encodeString=function(e){var r,i=s(e);if("string"!==i){if("object"!==i)throw new Error(t);if(null===e)throw new Error(t);if(o&&e.constructor===ArrayBuffer)e=new Uint8Array(e);else if(!(Array.isArray(e)||o&&ArrayBuffer.isView(e)))throw new Error(t);r=!0}var n=0,h=e.length;if(r)n=h;else for(var u=0;u<e.length;++u){var a=e.charCodeAt(u);a<128?n+=1:a<2048?n+=2:a<55296||a>=57344?n+=3:(a=65536+((1023&a)<<10|1023&e.charCodeAt(++u)),n+=4)}return n+=this.encode(8*n),this.update(e),n},T.prototype.bytepad=function(t,e){for(var r=this.encode(e),i=0;i<t.length;++i)r+=this.encodeString(t[i]);var n=e-r%e,o=[];return o.length=n,this.update(o),this},T.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var t=this.blocks,e=this.lastByteIndex,r=this.blockCount,i=this.s;if(t[e>>2]|=this.padding[3&e],this.lastByteIndex===this.byteCount)for(t[0]=t[r],e=1;e<r+1;++e)t[e]=0;for(t[r-1]|=2147483648,e=0;e<r;++e)i[e]^=t[e];N(i)}},T.prototype.toString=T.prototype.hex=function(){this.finalize();for(var t,e=this.blockCount,r=this.s,i=this.outputBlocks,n=this.extraBytes,o=0,s=0,u="";s<i;){for(o=0;o<e&&s<i;++o,++s)t=r[o],u+=h[t>>4&15]+h[15&t]+h[t>>12&15]+h[t>>8&15]+h[t>>20&15]+h[t>>16&15]+h[t>>28&15]+h[t>>24&15];s%e==0&&(N(r),o=0)}return n&&(t=r[o],u+=h[t>>4&15]+h[15&t],n>1&&(u+=h[t>>12&15]+h[t>>8&15]),n>2&&(u+=h[t>>20&15]+h[t>>16&15])),u},T.prototype.arrayBuffer=function(){this.finalize();var t,e=this.blockCount,r=this.s,i=this.outputBlocks,n=this.extraBytes,o=0,s=0,h=this.outputBits>>3;t=n?new ArrayBuffer(i+1<<2):new ArrayBuffer(h);for(var u=new Uint32Array(t);s<i;){for(o=0;o<e&&s<i;++o,++s)u[s]=r[o];s%e==0&&N(r)}return n&&(u[o]=r[o],t=t.slice(0,h)),t},T.prototype.buffer=T.prototype.arrayBuffer,T.prototype.digest=T.prototype.array=function(){this.finalize();for(var t,e,r=this.blockCount,i=this.s,n=this.outputBlocks,o=this.extraBytes,s=0,h=0,u=[];h<n;){for(s=0;s<r&&h<n;++s,++h)t=h<<2,e=i[s],u[t]=255&e,u[t+1]=e>>8&255,u[t+2]=e>>16&255,u[t+3]=e>>24&255;h%r==0&&N(i)}return o&&(t=h<<2,e=i[s],u[t]=255&e,o>1&&(u[t+1]=e>>8&255),o>2&&(u[t+2]=e>>16&255)),u},P.prototype=new T,P.prototype.finalize=function(){return this.encode(this.outputBits,!0),T.prototype.finalize.call(this)};var N=function(t){var e,r,i,n,o,s,h,u,a,l,d,c,p,m,v,g,y,w,M,b,_,S,x,A,k,E,R,B,I,T,P,N,O,L,q,z,j,C,H,Z,D,K,U,F,W,V,J,X,$,G,Y,Q,tt,et,rt,it,nt,ot,st,ht,ut,at,ft;for(i=0;i<48;i+=2)n=t[0]^t[10]^t[20]^t[30]^t[40],o=t[1]^t[11]^t[21]^t[31]^t[41],s=t[2]^t[12]^t[22]^t[32]^t[42],h=t[3]^t[13]^t[23]^t[33]^t[43],u=t[4]^t[14]^t[24]^t[34]^t[44],a=t[5]^t[15]^t[25]^t[35]^t[45],l=t[6]^t[16]^t[26]^t[36]^t[46],d=t[7]^t[17]^t[27]^t[37]^t[47],e=(c=t[8]^t[18]^t[28]^t[38]^t[48])^(s<<1|h>>>31),r=(p=t[9]^t[19]^t[29]^t[39]^t[49])^(h<<1|s>>>31),t[0]^=e,t[1]^=r,t[10]^=e,t[11]^=r,t[20]^=e,t[21]^=r,t[30]^=e,t[31]^=r,t[40]^=e,t[41]^=r,e=n^(u<<1|a>>>31),r=o^(a<<1|u>>>31),t[2]^=e,t[3]^=r,t[12]^=e,t[13]^=r,t[22]^=e,t[23]^=r,t[32]^=e,t[33]^=r,t[42]^=e,t[43]^=r,e=s^(l<<1|d>>>31),r=h^(d<<1|l>>>31),t[4]^=e,t[5]^=r,t[14]^=e,t[15]^=r,t[24]^=e,t[25]^=r,t[34]^=e,t[35]^=r,t[44]^=e,t[45]^=r,e=u^(c<<1|p>>>31),r=a^(p<<1|c>>>31),t[6]^=e,t[7]^=r,t[16]^=e,t[17]^=r,t[26]^=e,t[27]^=r,t[36]^=e,t[37]^=r,t[46]^=e,t[47]^=r,e=l^(n<<1|o>>>31),r=d^(o<<1|n>>>31),t[8]^=e,t[9]^=r,t[18]^=e,t[19]^=r,t[28]^=e,t[29]^=r,t[38]^=e,t[39]^=r,t[48]^=e,t[49]^=r,m=t[0],v=t[1],V=t[11]<<4|t[10]>>>28,J=t[10]<<4|t[11]>>>28,B=t[20]<<3|t[21]>>>29,I=t[21]<<3|t[20]>>>29,ht=t[31]<<9|t[30]>>>23,ut=t[30]<<9|t[31]>>>23,K=t[40]<<18|t[41]>>>14,U=t[41]<<18|t[40]>>>14,L=t[2]<<1|t[3]>>>31,q=t[3]<<1|t[2]>>>31,g=t[13]<<12|t[12]>>>20,y=t[12]<<12|t[13]>>>20,X=t[22]<<10|t[23]>>>22,$=t[23]<<10|t[22]>>>22,T=t[33]<<13|t[32]>>>19,P=t[32]<<13|t[33]>>>19,at=t[42]<<2|t[43]>>>30,ft=t[43]<<2|t[42]>>>30,et=t[5]<<30|t[4]>>>2,rt=t[4]<<30|t[5]>>>2,z=t[14]<<6|t[15]>>>26,j=t[15]<<6|t[14]>>>26,w=t[25]<<11|t[24]>>>21,M=t[24]<<11|t[25]>>>21,G=t[34]<<15|t[35]>>>17,Y=t[35]<<15|t[34]>>>17,N=t[45]<<29|t[44]>>>3,O=t[44]<<29|t[45]>>>3,A=t[6]<<28|t[7]>>>4,k=t[7]<<28|t[6]>>>4,it=t[17]<<23|t[16]>>>9,nt=t[16]<<23|t[17]>>>9,C=t[26]<<25|t[27]>>>7,H=t[27]<<25|t[26]>>>7,b=t[36]<<21|t[37]>>>11,_=t[37]<<21|t[36]>>>11,Q=t[47]<<24|t[46]>>>8,tt=t[46]<<24|t[47]>>>8,F=t[8]<<27|t[9]>>>5,W=t[9]<<27|t[8]>>>5,E=t[18]<<20|t[19]>>>12,R=t[19]<<20|t[18]>>>12,ot=t[29]<<7|t[28]>>>25,st=t[28]<<7|t[29]>>>25,Z=t[38]<<8|t[39]>>>24,D=t[39]<<8|t[38]>>>24,S=t[48]<<14|t[49]>>>18,x=t[49]<<14|t[48]>>>18,t[0]=m^~g&w,t[1]=v^~y&M,t[10]=A^~E&B,t[11]=k^~R&I,t[20]=L^~z&C,t[21]=q^~j&H,t[30]=F^~V&X,t[31]=W^~J&$,t[40]=et^~it&ot,t[41]=rt^~nt&st,t[2]=g^~w&b,t[3]=y^~M&_,t[12]=E^~B&T,t[13]=R^~I&P,t[22]=z^~C&Z,t[23]=j^~H&D,t[32]=V^~X&G,t[33]=J^~$&Y,t[42]=it^~ot&ht,t[43]=nt^~st&ut,t[4]=w^~b&S,t[5]=M^~_&x,t[14]=B^~T&N,t[15]=I^~P&O,t[24]=C^~Z&K,t[25]=H^~D&U,t[34]=X^~G&Q,t[35]=$^~Y&tt,t[44]=ot^~ht&at,t[45]=st^~ut&ft,t[6]=b^~S&m,t[7]=_^~x&v,t[16]=T^~N&A,t[17]=P^~O&k,t[26]=Z^~K&L,t[27]=D^~U&q,t[36]=G^~Q&F,t[37]=Y^~tt&W,t[46]=ht^~at&et,t[47]=ut^~ft&rt,t[8]=S^~m&g,t[9]=x^~v&y,t[18]=N^~A&E,t[19]=O^~k&R,t[28]=K^~L&z,t[29]=U^~q&j,t[38]=Q^~F&V,t[39]=tt^~W&J,t[48]=at^~et&it,t[49]=ft^~rt&nt,t[0]^=f[i],t[1]^=f[i+1]};if(n)fu.exports=S;else for(A=0;A<x.length;++A)r[x[A]]=S[x[A]]}(),Object.defineProperty(du,"__esModule",{value:!0});var pu=cu.exports;function mu(t){if(null==t)throw new Error("cannot convert null value to array");if("string"==typeof t){var e=t.match(/^(0x)?[0-9a-fA-F]*$/);if(!e)throw new Error("invalid hexidecimal string");if("0x"!==e[1])throw new Error("hex string must have 0x prefix");(t=t.substring(2)).length%2&&(t="0"+t);for(var r=[],i=0;i<t.length;i+=2)r.push(parseInt(t.substr(i,2),16));return vu(new Uint8Array(r))}if(function(t){if(!t||parseInt(String(t.length))!=t.length||"string"==typeof t)return!1;for(var e=0;e<t.length;e++){var r=t[e];if(r<0||r>=256||parseInt(String(r))!=r)return!1}return!0}(t))return vu(new Uint8Array(t));throw new Error("invalid arrayify value")}function vu(t){var e=arguments;return void 0!==t.slice||(t.slice=function(){var r=Array.prototype.slice.call(e);return vu(new Uint8Array(Array.prototype.slice.apply(t,r)))}),t}du.keccak256=function(t){return"0x"+pu.keccak_256(mu(t))},du.padLeft=function(t,e){var r=/^0x/i.test(t)||"number"==typeof t,i=e-(t=t.toString().replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(r?"0x":"")+new Array(i).join("0")+t},du.bytesToHex=function(t){for(var e=[],r=0;r<t.length;r++)e.push((t[r]>>>4).toString(16)),e.push((15&t[r]).toString(16));return"0x".concat(e.join("").replace(/^0+/,""))},du.toByteArray=mu,Object.defineProperty(lu,"__esModule",{value:!0});var gu=du;function yu(t){return"string"==typeof t&&(!!/^(0x)?[0-9a-f]{512}$/i.test(t)&&!(!/^(0x)?[0-9a-f]{512}$/.test(t)&&!/^(0x)?[0-9A-F]{512}$/.test(t)))}function wu(t,e){"object"===s(e)&&e.constructor===Uint8Array&&(e=gu.bytesToHex(e));for(var r=gu.keccak256(e).replace("0x",""),i=0;i<12;i+=4){var n=(parseInt(r.substr(i,2),16)<<8)+parseInt(r.substr(i+2,2),16)&2047,o=1<<n%4;if((Mu(t.charCodeAt(t.length-1-Math.floor(n/4)))&o)!==o)return!1}return!0}function Mu(t){if(t>=48&&t<=57)return t-48;if(t>=65&&t<=70)return t-55;if(t>=97&&t<=102)return t-87;throw new Error("invalid bloom")}function bu(t){return"string"==typeof t&&(!!/^(0x)?[0-9a-f]{64}$/i.test(t)&&!(!/^(0x)?[0-9a-f]{64}$/.test(t)&&!/^(0x)?[0-9A-F]{64}$/.test(t)))}function _u(t){return"string"==typeof t&&(!!t.match(/^(0x)?[0-9a-fA-F]{40}$/)||!!t.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/))}lu.isBloom=yu,lu.isInBloom=wu,lu.isUserEthereumAddressInBloom=function(t,e){if(!yu(t))throw new Error("Invalid bloom given");if(!_u(e))throw new Error('Invalid ethereum address given: "'.concat(e,'"'));return wu(t,gu.padLeft(e,64))},lu.isContractAddressInBloom=function(t,e){if(!yu(t))throw new Error("Invalid bloom given");if(!_u(e))throw new Error('Invalid contract address given: "'.concat(e,'"'));return wu(t,e)},lu.isTopicInBloom=function(t,e){if(!yu(t))throw new Error("Invalid bloom given");if(!bu(e))throw new Error("Invalid topic");return wu(t,e)},lu.isTopic=bu,lu.isAddress=_u;var Su=N.exports,xu=x,Au=O,ku=L,Eu=lu,Ru=function(t){return Su.isBN(t)},Bu=function(t){return t&&t.constructor&&"BigNumber"===t.constructor.name},Iu=function(t){try{return xu.apply(null,arguments)}catch(e){throw new Error(e+' Given value: "'+t+'"')}},Tu=function(t){return!!/^(0x)?[0-9a-f]{40}$/i.test(t)&&(!(!/^(0x|0X)?[0-9a-f]{40}$/.test(t)&&!/^(0x|0X)?[0-9A-F]{40}$/.test(t))||Pu(t))},Pu=function(t){t=t.replace(/^0x/i,"");for(var e=Hu(t.toLowerCase()).replace(/^0x/i,""),r=0;r<40;r++)if(parseInt(e[r],16)>7&&t[r].toUpperCase()!==t[r]||parseInt(e[r],16)<=7&&t[r].toLowerCase()!==t[r])return!1;return!0},Nu=function(t){var e="";t=(t=(t=(t=(t=Au.encode(t)).replace(/^(?:\u0000)*/,"")).split("").reverse().join("")).replace(/^(?:\u0000)*/,"")).split("").reverse().join("");for(var r=0;r<t.length;r++){var i=t.charCodeAt(r).toString(16);e+=i.length<2?"0"+i:i}return"0x"+e},Ou=function(t){if(!t)return t;if("string"==typeof t&&!zu(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return Iu(t).toNumber()},Lu=function(t){if(null==t)return t;if(!isFinite(t)&&!zu(t))throw new Error('Given input "'+t+'" is not a number.');var e=Iu(t),r=e.toString(16);return e.lt(new Su(0))?"-0x"+r.substr(1):"0x"+r},qu=function(t,e){if(Tu(t))return e?"address":"0x"+t.toLowerCase().replace(/^0x/i,"");if("boolean"==typeof t)return e?"bool":t?"0x01":"0x00";if(Buffer.isBuffer(t))return"0x"+t.toString("hex");if("object"===s(t)&&t&&!Bu(t)&&!Ru(t))return e?"string":Nu(JSON.stringify(t));if("string"==typeof t){if(0===t.indexOf("-0x")||0===t.indexOf("-0X"))return e?"int256":Lu(t);if(0===t.indexOf("0x")||0===t.indexOf("0X"))return e?"bytes":t;if(!isFinite(t))return e?"string":Nu(t)}return e?t<0?"int256":"uint256":Lu(t)},zu=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-)?0x[0-9a-f]*$/i.test(t)},ju=function(t){return("string"==typeof t||"number"==typeof t)&&/^(-0x|0x)?[0-9a-f]*$/i.test(t)},Cu="0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",Hu=function(t){Ru(t)&&(t=t.toString()),zu(t)&&/^0x/i.test(t.toString())?t=ku.toBuffer(t):"string"==typeof t&&(t=Buffer.from(t,"utf-8"));var e=ku.bufferToHex(ku.keccak256(t));return e===Cu?null:e};Hu._Hash=ku.keccak256;var Zu={BN:Su,isBN:Ru,isBigNumber:Bu,toBN:Iu,isAddress:Tu,isBloom:function(t){return Eu.isBloom(t)},isUserEthereumAddressInBloom:function(t,e){return Eu.isUserEthereumAddressInBloom(t,e)},isContractAddressInBloom:function(t,e){return Eu.isContractAddressInBloom(t,e)},isTopic:function(t){return Eu.isTopic(t)},isTopicInBloom:function(t,e){return Eu.isTopicInBloom(t,e)},isInBloom:function(t,e){return Eu.isInBloom(t,e)},checkAddressChecksum:Pu,utf8ToHex:Nu,hexToUtf8:function(t){if(!zu(t))throw new Error('The parameter "'+t+'" must be a valid HEX string.');for(var e="",r=0,i=(t=(t=(t=(t=(t=t.replace(/^0x/i,"")).replace(/^(?:00)*/,"")).split("").reverse().join("")).replace(/^(?:00)*/,"")).split("").reverse().join("")).length,n=0;n<i;n+=2)r=parseInt(t.substr(n,2),16),e+=String.fromCharCode(r);return Au.decode(e)},hexToNumber:Ou,hexToNumberString:function(t){if(!t)return t;if("string"==typeof t&&!zu(t))throw new Error('Given value "'+t+'" is not a valid hex string.');return Iu(t).toString(10)},numberToHex:Lu,toHex:qu,hexToBytes:function(t){if(t=t.toString(16),!zu(t))throw new Error('Given value "'+t+'" is not a valid hex string.');t=t.replace(/^0x/i,"");for(var e=[],r=0;r<t.length;r+=2)e.push(parseInt(t.substr(r,2),16));return e},bytesToHex:function(t){for(var e=[],r=0;r<t.length;r++)e.push((t[r]>>>4).toString(16)),e.push((15&t[r]).toString(16));return"0x"+e.join("")},isHex:ju,isHexStrict:zu,stripHexPrefix:function(t){return 0!==t&&ju(t)?t.replace(/^(-)?0x/i,"$1"):t},leftPad:function(t,e,r){var i=/^0x/i.test(t)||"number"==typeof t,n=e-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(i?"0x":"")+new Array(n).join(r||"0")+t},rightPad:function(t,e,r){var i=/^0x/i.test(t)||"number"==typeof t,n=e-(t=t.toString(16).replace(/^0x/i,"")).length+1>=0?e-t.length+1:0;return(i?"0x":"")+t+new Array(n).join(r||"0")},toTwosComplement:function(t){return"0x"+Iu(t).toTwos(256).toString(16,64)},sha3:Hu,sha3Raw:function(t){return null===(t=Hu(t))?Cu:t},toNumber:function(t){return"number"==typeof t?t:Ou(qu(t))}},Du=N.exports,Ku=Zu,Uu=function(t){var e=s(t);if("string"===e)return Ku.isHexStrict(t)?new Du(t.replace(/0x/i,""),16):new Du(t,10);if("number"===e)return new Du(t);if(Ku.isBigNumber(t))return new Du(t.toString(10));if(Ku.isBN(t))return t;throw new Error(t+" is not a number")},Fu=function(t,e,r){var i,n;if(t=function(t){return t.startsWith("int[")?"int256"+t.slice(3):"int"===t?"int256":t.startsWith("uint[")?"uint256"+t.slice(4):"uint"===t?"uint256":t.startsWith("fixed[")?"fixed128x128"+t.slice(5):"fixed"===t?"fixed128x128":t.startsWith("ufixed[")?"ufixed128x128"+t.slice(6):"ufixed"===t?"ufixed128x128":t}(t),"bytes"===t){if(e.replace(/^0x/i,"").length%2!=0)throw new Error("Invalid bytes characters "+e.length);return e}if("string"===t)return Ku.utf8ToHex(e);if("bool"===t)return e?"01":"00";if(t.startsWith("address")){if(i=r?64:40,!Ku.isAddress(e))throw new Error(e+" is not a valid address, or the checksum is invalid.");return Ku.leftPad(e.toLowerCase(),i)}if(i=function(t){var e=/^\D+(\d+).*$/.exec(t);return e?parseInt(e[1],10):null}(t),t.startsWith("bytes")){if(!i)throw new Error("bytes[] not yet supported in solidity");if(r&&(i=32),i<1||i>32||i<e.replace(/^0x/i,"").length/2)throw new Error("Invalid bytes"+i+" for "+e);return Ku.rightPad(e,2*i)}if(t.startsWith("uint")){if(i%8||i<8||i>256)throw new Error("Invalid uint"+i+" size");if((n=Uu(e)).bitLength()>i)throw new Error("Supplied uint exceeds width: "+i+" vs "+n.bitLength());if(n.lt(new Du(0)))throw new Error("Supplied uint "+n.toString()+" is negative");return i?Ku.leftPad(n.toString("hex"),i/8*2):n}if(t.startsWith("int")){if(i%8||i<8||i>256)throw new Error("Invalid int"+i+" size");if((n=Uu(e)).bitLength()>i)throw new Error("Supplied int exceeds width: "+i+" vs "+n.bitLength());return n.lt(new Du(0))?n.toTwos(i).toString("hex"):i?Ku.leftPad(n.toString("hex"),i/8*2):n}throw new Error("Unsupported or invalid type: "+t)},Wu=function(t){if(Array.isArray(t))throw new Error("Autodetection of array types is not supported.");var e,r,i="";if(t&&"object"===s(t)&&(t.hasOwnProperty("v")||t.hasOwnProperty("t")||t.hasOwnProperty("value")||t.hasOwnProperty("type"))?(e=t.hasOwnProperty("t")?t.t:t.type,i=t.hasOwnProperty("v")?t.v:t.value):(e=Ku.toHex(t,!0),i=Ku.toHex(t),e.startsWith("int")||e.startsWith("uint")||(e="bytes")),!e.startsWith("int")&&!e.startsWith("uint")||"string"!=typeof i||/^(-)?0x/i.test(i)||(i=new Du(i)),Array.isArray(i)){if(r=function(t){var e=/^\D+\d*\[(\d+)\]$/.exec(t);return e?parseInt(e[1],10):null}(e),r&&i.length!==r)throw new Error(e+" is not matching the given array "+JSON.stringify(i));r=i.length}return Array.isArray(i)?i.map((function(t){return Fu(e,t,r).toString("hex").replace("0x","")})).join(""):Fu(e,i,r).toString("hex").replace("0x","")},Vu=P,Ju=Zu,Xu={soliditySha3:function(){var t=Array.prototype.slice.call(arguments),e=t.map(Wu);return Ku.sha3("0x"+e.join(""))},soliditySha3Raw:function(){return Ku.sha3Raw("0x"+Array.prototype.slice.call(arguments).map(Wu).join(""))},encodePacked:function(){var t=Array.prototype.slice.call(arguments),e=t.map(Wu);return"0x"+e.join("").toLowerCase()}},$u=hn,Gu=N.exports,Yu=function t(e,r){var i=[];return r.forEach((function(r){if("object"===s(r.components)){if("tuple"!==r.type.substring(0,5))throw new Error("components found but type is not tuple; report on GitHub");var n="",o=r.type.indexOf("[");o>=0&&(n=r.type.substring(o));var h=t(e,r.components);Array.isArray(h)&&e?i.push("tuple("+h.join(",")+")"+n):e?i.push("("+h+")"):i.push("("+h.join(",")+")"+n)}else i.push(r.type)})),i},Qu=function(t){if(!Ju.isHexStrict(t))throw new Error("The parameter must be a valid HEX string.");var e="",r=0,i=t.length;for("0x"===t.substring(0,2)&&(r=2);r<i;r+=2){var n=parseInt(t.substr(r,2),16);e+=String.fromCharCode(n)}return e},ta=function(t){if(!t)return"0x00";for(var e="",r=0;r<t.length;r++){var i=t.charCodeAt(r).toString(16);e+=i.length<2?"0"+i:i}return"0x"+e},ea=function(t){if(t=t?t.toLowerCase():"ether",!Vu.unitMap[t])throw new Error('This unit "'+t+"\" doesn't exist, please use the one of the following units"+JSON.stringify(Vu.unitMap,null,2));return t},ra={_fireError:function(t,e,r,i,n){return!t||"object"!==s(t)||t instanceof Error||!t.data||((t.data&&"object"===s(t.data)||Array.isArray(t.data))&&(t.data=JSON.stringify(t.data,null,2)),t=t.message+"\n"+t.data),"string"==typeof t&&(t=new Error(t)),"function"==typeof i&&i(t,n),"function"==typeof r&&((e&&"function"==typeof e.listeners&&e.listeners("error").length||"function"==typeof i)&&e.catch((function(){})),setTimeout((function(){r(t)}),1)),e&&"function"==typeof e.emit&&setTimeout((function(){e.emit("error",t,n),e.removeAllListeners()}),1),e},_jsonInterfaceMethodToString:function(t){return t&&"object"===s(t)&&t.name&&-1!==t.name.indexOf("(")?t.name:t.name+"("+Yu(!1,t.inputs).join(",")+")"},_flattenTypes:Yu,randomHex:function(t){return"0x"+$u(t).toString("hex")},BN:Ju.BN,isBN:Ju.isBN,isBigNumber:Ju.isBigNumber,isHex:Ju.isHex,isHexStrict:Ju.isHexStrict,sha3:Ju.sha3,sha3Raw:Ju.sha3Raw,keccak256:Ju.sha3,soliditySha3:Xu.soliditySha3,soliditySha3Raw:Xu.soliditySha3Raw,encodePacked:Xu.encodePacked,isAddress:Ju.isAddress,checkAddressChecksum:Ju.checkAddressChecksum,toChecksumAddress:function(t){if(void 0===t)return"";if(!/^(0x)?[0-9a-f]{40}$/i.test(t))throw new Error('Given address "'+t+'" is not a valid Ethereum address.');t=t.toLowerCase().replace(/^0x/i,"");for(var e=Ju.sha3(t).replace(/^0x/i,""),r="0x",i=0;i<t.length;i++)parseInt(e[i],16)>7?r+=t[i].toUpperCase():r+=t[i];return r},toHex:Ju.toHex,toBN:Ju.toBN,bytesToHex:Ju.bytesToHex,hexToBytes:Ju.hexToBytes,hexToNumberString:Ju.hexToNumberString,hexToNumber:Ju.hexToNumber,toDecimal:Ju.hexToNumber,numberToHex:Ju.numberToHex,fromDecimal:Ju.numberToHex,hexToUtf8:Ju.hexToUtf8,hexToString:Ju.hexToUtf8,toUtf8:Ju.hexToUtf8,stripHexPrefix:Ju.stripHexPrefix,utf8ToHex:Ju.utf8ToHex,stringToHex:Ju.utf8ToHex,fromUtf8:Ju.utf8ToHex,hexToAscii:Qu,toAscii:Qu,asciiToHex:ta,fromAscii:ta,unitMap:Vu.unitMap,toWei:function(t,e){if(e=ea(e),!Ju.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return Ju.isBN(t)?Vu.toWei(t,e):Vu.toWei(t,e).toString(10)},fromWei:function(t,e){if(e=ea(e),!Ju.isBN(t)&&"string"!=typeof t)throw new Error("Please pass numbers as strings or BN objects to avoid precision errors.");return Ju.isBN(t)?Vu.fromWei(t,e):Vu.fromWei(t,e).toString(10)},padLeft:Ju.leftPad,leftPad:Ju.leftPad,padRight:Ju.rightPad,rightPad:Ju.rightPad,toTwosComplement:Ju.toTwosComplement,isBloom:Ju.isBloom,isUserEthereumAddressInBloom:Ju.isUserEthereumAddressInBloom,isContractAddressInBloom:Ju.isContractAddressInBloom,isTopic:Ju.isTopic,isTopicInBloom:Ju.isTopicInBloom,isInBloom:Ju.isInBloom,compareBlockNumbers:function(t,e){if(t==e)return 0;if("genesis"!=t&&"earliest"!=t&&0!=t||"genesis"!=e&&"earliest"!=e&&0!=e){if("genesis"==t||"earliest"==t)return-1;if("genesis"==e||"earliest"==e)return 1;if("latest"==t)return"pending"==e?-1:1;if("latest"===e)return"pending"==t?1:-1;if("pending"==t)return 1;if("pending"==e)return-1;var r=new Gu(t),i=new Gu(e);return r.lt(i)?-1:r.eq(i)?0:1}return 0},toNumber:Ju.toNumber};function ia(t){return"tuple"===t.type?"("+t.components.map(ia).join(",")+")":t.type}const{BN:na}=require("web3-utils"),oa=require("web3-eth-abi");class sa{methodIDs;savedABIs;constructor(){this.methodIDs={},this.savedABIs=[]}addABI(t){if(!Array.isArray(t))throw new Error("Expected ABI array, got "+typeof t);t.map((t=>{if(t.name){const e=ra.sha3(t.name+"("+t?.inputs?.map(ia).join(",")+")");if(!e)return;"event"===t.type?this.methodIDs[e.slice(2)]=t:this.methodIDs[e.slice(2,10)]=t}})),this.savedABIs=this.savedABIs.concat(t)}removeABI(t){if(!Array.isArray(t))throw new Error("Expected ABI array, got "+typeof t);t.map((t=>{if(t.name){const e=ra.sha3(t.name+"("+t?.inputs?.map((t=>t.type)).join(",")+")");if(!e)return;"event"===t.type?this.methodIDs[e.slice(2)]&&delete this.methodIDs[e.slice(2)]:this.methodIDs[e.slice(2,10)]&&delete this.methodIDs[e.slice(2,10)]}}))}getABIs(){return this.savedABIs}getMethodIDs(){return this.methodIDs}decodeMethod(t){const e=t.slice(2,10),r=this.methodIDs[e];if(!r)return;const i=oa.decodeParameters(r.inputs,t.slice(10)),n={name:r.name,params:[]};for(let t=0;t<i.__length__;t++){const e=i[t];let o=e;const s=0===r.inputs?.[t].type.indexOf("uint"),h=0===r.inputs?.[t].type.indexOf("int"),u=0===r.inputs?.[t].type.indexOf("address");if(s||h){o=Array.isArray(e)?e.map((t=>new na(t).toString())):new na(e).toString()}if(u){o=Array.isArray(e)?e.map((t=>t.toLowerCase())):e.toLowerCase()}n.params.push({name:r.inputs?.[t].name,value:o,type:r.inputs?.[t].type})}return n}decodeLogs(t){return t.filter((t=>t.topics.length>0)).map((t=>{const e=t.topics[0].slice(2),r=this.methodIDs[e];if(r){const e=t.data,i=[];let n=0,o=1;const s=[];r.inputs?.map((function(t){t.indexed||s.push(t.type)}));const h=oa.decodeParameters(s,e.slice(2));return r.inputs?.map((e=>{const r={name:e.name,type:e.type,value:""};if(e.indexed?(r.value=t.topics[o],o++):(r.value=h[n],n++),"address"===e.type&&(r.value=r.value.toLowerCase(),r.value.length>42)){const t=r.value.length-42,e=r.value.split("");e.splice(2,t),r.value=e.join("")}"uint256"!==e.type&&"uint8"!==e.type&&"int"!==e.type||("string"==typeof r.value&&r.value.startsWith("0x")?r.value=new na(r.value.slice(2),16).toString(10):r.value=new na(r.value).toString(10)),i.push(r)})),{name:r.name,events:i,address:t.address}}}))}}const ha=new sa;export{sa as ABIDecoder,ra as __moduleExports,ha as abiDecoder};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
